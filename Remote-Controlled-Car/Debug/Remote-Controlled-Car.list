
Remote-Controlled-Car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041b8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  080042c4  080042c4  000052c4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043b0  080043b0  000061d8  2**0
                  CONTENTS
  4 .ARM          00000008  080043b0  080043b0  000053b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080043b8  080043b8  000061d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043b8  080043b8  000053b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080043bc  080043bc  000053bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  080043c0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000152c  200001d8  08004598  000061d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001704  08004598  00006704  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000061d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000158e1  00000000  00000000  00006201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ef0  00000000  00000000  0001bae2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00007d68  00000000  00000000  0001f9d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f68  00000000  00000000  00027740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000107d  00000000  00000000  000286a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a2e8  00000000  00000000  00029725  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017d80  00000000  00000000  00043a0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008ae69  00000000  00000000  0005b78d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000e65f6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002a70  00000000  00000000  000e663c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000059  00000000  00000000  000e90ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001d8 	.word	0x200001d8
 8000128:	00000000 	.word	0x00000000
 800012c:	080042ac 	.word	0x080042ac

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001dc 	.word	0x200001dc
 8000148:	080042ac 	.word	0x080042ac

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <process_ir_signal>:
  return result;
}



uint32_t process_ir_signal(uint32_t *signal,uint32_t *size){
 800015c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000160:	4605      	mov	r5, r0
 8000162:	b097      	sub	sp, #92	@ 0x5c
  HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8000164:	2017      	movs	r0, #23
uint32_t process_ir_signal(uint32_t *signal,uint32_t *size){
 8000166:	460f      	mov	r7, r1
  uint32_t result = 0;
 8000168:	2600      	movs	r6, #0
  HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 800016a:	f000 fc03 	bl	8000974 <HAL_NVIC_DisableIRQ>
	if (duration > NEC_1_MIN && duration < NEC_1_MAX)
 800016e:	f240 301e 	movw	r0, #798	@ 0x31e
 8000172:	f105 0308 	add.w	r3, r5, #8
 8000176:	f105 0184 	add.w	r1, r5, #132	@ 0x84
 800017a:	f46f 64c8 	mvn.w	r4, #1600	@ 0x640
 800017e:	f853 2f04 	ldr.w	r2, [r3, #4]!
	result <<= 1;
 8000182:	0076      	lsls	r6, r6, #1
	if (duration > NEC_1_MIN && duration < NEC_1_MAX)
 8000184:	4422      	add	r2, r4
 8000186:	4282      	cmp	r2, r0
	  result |= 1;
 8000188:	bf98      	it	ls
 800018a:	f046 0601 	orrls.w	r6, r6, #1
  for (uint8_t i = NEC_BIT_START; i < NEC_BIT_END; i++)
 800018e:	428b      	cmp	r3, r1
 8000190:	d1f3      	bne.n	800017a <process_ir_signal+0x1e>
  uint32_t code = decode_nec(signal);
  char msg[20] = {0};
 8000192:	2400      	movs	r4, #0
 8000194:	2210      	movs	r2, #16
 8000196:	4621      	mov	r1, r4
 8000198:	a803      	add	r0, sp, #12
 800019a:	9402      	str	r4, [sp, #8]
 800019c:	f003 fbf6 	bl	800398c <memset>
  sprintf(msg, "0x%08lX\r\n", code);
 80001a0:	4632      	mov	r2, r6
 80001a2:	492e      	ldr	r1, [pc, #184]	@ (800025c <process_ir_signal+0x100>)
 80001a4:	a802      	add	r0, sp, #8
 80001a6:	f003 fbd1 	bl	800394c <siprintf>
  CDC_Transmit_FS((uint8_t *)msg, strlen(msg));
 80001aa:	a802      	add	r0, sp, #8
 80001ac:	f7ff ffce 	bl	800014c <strlen>
 80001b0:	4601      	mov	r1, r0
 80001b2:	a802      	add	r0, sp, #8
 80001b4:	f003 fa2e 	bl	8003614 <CDC_Transmit_FS>

  for(int i = 0 ; i < 34 ; i++){

	  char msg[30] = {0};
 80001b8:	46a0      	mov	r8, r4
	  int x = 2;
	  if (signal[i] > 1600 && signal[i] < 2400)
		  x = 1;
	  else if (signal[i] > 400 && signal[i] < 1200)
		  x = 0;
	  sprintf(msg, "%d : %d --> %d\r\n",i,(int)signal[i],x);
 80001ba:	f8df 90a4 	ldr.w	r9, [pc, #164]	@ 8000260 <process_ir_signal+0x104>
 80001be:	3d04      	subs	r5, #4
	  char msg[30] = {0};
 80001c0:	221a      	movs	r2, #26
 80001c2:	2100      	movs	r1, #0
 80001c4:	a808      	add	r0, sp, #32
 80001c6:	f8cd 801c 	str.w	r8, [sp, #28]
 80001ca:	f003 fbdf 	bl	800398c <memset>
	  if (signal[i] > 1600 && signal[i] < 2400)
 80001ce:	f46f 61c8 	mvn.w	r1, #1600	@ 0x640
 80001d2:	f855 3f04 	ldr.w	r3, [r5, #4]!
 80001d6:	185a      	adds	r2, r3, r1
 80001d8:	f240 311e 	movw	r1, #798	@ 0x31e
 80001dc:	428a      	cmp	r2, r1
 80001de:	d93a      	bls.n	8000256 <process_ir_signal+0xfa>
	  else if (signal[i] > 400 && signal[i] < 1200)
 80001e0:	f46f 72c8 	mvn.w	r2, #400	@ 0x190
 80001e4:	189a      	adds	r2, r3, r2
 80001e6:	428a      	cmp	r2, r1
 80001e8:	bf94      	ite	ls
 80001ea:	2200      	movls	r2, #0
 80001ec:	2201      	movhi	r2, #1
 80001ee:	0052      	lsls	r2, r2, #1
	  sprintf(msg, "%d : %d --> %d\r\n",i,(int)signal[i],x);
 80001f0:	4649      	mov	r1, r9
 80001f2:	9200      	str	r2, [sp, #0]
 80001f4:	a807      	add	r0, sp, #28
 80001f6:	4622      	mov	r2, r4
 80001f8:	f003 fba8 	bl	800394c <siprintf>
	  CDC_Transmit_FS((uint8_t *)msg, strlen(msg));
 80001fc:	a807      	add	r0, sp, #28
 80001fe:	f7ff ffa5 	bl	800014c <strlen>
 8000202:	4601      	mov	r1, r0
 8000204:	a807      	add	r0, sp, #28
 8000206:	f003 fa05 	bl	8003614 <CDC_Transmit_FS>
  for(int i = 0 ; i < 34 ; i++){
 800020a:	3401      	adds	r4, #1
	  HAL_Delay(10);
 800020c:	200a      	movs	r0, #10
 800020e:	f000 fb4f 	bl	80008b0 <HAL_Delay>
  for(int i = 0 ; i < 34 ; i++){
 8000212:	2c22      	cmp	r4, #34	@ 0x22
	  signal[i] = 0;
 8000214:	f8c5 8000 	str.w	r8, [r5]
  for(int i = 0 ; i < 34 ; i++){
 8000218:	d1d2      	bne.n	80001c0 <process_ir_signal+0x64>
  }
  char separate[]="------------------------------------------------------\r\n";
 800021a:	4b12      	ldr	r3, [pc, #72]	@ (8000264 <process_ir_signal+0x108>)
 800021c:	aa07      	add	r2, sp, #28
 800021e:	f103 0538 	add.w	r5, r3, #56	@ 0x38
 8000222:	4614      	mov	r4, r2
 8000224:	6818      	ldr	r0, [r3, #0]
 8000226:	6859      	ldr	r1, [r3, #4]
 8000228:	3308      	adds	r3, #8
 800022a:	c403      	stmia	r4!, {r0, r1}
 800022c:	42ab      	cmp	r3, r5
 800022e:	4622      	mov	r2, r4
 8000230:	d1f7      	bne.n	8000222 <process_ir_signal+0xc6>
 8000232:	781b      	ldrb	r3, [r3, #0]
  CDC_Transmit_FS((uint8_t *)separate, strlen(separate));
 8000234:	a807      	add	r0, sp, #28
  char separate[]="------------------------------------------------------\r\n";
 8000236:	7023      	strb	r3, [r4, #0]
  CDC_Transmit_FS((uint8_t *)separate, strlen(separate));
 8000238:	f7ff ff88 	bl	800014c <strlen>
 800023c:	4601      	mov	r1, r0
 800023e:	a807      	add	r0, sp, #28
 8000240:	f003 f9e8 	bl	8003614 <CDC_Transmit_FS>
  *size = 0;
 8000244:	2300      	movs	r3, #0
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000246:	2017      	movs	r0, #23
  *size = 0;
 8000248:	603b      	str	r3, [r7, #0]
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800024a:	f000 fb85 	bl	8000958 <HAL_NVIC_EnableIRQ>
  return code ;
}
 800024e:	4630      	mov	r0, r6
 8000250:	b017      	add	sp, #92	@ 0x5c
 8000252:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		  x = 1;
 8000256:	2201      	movs	r2, #1
 8000258:	e7ca      	b.n	80001f0 <process_ir_signal+0x94>
 800025a:	bf00      	nop
 800025c:	080042c4 	.word	0x080042c4
 8000260:	080042ce 	.word	0x080042ce
 8000264:	080042df 	.word	0x080042df

08000268 <HAL_GPIO_EXTI_Callback>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
	if(GPIO_Pin == GPIO_PIN_5){
 8000268:	2820      	cmp	r0, #32
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800026a:	b508      	push	{r3, lr}
	if(GPIO_Pin == GPIO_PIN_5){
 800026c:	d10e      	bne.n	800028c <HAL_GPIO_EXTI_Callback+0x24>
		signal_timings[ir_index++] = __HAL_TIM_GET_COUNTER(&htim2);
 800026e:	490d      	ldr	r1, [pc, #52]	@ (80002a4 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000270:	4b0d      	ldr	r3, [pc, #52]	@ (80002a8 <HAL_GPIO_EXTI_Callback+0x40>)
 8000272:	681a      	ldr	r2, [r3, #0]
 8000274:	780b      	ldrb	r3, [r1, #0]
 8000276:	b2d8      	uxtb	r0, r3
 8000278:	3301      	adds	r3, #1
 800027a:	b2db      	uxtb	r3, r3
 800027c:	700b      	strb	r3, [r1, #0]
 800027e:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 8000280:	4b0a      	ldr	r3, [pc, #40]	@ (80002ac <HAL_GPIO_EXTI_Callback+0x44>)
 8000282:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
		__HAL_TIM_SET_COUNTER(&htim2, 0);
 8000286:	2300      	movs	r3, #0
 8000288:	6253      	str	r3, [r2, #36]	@ 0x24
	}
	else if (GPIO_Pin == GPIO_PIN_6){
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
		programming = true;
	}
}
 800028a:	bd08      	pop	{r3, pc}
	else if (GPIO_Pin == GPIO_PIN_6){
 800028c:	2840      	cmp	r0, #64	@ 0x40
 800028e:	d1fc      	bne.n	800028a <HAL_GPIO_EXTI_Callback+0x22>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8000290:	2200      	movs	r2, #0
 8000292:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000296:	4806      	ldr	r0, [pc, #24]	@ (80002b0 <HAL_GPIO_EXTI_Callback+0x48>)
 8000298:	f000 fc64 	bl	8000b64 <HAL_GPIO_WritePin>
		programming = true;
 800029c:	2201      	movs	r2, #1
 800029e:	4b05      	ldr	r3, [pc, #20]	@ (80002b4 <HAL_GPIO_EXTI_Callback+0x4c>)
 80002a0:	701a      	strb	r2, [r3, #0]
}
 80002a2:	e7f2      	b.n	800028a <HAL_GPIO_EXTI_Callback+0x22>
 80002a4:	20000215 	.word	0x20000215
 80002a8:	200003ac 	.word	0x200003ac
 80002ac:	20000218 	.word	0x20000218
 80002b0:	40011000 	.word	0x40011000
 80002b4:	200003a8 	.word	0x200003a8

080002b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b8:	b530      	push	{r4, r5, lr}
 80002ba:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002bc:	2214      	movs	r2, #20
 80002be:	2100      	movs	r1, #0
 80002c0:	a80c      	add	r0, sp, #48	@ 0x30
 80002c2:	f003 fb63 	bl	800398c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002c6:	2214      	movs	r2, #20
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002c8:	2510      	movs	r5, #16
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ca:	2100      	movs	r1, #0
 80002cc:	eb0d 0002 	add.w	r0, sp, r2
 80002d0:	f003 fb5c 	bl	800398c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002d4:	462a      	mov	r2, r5
 80002d6:	2100      	movs	r1, #0
 80002d8:	a801      	add	r0, sp, #4
 80002da:	f003 fb57 	bl	800398c <memset>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002de:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002e4:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002e6:	e9cd 4311 	strd	r4, r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002ea:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002ee:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f2:	a80a      	add	r0, sp, #40	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002f4:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002f6:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f8:	f001 faea 	bl	80018d0 <HAL_RCC_OscConfig>
 80002fc:	b108      	cbz	r0, 8000302 <SystemClock_Config+0x4a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002fe:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000300:	e7fe      	b.n	8000300 <SystemClock_Config+0x48>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000302:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000304:	e9cd 3405 	strd	r3, r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000308:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800030c:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800030e:	e9cd 3008 	strd	r3, r0, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000312:	4621      	mov	r1, r4
 8000314:	a805      	add	r0, sp, #20
 8000316:	f001 fc9d 	bl	8001c54 <HAL_RCC_ClockConfig>
 800031a:	b108      	cbz	r0, 8000320 <SystemClock_Config+0x68>
 800031c:	b672      	cpsid	i
  while (1)
 800031e:	e7fe      	b.n	800031e <SystemClock_Config+0x66>
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000320:	9004      	str	r0, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000322:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000324:	9501      	str	r5, [sp, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000326:	f001 fd31 	bl	8001d8c <HAL_RCCEx_PeriphCLKConfig>
 800032a:	b108      	cbz	r0, 8000330 <SystemClock_Config+0x78>
 800032c:	b672      	cpsid	i
  while (1)
 800032e:	e7fe      	b.n	800032e <SystemClock_Config+0x76>
}
 8000330:	b015      	add	sp, #84	@ 0x54
 8000332:	bd30      	pop	{r4, r5, pc}

08000334 <main>:
{
 8000334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000338:	2400      	movs	r4, #0
 800033a:	2502      	movs	r5, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800033c:	2601      	movs	r6, #1
 800033e:	f44f 5700 	mov.w	r7, #8192	@ 0x2000
{
 8000342:	b08a      	sub	sp, #40	@ 0x28
  HAL_Init();
 8000344:	f000 fa90 	bl	8000868 <HAL_Init>
  SystemClock_Config();
 8000348:	f7ff ffb6 	bl	80002b8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800034c:	2210      	movs	r2, #16
 800034e:	2100      	movs	r1, #0
 8000350:	a806      	add	r0, sp, #24
 8000352:	f003 fb1b 	bl	800398c <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000356:	4b7a      	ldr	r3, [pc, #488]	@ (8000540 <main+0x20c>)
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000358:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800035c:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800035e:	4879      	ldr	r0, [pc, #484]	@ (8000544 <main+0x210>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000360:	f042 0210 	orr.w	r2, r2, #16
 8000364:	619a      	str	r2, [r3, #24]
 8000366:	699a      	ldr	r2, [r3, #24]
 8000368:	f002 0210 	and.w	r2, r2, #16
 800036c:	9201      	str	r2, [sp, #4]
 800036e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000370:	699a      	ldr	r2, [r3, #24]
 8000372:	f042 0220 	orr.w	r2, r2, #32
 8000376:	619a      	str	r2, [r3, #24]
 8000378:	699a      	ldr	r2, [r3, #24]
 800037a:	f002 0220 	and.w	r2, r2, #32
 800037e:	9202      	str	r2, [sp, #8]
 8000380:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000382:	699a      	ldr	r2, [r3, #24]
 8000384:	f042 0204 	orr.w	r2, r2, #4
 8000388:	619a      	str	r2, [r3, #24]
 800038a:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800038c:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800038e:	f003 0304 	and.w	r3, r3, #4
 8000392:	9303      	str	r3, [sp, #12]
 8000394:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000396:	f000 fbe5 	bl	8000b64 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 800039a:	2200      	movs	r2, #0
 800039c:	211e      	movs	r1, #30
 800039e:	486a      	ldr	r0, [pc, #424]	@ (8000548 <main+0x214>)
 80003a0:	f000 fbe0 	bl	8000b64 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003a4:	4867      	ldr	r0, [pc, #412]	@ (8000544 <main+0x210>)
 80003a6:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003a8:	e9cd 4508 	strd	r4, r5, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ac:	e9cd 7606 	strd	r7, r6, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003b0:	f000 fb06 	bl	80009c0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80003b4:	231e      	movs	r3, #30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003b6:	4864      	ldr	r0, [pc, #400]	@ (8000548 <main+0x214>)
 80003b8:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ba:	e9cd 3606 	strd	r3, r6, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003be:	e9cd 4508 	strd	r4, r5, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003c2:	f000 fafd 	bl	80009c0 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80003c6:	2220      	movs	r2, #32
 80003c8:	4b60      	ldr	r3, [pc, #384]	@ (800054c <main+0x218>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003ca:	485f      	ldr	r0, [pc, #380]	@ (8000548 <main+0x214>)
 80003cc:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80003ce:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d2:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003d4:	f000 faf4 	bl	80009c0 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003d8:	2140      	movs	r1, #64	@ 0x40
 80003da:	4b5d      	ldr	r3, [pc, #372]	@ (8000550 <main+0x21c>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003dc:	485a      	ldr	r0, [pc, #360]	@ (8000548 <main+0x214>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003de:	e9cd 1306 	strd	r1, r3, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003e2:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e4:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003e6:	f000 faeb 	bl	80009c0 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80003ea:	4622      	mov	r2, r4
 80003ec:	4621      	mov	r1, r4
 80003ee:	2017      	movs	r0, #23
 80003f0:	f000 fa82 	bl	80008f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80003f4:	2017      	movs	r0, #23
 80003f6:	f000 faaf 	bl	8000958 <HAL_NVIC_EnableIRQ>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003fa:	2210      	movs	r2, #16
 80003fc:	4621      	mov	r1, r4
 80003fe:	a806      	add	r0, sp, #24
 8000400:	f003 fac4 	bl	800398c <memset>
  htim2.Init.Prescaler = 71;
 8000404:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000408:	2347      	movs	r3, #71	@ 0x47
  htim2.Instance = TIM2;
 800040a:	4d52      	ldr	r5, [pc, #328]	@ (8000554 <main+0x220>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800040c:	e9cd 4404 	strd	r4, r4, [sp, #16]
  htim2.Init.Prescaler = 71;
 8000410:	e9c5 0300 	strd	r0, r3, [r5]
  htim2.Init.Period = 65535;
 8000414:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000418:	e9c5 3403 	strd	r3, r4, [r5, #12]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800041c:	2380      	movs	r3, #128	@ 0x80
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800041e:	4628      	mov	r0, r5
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000420:	60ac      	str	r4, [r5, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000422:	61ab      	str	r3, [r5, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000424:	f001 fd86 	bl	8001f34 <HAL_TIM_Base_Init>
 8000428:	b108      	cbz	r0, 800042e <main+0xfa>
 800042a:	b672      	cpsid	i
  while (1)
 800042c:	e7fe      	b.n	800042c <main+0xf8>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800042e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000432:	4628      	mov	r0, r5
 8000434:	a906      	add	r1, sp, #24
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000436:	9306      	str	r3, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000438:	f001 fdb2 	bl	8001fa0 <HAL_TIM_ConfigClockSource>
 800043c:	b108      	cbz	r0, 8000442 <main+0x10e>
 800043e:	b672      	cpsid	i
  while (1)
 8000440:	e7fe      	b.n	8000440 <main+0x10c>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000442:	e9cd 0004 	strd	r0, r0, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000446:	a904      	add	r1, sp, #16
 8000448:	4628      	mov	r0, r5
 800044a:	f001 fe43 	bl	80020d4 <HAL_TIMEx_MasterConfigSynchronization>
 800044e:	b108      	cbz	r0, 8000454 <main+0x120>
 8000450:	b672      	cpsid	i
  while (1)
 8000452:	e7fe      	b.n	8000452 <main+0x11e>
  MX_USB_DEVICE_Init();
 8000454:	f003 f890 	bl	8003578 <MX_USB_DEVICE_Init>
  HAL_TIM_Base_Start(&htim2);
 8000458:	4628      	mov	r0, r5
 800045a:	f001 fd11 	bl	8001e80 <HAL_TIM_Base_Start>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 800045e:	4632      	mov	r2, r6
 8000460:	4639      	mov	r1, r7
 8000462:	4838      	ldr	r0, [pc, #224]	@ (8000544 <main+0x210>)
 8000464:	f000 fb7e 	bl	8000b64 <HAL_GPIO_WritePin>
	  if(ir_index >= 34){
 8000468:	4e3b      	ldr	r6, [pc, #236]	@ (8000558 <main+0x224>)
		  sig = process_ir_signal(signal_timings,&ir_index);
 800046a:	f8df 80f0 	ldr.w	r8, [pc, #240]	@ 800055c <main+0x228>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 800046e:	4c35      	ldr	r4, [pc, #212]	@ (8000544 <main+0x210>)
	  if(ir_index >= 34){
 8000470:	7833      	ldrb	r3, [r6, #0]
 8000472:	2b21      	cmp	r3, #33	@ 0x21
 8000474:	d9fc      	bls.n	8000470 <main+0x13c>
		  sig = process_ir_signal(signal_timings,&ir_index);
 8000476:	4631      	mov	r1, r6
 8000478:	4640      	mov	r0, r8
 800047a:	f7ff fe6f 	bl	800015c <process_ir_signal>
	  if (sig != 0){
 800047e:	2800      	cmp	r0, #0
 8000480:	d0f6      	beq.n	8000470 <main+0x13c>
		  if (programming){
 8000482:	4f37      	ldr	r7, [pc, #220]	@ (8000560 <main+0x22c>)
 8000484:	4b37      	ldr	r3, [pc, #220]	@ (8000564 <main+0x230>)
 8000486:	783d      	ldrb	r5, [r7, #0]
 8000488:	b305      	cbz	r5, 80004cc <main+0x198>
			  controlled_signals[prog_counter++] = sig;
 800048a:	4d37      	ldr	r5, [pc, #220]	@ (8000568 <main+0x234>)
 800048c:	782a      	ldrb	r2, [r5, #0]
 800048e:	1c51      	adds	r1, r2, #1
 8000490:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000494:	7029      	strb	r1, [r5, #0]
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8000496:	2201      	movs	r2, #1
 8000498:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800049c:	4620      	mov	r0, r4
 800049e:	f000 fb61 	bl	8000b64 <HAL_GPIO_WritePin>
			  HAL_Delay(100);
 80004a2:	2064      	movs	r0, #100	@ 0x64
 80004a4:	f000 fa04 	bl	80008b0 <HAL_Delay>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 80004a8:	2200      	movs	r2, #0
 80004aa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004ae:	4620      	mov	r0, r4
 80004b0:	f000 fb58 	bl	8000b64 <HAL_GPIO_WritePin>
			  if (prog_counter == 7){
 80004b4:	782b      	ldrb	r3, [r5, #0]
 80004b6:	2b07      	cmp	r3, #7
 80004b8:	d1da      	bne.n	8000470 <main+0x13c>
				  programming = false ;
 80004ba:	2300      	movs	r3, #0
 80004bc:	703b      	strb	r3, [r7, #0]
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 80004be:	2201      	movs	r2, #1
 80004c0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004c4:	4620      	mov	r0, r4
 80004c6:	f000 fb4d 	bl	8000b64 <HAL_GPIO_WritePin>
 80004ca:	e7d1      	b.n	8000470 <main+0x13c>
			  if (sig == controlled_signals[0]){
 80004cc:	681a      	ldr	r2, [r3, #0]
 80004ce:	4282      	cmp	r2, r0
 80004d0:	d10c      	bne.n	80004ec <main+0x1b8>
				  move_forward(&motor);
 80004d2:	4826      	ldr	r0, [pc, #152]	@ (800056c <main+0x238>)
 80004d4:	f000 f84e 	bl	8000574 <move_forward>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 80004d8:	4620      	mov	r0, r4
 80004da:	2200      	movs	r2, #0
 80004dc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004e0:	f000 fb40 	bl	8000b64 <HAL_GPIO_WritePin>
				  HAL_Delay(100);
 80004e4:	2064      	movs	r0, #100	@ 0x64
 80004e6:	f000 f9e3 	bl	80008b0 <HAL_Delay>
 80004ea:	e7e8      	b.n	80004be <main+0x18a>
			  else if (sig == controlled_signals[1]){
 80004ec:	685a      	ldr	r2, [r3, #4]
 80004ee:	4282      	cmp	r2, r0
 80004f0:	d103      	bne.n	80004fa <main+0x1c6>
				  move_backward(&motor);
 80004f2:	481e      	ldr	r0, [pc, #120]	@ (800056c <main+0x238>)
 80004f4:	f000 f856 	bl	80005a4 <move_backward>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 80004f8:	e7ee      	b.n	80004d8 <main+0x1a4>
			  else if (sig == controlled_signals[2]){
 80004fa:	689a      	ldr	r2, [r3, #8]
 80004fc:	4282      	cmp	r2, r0
 80004fe:	d103      	bne.n	8000508 <main+0x1d4>
				  turn_right(&motor);
 8000500:	481a      	ldr	r0, [pc, #104]	@ (800056c <main+0x238>)
 8000502:	f000 f8af 	bl	8000664 <turn_right>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8000506:	e7e7      	b.n	80004d8 <main+0x1a4>
			  else if (sig == controlled_signals[3]){
 8000508:	68da      	ldr	r2, [r3, #12]
 800050a:	4282      	cmp	r2, r0
 800050c:	d103      	bne.n	8000516 <main+0x1e2>
				  turn_left(&motor);
 800050e:	4817      	ldr	r0, [pc, #92]	@ (800056c <main+0x238>)
 8000510:	f000 f8ba 	bl	8000688 <turn_left>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8000514:	e7e0      	b.n	80004d8 <main+0x1a4>
			  else if (sig == controlled_signals[4]){
 8000516:	691a      	ldr	r2, [r3, #16]
 8000518:	4282      	cmp	r2, r0
 800051a:	d103      	bne.n	8000524 <main+0x1f0>
				  turn_40_degree_right(&motor);
 800051c:	4813      	ldr	r0, [pc, #76]	@ (800056c <main+0x238>)
 800051e:	f000 f8c5 	bl	80006ac <turn_40_degree_right>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8000522:	e7d9      	b.n	80004d8 <main+0x1a4>
			  else if (sig == controlled_signals[5]){
 8000524:	695a      	ldr	r2, [r3, #20]
 8000526:	4282      	cmp	r2, r0
 8000528:	d103      	bne.n	8000532 <main+0x1fe>
				  turn_40_degree_left(&motor);
 800052a:	4810      	ldr	r0, [pc, #64]	@ (800056c <main+0x238>)
 800052c:	f000 f8d0 	bl	80006d0 <turn_40_degree_left>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8000530:	e7d2      	b.n	80004d8 <main+0x1a4>
			  else if (sig == controlled_signals[6]){
 8000532:	699b      	ldr	r3, [r3, #24]
 8000534:	4283      	cmp	r3, r0
 8000536:	d19b      	bne.n	8000470 <main+0x13c>
				  stop_moving(&motor);
 8000538:	480c      	ldr	r0, [pc, #48]	@ (800056c <main+0x238>)
 800053a:	f000 f87b 	bl	8000634 <stop_moving>
 800053e:	e7cb      	b.n	80004d8 <main+0x1a4>
 8000540:	40021000 	.word	0x40021000
 8000544:	40011000 	.word	0x40011000
 8000548:	40010800 	.word	0x40010800
 800054c:	10210000 	.word	0x10210000
 8000550:	10110000 	.word	0x10110000
 8000554:	200003ac 	.word	0x200003ac
 8000558:	20000215 	.word	0x20000215
 800055c:	20000218 	.word	0x20000218
 8000560:	200003a8 	.word	0x200003a8
 8000564:	200001f4 	.word	0x200001f4
 8000568:	20000214 	.word	0x20000214
 800056c:	20000000 	.word	0x20000000

08000570 <Error_Handler>:
 8000570:	b672      	cpsid	i
  while (1)
 8000572:	e7fe      	b.n	8000572 <Error_Handler+0x2>

08000574 <move_forward>:
const float pi = 3.14159265359;
const int motor_speed = 600 ; //rpm
const float wheel_dimeter = 6.5; // cm
const float perimeter = pi*wheel_dimeter; // cm

void move_forward(Motor_Config *motor){
 8000574:	b510      	push	{r4, lr}
 8000576:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(motor->port, motor->IN1, GPIO_PIN_SET);
 8000578:	8881      	ldrh	r1, [r0, #4]
 800057a:	2201      	movs	r2, #1
 800057c:	6800      	ldr	r0, [r0, #0]
 800057e:	f000 faf1 	bl	8000b64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor->port, motor->IN2, GPIO_PIN_RESET);
 8000582:	88e1      	ldrh	r1, [r4, #6]
 8000584:	6820      	ldr	r0, [r4, #0]
 8000586:	2200      	movs	r2, #0
 8000588:	f000 faec 	bl	8000b64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor->port, motor->IN3, GPIO_PIN_SET);
 800058c:	8921      	ldrh	r1, [r4, #8]
 800058e:	6820      	ldr	r0, [r4, #0]
 8000590:	2201      	movs	r2, #1
 8000592:	f000 fae7 	bl	8000b64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor->port, motor->IN4, GPIO_PIN_RESET);
 8000596:	8961      	ldrh	r1, [r4, #10]
 8000598:	6820      	ldr	r0, [r4, #0]
 800059a:	2200      	movs	r2, #0
}
 800059c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(motor->port, motor->IN4, GPIO_PIN_RESET);
 80005a0:	f000 bae0 	b.w	8000b64 <HAL_GPIO_WritePin>

080005a4 <move_backward>:
void move_backward(Motor_Config *motor){
 80005a4:	b510      	push	{r4, lr}
 80005a6:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(motor->port, motor->IN1, GPIO_PIN_RESET);
 80005a8:	8881      	ldrh	r1, [r0, #4]
 80005aa:	2200      	movs	r2, #0
 80005ac:	6800      	ldr	r0, [r0, #0]
 80005ae:	f000 fad9 	bl	8000b64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor->port, motor->IN2, GPIO_PIN_SET);
 80005b2:	88e1      	ldrh	r1, [r4, #6]
 80005b4:	6820      	ldr	r0, [r4, #0]
 80005b6:	2201      	movs	r2, #1
 80005b8:	f000 fad4 	bl	8000b64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor->port, motor->IN3, GPIO_PIN_RESET);
 80005bc:	8921      	ldrh	r1, [r4, #8]
 80005be:	6820      	ldr	r0, [r4, #0]
 80005c0:	2200      	movs	r2, #0
 80005c2:	f000 facf 	bl	8000b64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor->port, motor->IN4, GPIO_PIN_SET);
 80005c6:	8961      	ldrh	r1, [r4, #10]
 80005c8:	6820      	ldr	r0, [r4, #0]
 80005ca:	2201      	movs	r2, #1
}
 80005cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(motor->port, motor->IN4, GPIO_PIN_SET);
 80005d0:	f000 bac8 	b.w	8000b64 <HAL_GPIO_WritePin>

080005d4 <rotate_right>:
void rotate_right(Motor_Config *motor){
 80005d4:	b510      	push	{r4, lr}
 80005d6:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(motor->port, motor->IN1, GPIO_PIN_SET);
 80005d8:	8881      	ldrh	r1, [r0, #4]
 80005da:	2201      	movs	r2, #1
 80005dc:	6800      	ldr	r0, [r0, #0]
 80005de:	f000 fac1 	bl	8000b64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor->port, motor->IN2, GPIO_PIN_RESET);
 80005e2:	88e1      	ldrh	r1, [r4, #6]
 80005e4:	6820      	ldr	r0, [r4, #0]
 80005e6:	2200      	movs	r2, #0
 80005e8:	f000 fabc 	bl	8000b64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor->port, motor->IN3, GPIO_PIN_RESET);
 80005ec:	8921      	ldrh	r1, [r4, #8]
 80005ee:	6820      	ldr	r0, [r4, #0]
 80005f0:	2200      	movs	r2, #0
 80005f2:	f000 fab7 	bl	8000b64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor->port, motor->IN4, GPIO_PIN_SET);
 80005f6:	8961      	ldrh	r1, [r4, #10]
 80005f8:	6820      	ldr	r0, [r4, #0]
 80005fa:	2201      	movs	r2, #1
}
 80005fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(motor->port, motor->IN4, GPIO_PIN_SET);
 8000600:	f000 bab0 	b.w	8000b64 <HAL_GPIO_WritePin>

08000604 <rotate_left>:
void rotate_left(Motor_Config *motor){
 8000604:	b510      	push	{r4, lr}
 8000606:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(motor->port, motor->IN1, GPIO_PIN_RESET);
 8000608:	8881      	ldrh	r1, [r0, #4]
 800060a:	2200      	movs	r2, #0
 800060c:	6800      	ldr	r0, [r0, #0]
 800060e:	f000 faa9 	bl	8000b64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor->port, motor->IN2, GPIO_PIN_SET);
 8000612:	88e1      	ldrh	r1, [r4, #6]
 8000614:	6820      	ldr	r0, [r4, #0]
 8000616:	2201      	movs	r2, #1
 8000618:	f000 faa4 	bl	8000b64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor->port, motor->IN3, GPIO_PIN_SET);
 800061c:	8921      	ldrh	r1, [r4, #8]
 800061e:	6820      	ldr	r0, [r4, #0]
 8000620:	2201      	movs	r2, #1
 8000622:	f000 fa9f 	bl	8000b64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor->port, motor->IN4, GPIO_PIN_RESET);
 8000626:	8961      	ldrh	r1, [r4, #10]
 8000628:	6820      	ldr	r0, [r4, #0]
 800062a:	2200      	movs	r2, #0
}
 800062c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(motor->port, motor->IN4, GPIO_PIN_RESET);
 8000630:	f000 ba98 	b.w	8000b64 <HAL_GPIO_WritePin>

08000634 <stop_moving>:
	HAL_Delay(50);
	rotate_left(motor);
	HAL_Delay(400);
	stop_moving(motor);
}
void stop_moving(Motor_Config *motor){
 8000634:	b510      	push	{r4, lr}
 8000636:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(motor->port, motor->IN1, GPIO_PIN_RESET);
 8000638:	8881      	ldrh	r1, [r0, #4]
 800063a:	2200      	movs	r2, #0
 800063c:	6800      	ldr	r0, [r0, #0]
 800063e:	f000 fa91 	bl	8000b64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor->port, motor->IN2, GPIO_PIN_RESET);
 8000642:	88e1      	ldrh	r1, [r4, #6]
 8000644:	6820      	ldr	r0, [r4, #0]
 8000646:	2200      	movs	r2, #0
 8000648:	f000 fa8c 	bl	8000b64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor->port, motor->IN3, GPIO_PIN_RESET);
 800064c:	8921      	ldrh	r1, [r4, #8]
 800064e:	6820      	ldr	r0, [r4, #0]
 8000650:	2200      	movs	r2, #0
 8000652:	f000 fa87 	bl	8000b64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor->port, motor->IN4, GPIO_PIN_RESET);
 8000656:	8961      	ldrh	r1, [r4, #10]
 8000658:	6820      	ldr	r0, [r4, #0]
 800065a:	2200      	movs	r2, #0
}
 800065c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(motor->port, motor->IN4, GPIO_PIN_RESET);
 8000660:	f000 ba80 	b.w	8000b64 <HAL_GPIO_WritePin>

08000664 <turn_right>:
void turn_right(Motor_Config *motor){
 8000664:	b510      	push	{r4, lr}
 8000666:	4604      	mov	r4, r0
	stop_moving(motor);
 8000668:	f7ff ffe4 	bl	8000634 <stop_moving>
	HAL_Delay(50);
 800066c:	2032      	movs	r0, #50	@ 0x32
 800066e:	f000 f91f 	bl	80008b0 <HAL_Delay>
	rotate_right(motor);
 8000672:	4620      	mov	r0, r4
 8000674:	f7ff ffae 	bl	80005d4 <rotate_right>
	HAL_Delay(200);
 8000678:	20c8      	movs	r0, #200	@ 0xc8
 800067a:	f000 f919 	bl	80008b0 <HAL_Delay>
	stop_moving(motor);
 800067e:	4620      	mov	r0, r4
}
 8000680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	stop_moving(motor);
 8000684:	f7ff bfd6 	b.w	8000634 <stop_moving>

08000688 <turn_left>:
void turn_left(Motor_Config *motor){
 8000688:	b510      	push	{r4, lr}
 800068a:	4604      	mov	r4, r0
	stop_moving(motor);
 800068c:	f7ff ffd2 	bl	8000634 <stop_moving>
	HAL_Delay(50);
 8000690:	2032      	movs	r0, #50	@ 0x32
 8000692:	f000 f90d 	bl	80008b0 <HAL_Delay>
	rotate_left(motor);
 8000696:	4620      	mov	r0, r4
 8000698:	f7ff ffb4 	bl	8000604 <rotate_left>
	HAL_Delay(200);
 800069c:	20c8      	movs	r0, #200	@ 0xc8
 800069e:	f000 f907 	bl	80008b0 <HAL_Delay>
	stop_moving(motor);
 80006a2:	4620      	mov	r0, r4
}
 80006a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	stop_moving(motor);
 80006a8:	f7ff bfc4 	b.w	8000634 <stop_moving>

080006ac <turn_40_degree_right>:
void turn_40_degree_right(Motor_Config *motor){
 80006ac:	b510      	push	{r4, lr}
 80006ae:	4604      	mov	r4, r0
	stop_moving(motor);
 80006b0:	f7ff ffc0 	bl	8000634 <stop_moving>
	HAL_Delay(50);
 80006b4:	2032      	movs	r0, #50	@ 0x32
 80006b6:	f000 f8fb 	bl	80008b0 <HAL_Delay>
	rotate_right(motor);
 80006ba:	4620      	mov	r0, r4
 80006bc:	f7ff ff8a 	bl	80005d4 <rotate_right>
	HAL_Delay(80);
 80006c0:	2050      	movs	r0, #80	@ 0x50
 80006c2:	f000 f8f5 	bl	80008b0 <HAL_Delay>
	stop_moving(motor);
 80006c6:	4620      	mov	r0, r4
}
 80006c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	stop_moving(motor);
 80006cc:	f7ff bfb2 	b.w	8000634 <stop_moving>

080006d0 <turn_40_degree_left>:
void turn_40_degree_left(Motor_Config *motor){
 80006d0:	b510      	push	{r4, lr}
 80006d2:	4604      	mov	r4, r0
	stop_moving(motor);
 80006d4:	f7ff ffae 	bl	8000634 <stop_moving>
	HAL_Delay(50);
 80006d8:	2032      	movs	r0, #50	@ 0x32
 80006da:	f000 f8e9 	bl	80008b0 <HAL_Delay>
	rotate_left(motor);
 80006de:	4620      	mov	r0, r4
 80006e0:	f7ff ff90 	bl	8000604 <rotate_left>
	HAL_Delay(80);
 80006e4:	2050      	movs	r0, #80	@ 0x50
 80006e6:	f000 f8e3 	bl	80008b0 <HAL_Delay>
	stop_moving(motor);
 80006ea:	4620      	mov	r0, r4
}
 80006ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	stop_moving(motor);
 80006f0:	f7ff bfa0 	b.w	8000634 <stop_moving>

080006f4 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006f4:	4b0e      	ldr	r3, [pc, #56]	@ (8000730 <HAL_MspInit+0x3c>)
{
 80006f6:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 80006f8:	699a      	ldr	r2, [r3, #24]
 80006fa:	f042 0201 	orr.w	r2, r2, #1
 80006fe:	619a      	str	r2, [r3, #24]
 8000700:	699a      	ldr	r2, [r3, #24]
 8000702:	f002 0201 	and.w	r2, r2, #1
 8000706:	9200      	str	r2, [sp, #0]
 8000708:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800070a:	69da      	ldr	r2, [r3, #28]
 800070c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000710:	61da      	str	r2, [r3, #28]
 8000712:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000714:	4a07      	ldr	r2, [pc, #28]	@ (8000734 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000716:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800071a:	9301      	str	r3, [sp, #4]
 800071c:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800071e:	6853      	ldr	r3, [r2, #4]
 8000720:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000724:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000728:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800072a:	b002      	add	sp, #8
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	40021000 	.word	0x40021000
 8000734:	40010000 	.word	0x40010000

08000738 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8000738:	6803      	ldr	r3, [r0, #0]
{
 800073a:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM2)
 800073c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000740:	d10a      	bne.n	8000758 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000742:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8000746:	69da      	ldr	r2, [r3, #28]
 8000748:	f042 0201 	orr.w	r2, r2, #1
 800074c:	61da      	str	r2, [r3, #28]
 800074e:	69db      	ldr	r3, [r3, #28]
 8000750:	f003 0301 	and.w	r3, r3, #1
 8000754:	9301      	str	r3, [sp, #4]
 8000756:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000758:	b002      	add	sp, #8
 800075a:	4770      	bx	lr

0800075c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800075c:	e7fe      	b.n	800075c <NMI_Handler>

0800075e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800075e:	e7fe      	b.n	800075e <HardFault_Handler>

08000760 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000760:	e7fe      	b.n	8000760 <MemManage_Handler>

08000762 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000762:	e7fe      	b.n	8000762 <BusFault_Handler>

08000764 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000764:	e7fe      	b.n	8000764 <UsageFault_Handler>

08000766 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000766:	4770      	bx	lr

08000768 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8000768:	4770      	bx	lr

0800076a <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 800076a:	4770      	bx	lr

0800076c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800076c:	f000 b88e 	b.w	800088c <HAL_IncTick>

08000770 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000770:	4801      	ldr	r0, [pc, #4]	@ (8000778 <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 8000772:	f000 ba99 	b.w	8000ca8 <HAL_PCD_IRQHandler>
 8000776:	bf00      	nop
 8000778:	200012e4 	.word	0x200012e4

0800077c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800077c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800077e:	2020      	movs	r0, #32
 8000780:	f000 f9f6 	bl	8000b70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000784:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000788:	2040      	movs	r0, #64	@ 0x40
 800078a:	f000 b9f1 	b.w	8000b70 <HAL_GPIO_EXTI_IRQHandler>
	...

08000790 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000790:	4a0b      	ldr	r2, [pc, #44]	@ (80007c0 <_sbrk+0x30>)
{
 8000792:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8000794:	6811      	ldr	r1, [r2, #0]
{
 8000796:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8000798:	b909      	cbnz	r1, 800079e <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 800079a:	490a      	ldr	r1, [pc, #40]	@ (80007c4 <_sbrk+0x34>)
 800079c:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800079e:	6810      	ldr	r0, [r2, #0]
 80007a0:	4909      	ldr	r1, [pc, #36]	@ (80007c8 <_sbrk+0x38>)
 80007a2:	4c0a      	ldr	r4, [pc, #40]	@ (80007cc <_sbrk+0x3c>)
 80007a4:	4403      	add	r3, r0
 80007a6:	1b09      	subs	r1, r1, r4
 80007a8:	428b      	cmp	r3, r1
 80007aa:	d906      	bls.n	80007ba <_sbrk+0x2a>
  {
    errno = ENOMEM;
 80007ac:	f003 f8f6 	bl	800399c <__errno>
 80007b0:	230c      	movs	r3, #12
 80007b2:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80007b4:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80007b8:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80007ba:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 80007bc:	e7fc      	b.n	80007b8 <_sbrk+0x28>
 80007be:	bf00      	nop
 80007c0:	200003f4 	.word	0x200003f4
 80007c4:	20001708 	.word	0x20001708
 80007c8:	20002800 	.word	0x20002800
 80007cc:	00000400 	.word	0x00000400

080007d0 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007d0:	4770      	bx	lr
	...

080007d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007d4:	f7ff fffc 	bl	80007d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007d8:	480b      	ldr	r0, [pc, #44]	@ (8000808 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80007da:	490c      	ldr	r1, [pc, #48]	@ (800080c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80007dc:	4a0c      	ldr	r2, [pc, #48]	@ (8000810 <LoopFillZerobss+0x16>)
  movs r3, #0
 80007de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007e0:	e002      	b.n	80007e8 <LoopCopyDataInit>

080007e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007e6:	3304      	adds	r3, #4

080007e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007ec:	d3f9      	bcc.n	80007e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ee:	4a09      	ldr	r2, [pc, #36]	@ (8000814 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80007f0:	4c09      	ldr	r4, [pc, #36]	@ (8000818 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007f4:	e001      	b.n	80007fa <LoopFillZerobss>

080007f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007f8:	3204      	adds	r2, #4

080007fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007fc:	d3fb      	bcc.n	80007f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007fe:	f003 f8d3 	bl	80039a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000802:	f7ff fd97 	bl	8000334 <main>
  bx lr
 8000806:	4770      	bx	lr
  ldr r0, =_sdata
 8000808:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800080c:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8000810:	080043c0 	.word	0x080043c0
  ldr r2, =_sbss
 8000814:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8000818:	20001704 	.word	0x20001704

0800081c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800081c:	e7fe      	b.n	800081c <ADC1_2_IRQHandler>
	...

08000820 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000820:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000822:	4b0e      	ldr	r3, [pc, #56]	@ (800085c <HAL_InitTick+0x3c>)
{
 8000824:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000826:	781a      	ldrb	r2, [r3, #0]
 8000828:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800082c:	fbb3 f3f2 	udiv	r3, r3, r2
 8000830:	4a0b      	ldr	r2, [pc, #44]	@ (8000860 <HAL_InitTick+0x40>)
 8000832:	6810      	ldr	r0, [r2, #0]
 8000834:	fbb0 f0f3 	udiv	r0, r0, r3
 8000838:	f000 f8ae 	bl	8000998 <HAL_SYSTICK_Config>
 800083c:	4604      	mov	r4, r0
 800083e:	b958      	cbnz	r0, 8000858 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000840:	2d0f      	cmp	r5, #15
 8000842:	d809      	bhi.n	8000858 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000844:	4602      	mov	r2, r0
 8000846:	4629      	mov	r1, r5
 8000848:	f04f 30ff 	mov.w	r0, #4294967295
 800084c:	f000 f854 	bl	80008f8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000850:	4620      	mov	r0, r4
 8000852:	4b04      	ldr	r3, [pc, #16]	@ (8000864 <HAL_InitTick+0x44>)
 8000854:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000856:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000858:	2001      	movs	r0, #1
 800085a:	e7fc      	b.n	8000856 <HAL_InitTick+0x36>
 800085c:	20000010 	.word	0x20000010
 8000860:	2000000c 	.word	0x2000000c
 8000864:	20000014 	.word	0x20000014

08000868 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000868:	4a07      	ldr	r2, [pc, #28]	@ (8000888 <HAL_Init+0x20>)
{
 800086a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800086c:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800086e:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000870:	f043 0310 	orr.w	r3, r3, #16
 8000874:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000876:	f000 f82d 	bl	80008d4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800087a:	200f      	movs	r0, #15
 800087c:	f7ff ffd0 	bl	8000820 <HAL_InitTick>
  HAL_MspInit();
 8000880:	f7ff ff38 	bl	80006f4 <HAL_MspInit>
}
 8000884:	2000      	movs	r0, #0
 8000886:	bd08      	pop	{r3, pc}
 8000888:	40022000 	.word	0x40022000

0800088c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800088c:	4a03      	ldr	r2, [pc, #12]	@ (800089c <HAL_IncTick+0x10>)
 800088e:	4b04      	ldr	r3, [pc, #16]	@ (80008a0 <HAL_IncTick+0x14>)
 8000890:	6811      	ldr	r1, [r2, #0]
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	440b      	add	r3, r1
 8000896:	6013      	str	r3, [r2, #0]
}
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	200003f8 	.word	0x200003f8
 80008a0:	20000010 	.word	0x20000010

080008a4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80008a4:	4b01      	ldr	r3, [pc, #4]	@ (80008ac <HAL_GetTick+0x8>)
 80008a6:	6818      	ldr	r0, [r3, #0]
}
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	200003f8 	.word	0x200003f8

080008b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008b0:	b538      	push	{r3, r4, r5, lr}
 80008b2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80008b4:	f7ff fff6 	bl	80008a4 <HAL_GetTick>
 80008b8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008ba:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80008bc:	bf1e      	ittt	ne
 80008be:	4b04      	ldrne	r3, [pc, #16]	@ (80008d0 <HAL_Delay+0x20>)
 80008c0:	781b      	ldrbne	r3, [r3, #0]
 80008c2:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008c4:	f7ff ffee 	bl	80008a4 <HAL_GetTick>
 80008c8:	1b43      	subs	r3, r0, r5
 80008ca:	42a3      	cmp	r3, r4
 80008cc:	d3fa      	bcc.n	80008c4 <HAL_Delay+0x14>
  {
  }
}
 80008ce:	bd38      	pop	{r3, r4, r5, pc}
 80008d0:	20000010 	.word	0x20000010

080008d4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008d4:	4907      	ldr	r1, [pc, #28]	@ (80008f4 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008d6:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008d8:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008da:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008de:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80008e2:	0412      	lsls	r2, r2, #16
 80008e4:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80008ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80008f0:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80008f2:	4770      	bx	lr
 80008f4:	e000ed00 	.word	0xe000ed00

080008f8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008f8:	4b15      	ldr	r3, [pc, #84]	@ (8000950 <HAL_NVIC_SetPriority+0x58>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008fa:	b530      	push	{r4, r5, lr}
 80008fc:	68dc      	ldr	r4, [r3, #12]
 80008fe:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000902:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000906:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000908:	2b04      	cmp	r3, #4
 800090a:	bf28      	it	cs
 800090c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800090e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000910:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000914:	bf94      	ite	ls
 8000916:	2400      	movls	r4, #0
 8000918:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800091a:	fa05 f303 	lsl.w	r3, r5, r3
 800091e:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000922:	40a5      	lsls	r5, r4
 8000924:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000928:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 800092a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800092c:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000930:	bfac      	ite	ge
 8000932:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000936:	4a07      	ldrlt	r2, [pc, #28]	@ (8000954 <HAL_NVIC_SetPriority+0x5c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000938:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800093c:	b2db      	uxtb	r3, r3
 800093e:	bfab      	itete	ge
 8000940:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000944:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000948:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800094c:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800094e:	bd30      	pop	{r4, r5, pc}
 8000950:	e000ed00 	.word	0xe000ed00
 8000954:	e000ed14 	.word	0xe000ed14

08000958 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000958:	2800      	cmp	r0, #0
 800095a:	db07      	blt.n	800096c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800095c:	2301      	movs	r3, #1
 800095e:	0941      	lsrs	r1, r0, #5
 8000960:	4a03      	ldr	r2, [pc, #12]	@ (8000970 <HAL_NVIC_EnableIRQ+0x18>)
 8000962:	f000 001f 	and.w	r0, r0, #31
 8000966:	4083      	lsls	r3, r0
 8000968:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	e000e100 	.word	0xe000e100

08000974 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000974:	2800      	cmp	r0, #0
 8000976:	db0c      	blt.n	8000992 <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000978:	2201      	movs	r2, #1
 800097a:	4906      	ldr	r1, [pc, #24]	@ (8000994 <HAL_NVIC_DisableIRQ+0x20>)
 800097c:	0943      	lsrs	r3, r0, #5
 800097e:	f000 001f 	and.w	r0, r0, #31
 8000982:	4082      	lsls	r2, r0
 8000984:	3320      	adds	r3, #32
 8000986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800098a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800098e:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8000992:	4770      	bx	lr
 8000994:	e000e100 	.word	0xe000e100

08000998 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000998:	3801      	subs	r0, #1
 800099a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800099e:	d20b      	bcs.n	80009b8 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009a0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009a4:	21f0      	movs	r1, #240	@ 0xf0
 80009a6:	4a05      	ldr	r2, [pc, #20]	@ (80009bc <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009a8:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009aa:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009ae:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009b0:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009b2:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009b4:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009b6:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80009b8:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80009ba:	4770      	bx	lr
 80009bc:	e000ed00 	.word	0xe000ed00

080009c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80009c4:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 80009c6:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80009c8:	f8df c17c 	ldr.w	ip, [pc, #380]	@ 8000b48 <HAL_GPIO_Init+0x188>
 80009cc:	4b5f      	ldr	r3, [pc, #380]	@ (8000b4c <HAL_GPIO_Init+0x18c>)
      switch (GPIO_Init->Mode)
 80009ce:	f8df e180 	ldr.w	lr, [pc, #384]	@ 8000b50 <HAL_GPIO_Init+0x190>
 80009d2:	f8df 8180 	ldr.w	r8, [pc, #384]	@ 8000b54 <HAL_GPIO_Init+0x194>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009d6:	680d      	ldr	r5, [r1, #0]
 80009d8:	fa35 f406 	lsrs.w	r4, r5, r6
 80009dc:	d102      	bne.n	80009e4 <HAL_GPIO_Init+0x24>
      }
    }

	position++;
  }
}
 80009de:	b003      	add	sp, #12
 80009e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 80009e4:	2701      	movs	r7, #1
 80009e6:	40b7      	lsls	r7, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009e8:	ea05 0407 	and.w	r4, r5, r7
    if (iocurrent == ioposition)
 80009ec:	ea37 0505 	bics.w	r5, r7, r5
 80009f0:	d175      	bne.n	8000ade <HAL_GPIO_Init+0x11e>
      switch (GPIO_Init->Mode)
 80009f2:	684d      	ldr	r5, [r1, #4]
 80009f4:	2d03      	cmp	r5, #3
 80009f6:	d806      	bhi.n	8000a06 <HAL_GPIO_Init+0x46>
 80009f8:	3d01      	subs	r5, #1
 80009fa:	2d02      	cmp	r5, #2
 80009fc:	d87e      	bhi.n	8000afc <HAL_GPIO_Init+0x13c>
 80009fe:	e8df f005 	tbb	[pc, r5]
 8000a02:	948f      	.short	0x948f
 8000a04:	9a          	.byte	0x9a
 8000a05:	00          	.byte	0x00
 8000a06:	2d12      	cmp	r5, #18
 8000a08:	f000 8092 	beq.w	8000b30 <HAL_GPIO_Init+0x170>
 8000a0c:	d869      	bhi.n	8000ae2 <HAL_GPIO_Init+0x122>
 8000a0e:	2d11      	cmp	r5, #17
 8000a10:	f000 8088 	beq.w	8000b24 <HAL_GPIO_Init+0x164>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a14:	2cff      	cmp	r4, #255	@ 0xff
 8000a16:	bf98      	it	ls
 8000a18:	4681      	movls	r9, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a1a:	f04f 0b0f 	mov.w	fp, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a1e:	bf88      	it	hi
 8000a20:	f100 0904 	addhi.w	r9, r0, #4
 8000a24:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a28:	f8d9 7000 	ldr.w	r7, [r9]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a2c:	bf88      	it	hi
 8000a2e:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a30:	fa0b fa05 	lsl.w	sl, fp, r5
 8000a34:	ea27 070a 	bic.w	r7, r7, sl
 8000a38:	fa02 f505 	lsl.w	r5, r2, r5
 8000a3c:	432f      	orrs	r7, r5
 8000a3e:	f8c9 7000 	str.w	r7, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a42:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8000a46:	f019 5f80 	tst.w	r9, #268435456	@ 0x10000000
 8000a4a:	d048      	beq.n	8000ade <HAL_GPIO_Init+0x11e>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a4c:	f8dc 5018 	ldr.w	r5, [ip, #24]
 8000a50:	f026 0703 	bic.w	r7, r6, #3
 8000a54:	f045 0501 	orr.w	r5, r5, #1
 8000a58:	f8cc 5018 	str.w	r5, [ip, #24]
 8000a5c:	f8dc 5018 	ldr.w	r5, [ip, #24]
 8000a60:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 8000a64:	f005 0501 	and.w	r5, r5, #1
 8000a68:	9501      	str	r5, [sp, #4]
 8000a6a:	f507 3780 	add.w	r7, r7, #65536	@ 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a6e:	f006 0a03 	and.w	sl, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a72:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a74:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8000a78:	68bd      	ldr	r5, [r7, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a7a:	fa0b fb0a 	lsl.w	fp, fp, sl
 8000a7e:	ea25 0b0b 	bic.w	fp, r5, fp
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a82:	4d35      	ldr	r5, [pc, #212]	@ (8000b58 <HAL_GPIO_Init+0x198>)
 8000a84:	42a8      	cmp	r0, r5
 8000a86:	d05a      	beq.n	8000b3e <HAL_GPIO_Init+0x17e>
 8000a88:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8000a8c:	42a8      	cmp	r0, r5
 8000a8e:	d058      	beq.n	8000b42 <HAL_GPIO_Init+0x182>
 8000a90:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8000a94:	42a8      	cmp	r0, r5
 8000a96:	bf14      	ite	ne
 8000a98:	2503      	movne	r5, #3
 8000a9a:	2502      	moveq	r5, #2
 8000a9c:	fa05 f50a 	lsl.w	r5, r5, sl
 8000aa0:	ea45 050b 	orr.w	r5, r5, fp
        AFIO->EXTICR[position >> 2u] = temp;
 8000aa4:	60bd      	str	r5, [r7, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 8000aa6:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000aa8:	f419 1f80 	tst.w	r9, #1048576	@ 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000aac:	bf14      	ite	ne
 8000aae:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ab0:	43a5      	biceq	r5, r4
 8000ab2:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ab4:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ab6:	f419 1f00 	tst.w	r9, #2097152	@ 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000aba:	bf14      	ite	ne
 8000abc:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000abe:	43a5      	biceq	r5, r4
 8000ac0:	60dd      	str	r5, [r3, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 8000ac2:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ac4:	f419 3f00 	tst.w	r9, #131072	@ 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000ac8:	bf14      	ite	ne
 8000aca:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000acc:	43a5      	biceq	r5, r4
 8000ace:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 8000ad0:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ad2:	f419 3f80 	tst.w	r9, #65536	@ 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000ad6:	bf14      	ite	ne
 8000ad8:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ada:	43a5      	biceq	r5, r4
 8000adc:	601d      	str	r5, [r3, #0]
	position++;
 8000ade:	3601      	adds	r6, #1
 8000ae0:	e779      	b.n	80009d6 <HAL_GPIO_Init+0x16>
      switch (GPIO_Init->Mode)
 8000ae2:	f8df 9078 	ldr.w	r9, [pc, #120]	@ 8000b5c <HAL_GPIO_Init+0x19c>
 8000ae6:	454d      	cmp	r5, r9
 8000ae8:	d008      	beq.n	8000afc <HAL_GPIO_Init+0x13c>
 8000aea:	d811      	bhi.n	8000b10 <HAL_GPIO_Init+0x150>
 8000aec:	f5a9 1980 	sub.w	r9, r9, #1048576	@ 0x100000
 8000af0:	454d      	cmp	r5, r9
 8000af2:	d003      	beq.n	8000afc <HAL_GPIO_Init+0x13c>
 8000af4:	4575      	cmp	r5, lr
 8000af6:	d001      	beq.n	8000afc <HAL_GPIO_Init+0x13c>
 8000af8:	4545      	cmp	r5, r8
 8000afa:	d18b      	bne.n	8000a14 <HAL_GPIO_Init+0x54>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000afc:	688a      	ldr	r2, [r1, #8]
 8000afe:	b1e2      	cbz	r2, 8000b3a <HAL_GPIO_Init+0x17a>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b00:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000b02:	bf08      	it	eq
 8000b04:	6107      	streq	r7, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b06:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 8000b0a:	bf18      	it	ne
 8000b0c:	6147      	strne	r7, [r0, #20]
 8000b0e:	e781      	b.n	8000a14 <HAL_GPIO_Init+0x54>
      switch (GPIO_Init->Mode)
 8000b10:	f8df 904c 	ldr.w	r9, [pc, #76]	@ 8000b60 <HAL_GPIO_Init+0x1a0>
 8000b14:	454d      	cmp	r5, r9
 8000b16:	d0f1      	beq.n	8000afc <HAL_GPIO_Init+0x13c>
 8000b18:	f509 3980 	add.w	r9, r9, #65536	@ 0x10000
 8000b1c:	454d      	cmp	r5, r9
 8000b1e:	e7ec      	b.n	8000afa <HAL_GPIO_Init+0x13a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b20:	68ca      	ldr	r2, [r1, #12]
          break;
 8000b22:	e777      	b.n	8000a14 <HAL_GPIO_Init+0x54>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b24:	68ca      	ldr	r2, [r1, #12]
 8000b26:	3204      	adds	r2, #4
          break;
 8000b28:	e774      	b.n	8000a14 <HAL_GPIO_Init+0x54>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b2a:	68ca      	ldr	r2, [r1, #12]
 8000b2c:	3208      	adds	r2, #8
          break;
 8000b2e:	e771      	b.n	8000a14 <HAL_GPIO_Init+0x54>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b30:	68ca      	ldr	r2, [r1, #12]
 8000b32:	320c      	adds	r2, #12
          break;
 8000b34:	e76e      	b.n	8000a14 <HAL_GPIO_Init+0x54>
      switch (GPIO_Init->Mode)
 8000b36:	2200      	movs	r2, #0
 8000b38:	e76c      	b.n	8000a14 <HAL_GPIO_Init+0x54>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b3a:	2204      	movs	r2, #4
 8000b3c:	e76a      	b.n	8000a14 <HAL_GPIO_Init+0x54>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b3e:	2500      	movs	r5, #0
 8000b40:	e7ac      	b.n	8000a9c <HAL_GPIO_Init+0xdc>
 8000b42:	2501      	movs	r5, #1
 8000b44:	e7aa      	b.n	8000a9c <HAL_GPIO_Init+0xdc>
 8000b46:	bf00      	nop
 8000b48:	40021000 	.word	0x40021000
 8000b4c:	40010400 	.word	0x40010400
 8000b50:	10210000 	.word	0x10210000
 8000b54:	10110000 	.word	0x10110000
 8000b58:	40010800 	.word	0x40010800
 8000b5c:	10220000 	.word	0x10220000
 8000b60:	10310000 	.word	0x10310000

08000b64 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b64:	b10a      	cbz	r2, 8000b6a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b66:	6101      	str	r1, [r0, #16]
  }
}
 8000b68:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b6a:	0409      	lsls	r1, r1, #16
 8000b6c:	e7fb      	b.n	8000b66 <HAL_GPIO_WritePin+0x2>
	...

08000b70 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000b70:	4a04      	ldr	r2, [pc, #16]	@ (8000b84 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 8000b72:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000b74:	6951      	ldr	r1, [r2, #20]
 8000b76:	4201      	tst	r1, r0
 8000b78:	d002      	beq.n	8000b80 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000b7a:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000b7c:	f7ff fb74 	bl	8000268 <HAL_GPIO_EXTI_Callback>
  }
}
 8000b80:	bd08      	pop	{r3, pc}
 8000b82:	bf00      	nop
 8000b84:	40010400 	.word	0x40010400

08000b88 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000b8a:	4604      	mov	r4, r0
 8000b8c:	b1e0      	cbz	r0, 8000bc8 <HAL_PCD_Init+0x40>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000b8e:	f890 3291 	ldrb.w	r3, [r0, #657]	@ 0x291
 8000b92:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8000b96:	b91b      	cbnz	r3, 8000ba0 <HAL_PCD_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000b98:	f880 2290 	strb.w	r2, [r0, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000b9c:	f002 fdce 	bl	800373c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000ba0:	2303      	movs	r3, #3
 8000ba2:	f884 3291 	strb.w	r3, [r4, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8000ba6:	2300      	movs	r3, #0

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000ba8:	4625      	mov	r5, r4
  hpcd->Init.dma_enable = 0U;
 8000baa:	7163      	strb	r3, [r4, #5]
  __HAL_PCD_DISABLE(hpcd);
 8000bac:	f855 0b04 	ldr.w	r0, [r5], #4
 8000bb0:	f001 faca 	bl	8002148 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000bb4:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8000bb8:	6820      	ldr	r0, [r4, #0]
 8000bba:	f001 fab5 	bl	8002128 <USB_CoreInit>
 8000bbe:	4601      	mov	r1, r0
 8000bc0:	b128      	cbz	r0, 8000bce <HAL_PCD_Init+0x46>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	f884 3291 	strb.w	r3, [r4, #657]	@ 0x291
    return HAL_ERROR;
 8000bc8:	2501      	movs	r5, #1
  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8000bca:	4628      	mov	r0, r5
 8000bcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8000bce:	6820      	ldr	r0, [r4, #0]
 8000bd0:	f001 fac4 	bl	800215c <USB_SetCurrentMode>
 8000bd4:	2800      	cmp	r0, #0
 8000bd6:	d1f4      	bne.n	8000bc2 <HAL_PCD_Init+0x3a>
 8000bd8:	4602      	mov	r2, r0
    hpcd->IN_ep[i].is_in = 1U;
 8000bda:	2701      	movs	r7, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000bdc:	7926      	ldrb	r6, [r4, #4]
 8000bde:	f104 0310 	add.w	r3, r4, #16
 8000be2:	b2c1      	uxtb	r1, r0
 8000be4:	428e      	cmp	r6, r1
 8000be6:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8000bea:	d818      	bhi.n	8000c1e <HAL_PCD_Init+0x96>
 8000bec:	2100      	movs	r1, #0
    hpcd->OUT_ep[i].is_in = 0U;
 8000bee:	460a      	mov	r2, r1
 8000bf0:	f504 73a8 	add.w	r3, r4, #336	@ 0x150
 8000bf4:	b2c8      	uxtb	r0, r1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000bf6:	4286      	cmp	r6, r0
 8000bf8:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8000bfc:	d81b      	bhi.n	8000c36 <HAL_PCD_Init+0xae>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000bfe:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8000c02:	6820      	ldr	r0, [r4, #0]
 8000c04:	f001 faac 	bl	8002160 <USB_DevInit>
 8000c08:	4605      	mov	r5, r0
 8000c0a:	2800      	cmp	r0, #0
 8000c0c:	d1d9      	bne.n	8000bc2 <HAL_PCD_Init+0x3a>
  hpcd->State = HAL_PCD_STATE_READY;
 8000c0e:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 8000c10:	7360      	strb	r0, [r4, #13]
  (void)USB_DevDisconnect(hpcd->Instance);
 8000c12:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_READY;
 8000c14:	f884 3291 	strb.w	r3, [r4, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8000c18:	f001 fd58 	bl	80026cc <USB_DevDisconnect>
  return HAL_OK;
 8000c1c:	e7d5      	b.n	8000bca <HAL_PCD_Init+0x42>
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000c1e:	e943 2206 	strd	r2, r2, [r3, #-24]
    hpcd->IN_ep[i].is_in = 1U;
 8000c22:	f803 7c27 	strb.w	r7, [r3, #-39]
    hpcd->IN_ep[i].num = i;
 8000c26:	f803 1c28 	strb.w	r1, [r3, #-40]
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000c2a:	f803 2c25 	strb.w	r2, [r3, #-37]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000c2e:	f843 2c10 	str.w	r2, [r3, #-16]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c32:	3001      	adds	r0, #1
 8000c34:	e7d5      	b.n	8000be2 <HAL_PCD_Init+0x5a>
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000c36:	e943 2206 	strd	r2, r2, [r3, #-24]
    hpcd->OUT_ep[i].is_in = 0U;
 8000c3a:	f803 2c27 	strb.w	r2, [r3, #-39]
    hpcd->OUT_ep[i].num = i;
 8000c3e:	f803 0c28 	strb.w	r0, [r3, #-40]
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000c42:	f803 2c25 	strb.w	r2, [r3, #-37]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000c46:	f843 2c10 	str.w	r2, [r3, #-16]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c4a:	3101      	adds	r1, #1
 8000c4c:	e7d2      	b.n	8000bf4 <HAL_PCD_Init+0x6c>

08000c4e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000c4e:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 8000c50:	f890 3290 	ldrb.w	r3, [r0, #656]	@ 0x290
{
 8000c54:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	d010      	beq.n	8000c7c <HAL_PCD_Start+0x2e>
 8000c5a:	2501      	movs	r5, #1
 8000c5c:	f880 5290 	strb.w	r5, [r0, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8000c60:	6800      	ldr	r0, [r0, #0]
 8000c62:	f001 fa68 	bl	8002136 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000c66:	4629      	mov	r1, r5
 8000c68:	4620      	mov	r0, r4
 8000c6a:	f002 fe6e 	bl	800394a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8000c6e:	6820      	ldr	r0, [r4, #0]
 8000c70:	f001 fd2a 	bl	80026c8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000c74:	2000      	movs	r0, #0
 8000c76:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290

  return HAL_OK;
}
 8000c7a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8000c7c:	2002      	movs	r0, #2
 8000c7e:	e7fc      	b.n	8000c7a <HAL_PCD_Start+0x2c>

08000c80 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000c80:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8000c82:	f890 2290 	ldrb.w	r2, [r0, #656]	@ 0x290
{
 8000c86:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000c88:	2a01      	cmp	r2, #1
 8000c8a:	d00a      	beq.n	8000ca2 <HAL_PCD_SetAddress+0x22>
 8000c8c:	2201      	movs	r2, #1
  hpcd->USB_Address = address;
 8000c8e:	7341      	strb	r1, [r0, #13]
  __HAL_LOCK(hpcd);
 8000c90:	f880 2290 	strb.w	r2, [r0, #656]	@ 0x290
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000c94:	6800      	ldr	r0, [r0, #0]
 8000c96:	f001 fd11 	bl	80026bc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000c9a:	2000      	movs	r0, #0
 8000c9c:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290

  return HAL_OK;
}
 8000ca0:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000ca2:	2002      	movs	r0, #2
 8000ca4:	e7fc      	b.n	8000ca0 <HAL_PCD_SetAddress+0x20>
	...

08000ca8 <HAL_PCD_IRQHandler>:
{
 8000ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000cac:	4604      	mov	r4, r0
 8000cae:	b085      	sub	sp, #20
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8000cb0:	6800      	ldr	r0, [r0, #0]
 8000cb2:	f001 fd0d 	bl	80026d0 <USB_ReadInterrupts>
  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8000cb6:	f410 4500 	ands.w	r5, r0, #32768	@ 0x8000
 8000cba:	f000 844f 	beq.w	800155c <HAL_PCD_IRQHandler+0x8b4>
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);

        if (ep->type == EP_TYPE_ISOC)
 8000cbe:	2528      	movs	r5, #40	@ 0x28
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000cc0:	4ec6      	ldr	r6, [pc, #792]	@ (8000fdc <HAL_PCD_IRQHandler+0x334>)
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8000cc2:	6820      	ldr	r0, [r4, #0]
 8000cc4:	f8b0 3044 	ldrh.w	r3, [r0, #68]	@ 0x44
 8000cc8:	041f      	lsls	r7, r3, #16
 8000cca:	d402      	bmi.n	8000cd2 <HAL_PCD_IRQHandler+0x2a>
}
 8000ccc:	b005      	add	sp, #20
 8000cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wIstr = hpcd->Instance->ISTR;
 8000cd2:	f8b0 3044 	ldrh.w	r3, [r0, #68]	@ 0x44
    if (epindex == 0U)
 8000cd6:	f013 070f 	ands.w	r7, r3, #15
    wIstr = hpcd->Instance->ISTR;
 8000cda:	b299      	uxth	r1, r3
    if (epindex == 0U)
 8000cdc:	f040 80c0 	bne.w	8000e60 <HAL_PCD_IRQHandler+0x1b8>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8000ce0:	f011 0110 	ands.w	r1, r1, #16
 8000ce4:	d126      	bne.n	8000d34 <HAL_PCD_IRQHandler+0x8c>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000ce6:	8803      	ldrh	r3, [r0, #0]
 8000ce8:	b29b      	uxth	r3, r3
 8000cea:	4033      	ands	r3, r6
 8000cec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000cf0:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000cf2:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8000cf6:	7c22      	ldrb	r2, [r4, #16]
 8000cf8:	b29b      	uxth	r3, r3
 8000cfa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000cfe:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000d02:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	@ 0x404
        ep->xfer_buff += ep->xfer_count;
 8000d06:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000d08:	f3c3 0309 	ubfx	r3, r3, #0, #10
        ep->xfer_buff += ep->xfer_count;
 8000d0c:	441a      	add	r2, r3
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000d0e:	62e3      	str	r3, [r4, #44]	@ 0x2c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8000d10:	4620      	mov	r0, r4
        ep->xfer_buff += ep->xfer_count;
 8000d12:	6262      	str	r2, [r4, #36]	@ 0x24
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8000d14:	f002 fd41 	bl	800379a <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8000d18:	7b63      	ldrb	r3, [r4, #13]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d0d1      	beq.n	8000cc2 <HAL_PCD_IRQHandler+0x1a>
 8000d1e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8000d20:	6821      	ldr	r1, [r4, #0]
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8000d22:	2a00      	cmp	r2, #0
 8000d24:	d1cd      	bne.n	8000cc2 <HAL_PCD_IRQHandler+0x1a>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8000d26:	7b63      	ldrb	r3, [r4, #13]
 8000d28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d2c:	f8a1 304c 	strh.w	r3, [r1, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8000d30:	7362      	strb	r2, [r4, #13]
 8000d32:	e7c6      	b.n	8000cc2 <HAL_PCD_IRQHandler+0x1a>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8000d34:	8807      	ldrh	r7, [r0, #0]
 8000d36:	b2bb      	uxth	r3, r7
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8000d38:	f417 6700 	ands.w	r7, r7, #2048	@ 0x800
 8000d3c:	d021      	beq.n	8000d82 <HAL_PCD_IRQHandler+0xda>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000d3e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8000d42:	f894 2150 	ldrb.w	r2, [r4, #336]	@ 0x150
 8000d46:	b29b      	uxth	r3, r3
 8000d48:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000d4c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000d50:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	@ 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8000d54:	f8b4 2156 	ldrh.w	r2, [r4, #342]	@ 0x156
 8000d58:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000d5c:	f8c4 316c 	str.w	r3, [r4, #364]	@ 0x16c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8000d60:	f504 7126 	add.w	r1, r4, #664	@ 0x298
 8000d64:	f001 feff 	bl	8002b66 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000d68:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8000d6a:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000d6c:	8813      	ldrh	r3, [r2, #0]
 8000d6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000d72:	051b      	lsls	r3, r3, #20
 8000d74:	0d1b      	lsrs	r3, r3, #20
 8000d76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d7a:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8000d7c:	f002 fcfe 	bl	800377c <HAL_PCD_SetupStageCallback>
 8000d80:	e79f      	b.n	8000cc2 <HAL_PCD_IRQHandler+0x1a>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000d82:	0419      	lsls	r1, r3, #16
 8000d84:	d59d      	bpl.n	8000cc2 <HAL_PCD_IRQHandler+0x1a>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000d86:	8803      	ldrh	r3, [r0, #0]
 8000d88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000d8c:	051b      	lsls	r3, r3, #20
 8000d8e:	0d1b      	lsrs	r3, r3, #20
 8000d90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d94:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000d96:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8000d9a:	f894 2150 	ldrb.w	r2, [r4, #336]	@ 0x150
 8000d9e:	b29b      	uxth	r3, r3
 8000da0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000da4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000da8:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	@ 0x40c
 8000dac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000db0:	f8c4 316c 	str.w	r3, [r4, #364]	@ 0x16c
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8000db4:	b18b      	cbz	r3, 8000dda <HAL_PCD_IRQHandler+0x132>
 8000db6:	f8d4 1164 	ldr.w	r1, [r4, #356]	@ 0x164
 8000dba:	b171      	cbz	r1, 8000dda <HAL_PCD_IRQHandler+0x132>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8000dbc:	f8b4 2156 	ldrh.w	r2, [r4, #342]	@ 0x156
 8000dc0:	f001 fed1 	bl	8002b66 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8000dc4:	f8d4 3164 	ldr.w	r3, [r4, #356]	@ 0x164
 8000dc8:	f8d4 216c 	ldr.w	r2, [r4, #364]	@ 0x16c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8000dcc:	4639      	mov	r1, r7
            ep->xfer_buff += ep->xfer_count;
 8000dce:	4413      	add	r3, r2
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8000dd0:	4620      	mov	r0, r4
            ep->xfer_buff += ep->xfer_count;
 8000dd2:	f8c4 3164 	str.w	r3, [r4, #356]	@ 0x164
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8000dd6:	f002 fcd7 	bl	8003788 <HAL_PCD_DataOutStageCallback>
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8000dda:	6821      	ldr	r1, [r4, #0]
 8000ddc:	880a      	ldrh	r2, [r1, #0]
 8000dde:	b293      	uxth	r3, r2
          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8000de0:	0512      	lsls	r2, r2, #20
 8000de2:	f53f af6e 	bmi.w	8000cc2 <HAL_PCD_IRQHandler+0x1a>
 8000de6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8000dea:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8000dee:	f43f af68 	beq.w	8000cc2 <HAL_PCD_IRQHandler+0x1a>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000df2:	f8b1 2050 	ldrh.w	r2, [r1, #80]	@ 0x50
 8000df6:	f201 400c 	addw	r0, r1, #1036	@ 0x40c
 8000dfa:	b292      	uxth	r2, r2
 8000dfc:	5a83      	ldrh	r3, [r0, r2]
 8000dfe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000e02:	5283      	strh	r3, [r0, r2]
 8000e04:	f8d4 3160 	ldr.w	r3, [r4, #352]	@ 0x160
 8000e08:	2b3e      	cmp	r3, #62	@ 0x3e
 8000e0a:	d91d      	bls.n	8000e48 <HAL_PCD_IRQHandler+0x1a0>
 8000e0c:	095f      	lsrs	r7, r3, #5
 8000e0e:	06db      	lsls	r3, r3, #27
 8000e10:	5a83      	ldrh	r3, [r0, r2]
 8000e12:	bf08      	it	eq
 8000e14:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8000e18:	b29b      	uxth	r3, r3
 8000e1a:	ea43 2387 	orr.w	r3, r3, r7, lsl #10
 8000e1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000e22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000e26:	b29b      	uxth	r3, r3
 8000e28:	5283      	strh	r3, [r0, r2]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8000e2a:	880b      	ldrh	r3, [r1, #0]
 8000e2c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000e30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000e34:	041b      	lsls	r3, r3, #16
 8000e36:	0c1b      	lsrs	r3, r3, #16
 8000e38:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 8000e3c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000e40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e44:	800b      	strh	r3, [r1, #0]
 8000e46:	e73c      	b.n	8000cc2 <HAL_PCD_IRQHandler+0x1a>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000e48:	b90b      	cbnz	r3, 8000e4e <HAL_PCD_IRQHandler+0x1a6>
 8000e4a:	5a83      	ldrh	r3, [r0, r2]
 8000e4c:	e7e7      	b.n	8000e1e <HAL_PCD_IRQHandler+0x176>
 8000e4e:	085f      	lsrs	r7, r3, #1
 8000e50:	07db      	lsls	r3, r3, #31
 8000e52:	5a83      	ldrh	r3, [r0, r2]
 8000e54:	bf48      	it	mi
 8000e56:	3701      	addmi	r7, #1
 8000e58:	b29b      	uxth	r3, r3
 8000e5a:	ea43 2387 	orr.w	r3, r3, r7, lsl #10
 8000e5e:	e7e2      	b.n	8000e26 <HAL_PCD_IRQHandler+0x17e>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8000e60:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000e64:	0419      	lsls	r1, r3, #16
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8000e66:	fa1f f883 	uxth.w	r8, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000e6a:	f140 80f6 	bpl.w	800105a <HAL_PCD_IRQHandler+0x3b2>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8000e6e:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
        if (ep->doublebuffer == 0U)
 8000e72:	fb05 4107 	mla	r1, r5, r7, r4
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8000e76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000e7a:	051b      	lsls	r3, r3, #20
 8000e7c:	0d1b      	lsrs	r3, r3, #20
 8000e7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e82:	f820 3027 	strh.w	r3, [r0, r7, lsl #2]
        if (ep->doublebuffer == 0U)
 8000e86:	f891 315c 	ldrb.w	r3, [r1, #348]	@ 0x15c
 8000e8a:	f500 6e80 	add.w	lr, r0, #1024	@ 0x400
 8000e8e:	b9bb      	cbnz	r3, 8000ec0 <HAL_PCD_IRQHandler+0x218>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000e90:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8000e94:	f891 2150 	ldrb.w	r2, [r1, #336]	@ 0x150
 8000e98:	b29b      	uxth	r3, r3
 8000e9a:	3306      	adds	r3, #6
 8000e9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000ea0:	f83e 9013 	ldrh.w	r9, [lr, r3, lsl #1]
 8000ea4:	f3c9 0909 	ubfx	r9, r9, #0, #10
          if (count != 0U)
 8000ea8:	f1b9 0f00 	cmp.w	r9, #0
 8000eac:	f000 80ba 	beq.w	8001024 <HAL_PCD_IRQHandler+0x37c>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8000eb0:	464b      	mov	r3, r9
 8000eb2:	f8b1 2156 	ldrh.w	r2, [r1, #342]	@ 0x156
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000eb6:	f8d1 1164 	ldr.w	r1, [r1, #356]	@ 0x164
 8000eba:	f001 fe54 	bl	8002b66 <USB_ReadPMA>
 8000ebe:	e0b1      	b.n	8001024 <HAL_PCD_IRQHandler+0x37c>
          if (ep->type == EP_TYPE_BULK)
 8000ec0:	f891 3153 	ldrb.w	r3, [r1, #339]	@ 0x153

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000ec4:	f891 2150 	ldrb.w	r2, [r1, #336]	@ 0x150
          if (ep->type == EP_TYPE_BULK)
 8000ec8:	2b02      	cmp	r3, #2
 8000eca:	f040 8089 	bne.w	8000fe0 <HAL_PCD_IRQHandler+0x338>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000ece:	f8b0 9050 	ldrh.w	r9, [r0, #80]	@ 0x50
 8000ed2:	ea4f 0bc2 	mov.w	fp, r2, lsl #3
 8000ed6:	fa1f f989 	uxth.w	r9, r9
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8000eda:	f418 4a80 	ands.w	sl, r8, #16384	@ 0x4000

    if (ep->xfer_len >= count)
 8000ede:	f8d1 3168 	ldr.w	r3, [r1, #360]	@ 0x168
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000ee2:	44d9      	add	r9, fp
 8000ee4:	f008 0c40 	and.w	ip, r8, #64	@ 0x40
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8000ee8:	d03c      	beq.n	8000f64 <HAL_PCD_IRQHandler+0x2bc>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000eea:	f109 0902 	add.w	r9, r9, #2
 8000eee:	f83e 9019 	ldrh.w	r9, [lr, r9, lsl #1]
 8000ef2:	f3c9 0909 	ubfx	r9, r9, #0, #10
    if (ep->xfer_len >= count)
 8000ef6:	4599      	cmp	r9, r3
 8000ef8:	d913      	bls.n	8000f22 <HAL_PCD_IRQHandler+0x27a>
 8000efa:	2300      	movs	r3, #0
 8000efc:	f8c1 3168 	str.w	r3, [r1, #360]	@ 0x168
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8000f00:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8000f04:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000f08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000f0c:	041b      	lsls	r3, r3, #16
 8000f0e:	0c1b      	lsrs	r3, r3, #16
 8000f10:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8000f14:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f1c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8000f20:	e005      	b.n	8000f2e <HAL_PCD_IRQHandler+0x286>
      ep->xfer_len -= count;
 8000f22:	eba3 0309 	sub.w	r3, r3, r9
 8000f26:	f8c1 3168 	str.w	r3, [r1, #360]	@ 0x168
    if (ep->xfer_len == 0U)
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d0e8      	beq.n	8000f00 <HAL_PCD_IRQHandler+0x258>
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8000f2e:	f1bc 0f00 	cmp.w	ip, #0
 8000f32:	d00d      	beq.n	8000f50 <HAL_PCD_IRQHandler+0x2a8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8000f34:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8000f38:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8000f3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000f40:	041b      	lsls	r3, r3, #16
 8000f42:	0c1b      	lsrs	r3, r3, #16
 8000f44:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f48:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000f4c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    if (count != 0U)
 8000f50:	f1b9 0f00 	cmp.w	r9, #0
 8000f54:	d066      	beq.n	8001024 <HAL_PCD_IRQHandler+0x37c>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8000f56:	2128      	movs	r1, #40	@ 0x28
 8000f58:	fb01 4107 	mla	r1, r1, r7, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8000f5c:	464b      	mov	r3, r9
 8000f5e:	f8b1 2158 	ldrh.w	r2, [r1, #344]	@ 0x158
 8000f62:	e7a8      	b.n	8000eb6 <HAL_PCD_IRQHandler+0x20e>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8000f64:	f109 0906 	add.w	r9, r9, #6
 8000f68:	f83e 9019 	ldrh.w	r9, [lr, r9, lsl #1]
 8000f6c:	f3c9 0909 	ubfx	r9, r9, #0, #10

    if (ep->xfer_len >= count)
 8000f70:	4599      	cmp	r9, r3
 8000f72:	d912      	bls.n	8000f9a <HAL_PCD_IRQHandler+0x2f2>
 8000f74:	f8c1 a168 	str.w	sl, [r1, #360]	@ 0x168
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8000f78:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8000f7c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000f80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000f84:	041b      	lsls	r3, r3, #16
 8000f86:	0c1b      	lsrs	r3, r3, #16
 8000f88:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8000f8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f94:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8000f98:	e005      	b.n	8000fa6 <HAL_PCD_IRQHandler+0x2fe>
      ep->xfer_len -= count;
 8000f9a:	eba3 0309 	sub.w	r3, r3, r9
 8000f9e:	f8c1 3168 	str.w	r3, [r1, #360]	@ 0x168
    if (ep->xfer_len == 0U)
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d0e8      	beq.n	8000f78 <HAL_PCD_IRQHandler+0x2d0>
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8000fa6:	f1bc 0f00 	cmp.w	ip, #0
 8000faa:	d10d      	bne.n	8000fc8 <HAL_PCD_IRQHandler+0x320>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8000fac:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8000fb0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8000fb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000fb8:	041b      	lsls	r3, r3, #16
 8000fba:	0c1b      	lsrs	r3, r3, #16
 8000fbc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000fc0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000fc4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    if (count != 0U)
 8000fc8:	f1b9 0f00 	cmp.w	r9, #0
 8000fcc:	d02a      	beq.n	8001024 <HAL_PCD_IRQHandler+0x37c>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000fce:	2128      	movs	r1, #40	@ 0x28
 8000fd0:	fb01 4107 	mla	r1, r1, r7, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000fd4:	464b      	mov	r3, r9
 8000fd6:	f8b1 215a 	ldrh.w	r2, [r1, #346]	@ 0x15a
 8000fda:	e76c      	b.n	8000eb6 <HAL_PCD_IRQHandler+0x20e>
 8000fdc:	ffff8f0f 	.word	0xffff8f0f
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8000fe0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8000fe4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8000fe8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000fec:	041b      	lsls	r3, r3, #16
 8000fee:	0c1b      	lsrs	r3, r3, #16
 8000ff0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000ff4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000ff8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8000ffc:	f891 3150 	ldrb.w	r3, [r1, #336]	@ 0x150
 8001000:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001004:	00db      	lsls	r3, r3, #3
 8001006:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800100a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 800100e:	b292      	uxth	r2, r2
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001010:	d054      	beq.n	80010bc <HAL_PCD_IRQHandler+0x414>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001012:	3202      	adds	r2, #2
 8001014:	4413      	add	r3, r2
 8001016:	f83e 9013 	ldrh.w	r9, [lr, r3, lsl #1]
 800101a:	f3c9 0909 	ubfx	r9, r9, #0, #10
              if (count != 0U)
 800101e:	f1b9 0f00 	cmp.w	r9, #0
 8001022:	d19b      	bne.n	8000f5c <HAL_PCD_IRQHandler+0x2b4>
        ep->xfer_count += count;
 8001024:	fb05 f107 	mul.w	r1, r5, r7
 8001028:	1863      	adds	r3, r4, r1
 800102a:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
 800102e:	444a      	add	r2, r9
 8001030:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
        ep->xfer_buff += count;
 8001034:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
 8001038:	444a      	add	r2, r9
 800103a:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800103e:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
 8001042:	b11a      	cbz	r2, 800104c <HAL_PCD_IRQHandler+0x3a4>
 8001044:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8001048:	4599      	cmp	r9, r3
 800104a:	d241      	bcs.n	80010d0 <HAL_PCD_IRQHandler+0x428>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800104c:	fb05 4307 	mla	r3, r5, r7, r4
 8001050:	4620      	mov	r0, r4
 8001052:	f893 1150 	ldrb.w	r1, [r3, #336]	@ 0x150
 8001056:	f002 fb97 	bl	8003788 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800105a:	f018 0f80 	tst.w	r8, #128	@ 0x80
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800105e:	6820      	ldr	r0, [r4, #0]
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001060:	f43f ae2f 	beq.w	8000cc2 <HAL_PCD_IRQHandler+0x1a>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001064:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
        if (ep->type == EP_TYPE_ISOC)
 8001068:	fb05 fc07 	mul.w	ip, r5, r7
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800106c:	b29b      	uxth	r3, r3
 800106e:	4033      	ands	r3, r6
 8001070:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001074:	f820 3027 	strh.w	r3, [r0, r7, lsl #2]
        if (ep->type == EP_TYPE_ISOC)
 8001078:	eb04 030c 	add.w	r3, r4, ip
 800107c:	7cda      	ldrb	r2, [r3, #19]
 800107e:	2a01      	cmp	r2, #1
 8001080:	d156      	bne.n	8001130 <HAL_PCD_IRQHandler+0x488>
          ep->xfer_len = 0U;
 8001082:	2100      	movs	r1, #0
 8001084:	fb07 5205 	mla	r2, r7, r5, r5
 8001088:	50a1      	str	r1, [r4, r2]
          if (ep->doublebuffer != 0U)
 800108a:	7f1a      	ldrb	r2, [r3, #28]
 800108c:	b392      	cbz	r2, 80010f4 <HAL_PCD_IRQHandler+0x44c>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800108e:	f018 0840 	ands.w	r8, r8, #64	@ 0x40
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001092:	7c5a      	ldrb	r2, [r3, #17]
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001094:	d036      	beq.n	8001104 <HAL_PCD_IRQHandler+0x45c>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001096:	bb12      	cbnz	r2, 80010de <HAL_PCD_IRQHandler+0x436>
 8001098:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 800109c:	7c1b      	ldrb	r3, [r3, #16]
 800109e:	b292      	uxth	r2, r2
 80010a0:	011b      	lsls	r3, r3, #4
 80010a2:	f200 4004 	addw	r0, r0, #1028	@ 0x404
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80010a6:	4410      	add	r0, r2
 80010a8:	5a1a      	ldrh	r2, [r3, r0]
 80010aa:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80010ae:	521a      	strh	r2, [r3, r0]
 80010b0:	5a1a      	ldrh	r2, [r3, r0]
 80010b2:	b292      	uxth	r2, r2
 80010b4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80010b8:	521a      	strh	r2, [r3, r0]
 80010ba:	e01b      	b.n	80010f4 <HAL_PCD_IRQHandler+0x44c>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80010bc:	3206      	adds	r2, #6
 80010be:	4413      	add	r3, r2
 80010c0:	f83e 9013 	ldrh.w	r9, [lr, r3, lsl #1]
 80010c4:	f3c9 0909 	ubfx	r9, r9, #0, #10
              if (count != 0U)
 80010c8:	f1b9 0f00 	cmp.w	r9, #0
 80010cc:	d0aa      	beq.n	8001024 <HAL_PCD_IRQHandler+0x37c>
 80010ce:	e781      	b.n	8000fd4 <HAL_PCD_IRQHandler+0x32c>
        ep = &hpcd->OUT_ep[epindex];
 80010d0:	f501 71a8 	add.w	r1, r1, #336	@ 0x150
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80010d4:	6820      	ldr	r0, [r4, #0]
 80010d6:	4421      	add	r1, r4
 80010d8:	f001 fb10 	bl	80026fc <USB_EPStartXfer>
 80010dc:	e7bd      	b.n	800105a <HAL_PCD_IRQHandler+0x3b2>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80010de:	2a01      	cmp	r2, #1
 80010e0:	d108      	bne.n	80010f4 <HAL_PCD_IRQHandler+0x44c>
 80010e2:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 80010e6:	7c1b      	ldrb	r3, [r3, #16]
 80010e8:	b292      	uxth	r2, r2
 80010ea:	f200 4004 	addw	r0, r0, #1028	@ 0x404
 80010ee:	011b      	lsls	r3, r3, #4
 80010f0:	4410      	add	r0, r2
 80010f2:	5219      	strh	r1, [r3, r0]
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80010f4:	2328      	movs	r3, #40	@ 0x28
 80010f6:	fb03 4307 	mla	r3, r3, r7, r4
 80010fa:	7c19      	ldrb	r1, [r3, #16]
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80010fc:	4620      	mov	r0, r4
 80010fe:	f002 fb4c 	bl	800379a <HAL_PCD_DataInStageCallback>
 8001102:	e5de      	b.n	8000cc2 <HAL_PCD_IRQHandler+0x1a>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001104:	b93a      	cbnz	r2, 8001116 <HAL_PCD_IRQHandler+0x46e>
 8001106:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 800110a:	7c1b      	ldrb	r3, [r3, #16]
 800110c:	b292      	uxth	r2, r2
 800110e:	011b      	lsls	r3, r3, #4
 8001110:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 8001114:	e7c7      	b.n	80010a6 <HAL_PCD_IRQHandler+0x3fe>
 8001116:	2a01      	cmp	r2, #1
 8001118:	d1ec      	bne.n	80010f4 <HAL_PCD_IRQHandler+0x44c>
 800111a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 800111e:	7c1b      	ldrb	r3, [r3, #16]
 8001120:	b292      	uxth	r2, r2
 8001122:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 8001126:	011b      	lsls	r3, r3, #4
 8001128:	4410      	add	r0, r2
 800112a:	f823 8000 	strh.w	r8, [r3, r0]
 800112e:	e7e1      	b.n	80010f4 <HAL_PCD_IRQHandler+0x44c>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001130:	7c19      	ldrb	r1, [r3, #16]
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001132:	f418 7e80 	ands.w	lr, r8, #256	@ 0x100
            if (ep->xfer_len > TxPctSize)
 8001136:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001138:	ea4f 0ac1 	mov.w	sl, r1, lsl #3
 800113c:	f500 6980 	add.w	r9, r0, #1024	@ 0x400
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001140:	d11b      	bne.n	800117a <HAL_PCD_IRQHandler+0x4d2>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001142:	f8b0 7050 	ldrh.w	r7, [r0, #80]	@ 0x50
 8001146:	b2bf      	uxth	r7, r7
 8001148:	4457      	add	r7, sl
 800114a:	3702      	adds	r7, #2
 800114c:	f839 7017 	ldrh.w	r7, [r9, r7, lsl #1]
            if (ep->xfer_len > TxPctSize)
 8001150:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8001154:	4297      	cmp	r7, r2
 8001156:	d302      	bcc.n	800115e <HAL_PCD_IRQHandler+0x4b6>
 8001158:	f8c3 e028 	str.w	lr, [r3, #40]	@ 0x28
 800115c:	e7ce      	b.n	80010fc <HAL_PCD_IRQHandler+0x454>
              ep->xfer_len -= TxPctSize;
 800115e:	1bd2      	subs	r2, r2, r7
 8001160:	629a      	str	r2, [r3, #40]	@ 0x28
              ep->xfer_buff += TxPctSize;
 8001162:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
        ep = &hpcd->IN_ep[epindex];
 8001164:	f10c 0110 	add.w	r1, ip, #16
              ep->xfer_buff += TxPctSize;
 8001168:	443a      	add	r2, r7
 800116a:	625a      	str	r2, [r3, #36]	@ 0x24
              ep->xfer_count += TxPctSize;
 800116c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800116e:	4421      	add	r1, r4
              ep->xfer_count += TxPctSize;
 8001170:	443a      	add	r2, r7
 8001172:	62da      	str	r2, [r3, #44]	@ 0x2c
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001174:	f001 fac2 	bl	80026fc <USB_EPStartXfer>
 8001178:	e5a3      	b.n	8000cc2 <HAL_PCD_IRQHandler+0x1a>

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800117a:	f8b0 c050 	ldrh.w	ip, [r0, #80]	@ 0x50
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800117e:	f018 0e40 	ands.w	lr, r8, #64	@ 0x40
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001182:	fa1f fc8c 	uxth.w	ip, ip
 8001186:	44d4      	add	ip, sl
 8001188:	f408 4880 	and.w	r8, r8, #16384	@ 0x4000
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800118c:	f000 80f4 	beq.w	8001378 <HAL_PCD_IRQHandler+0x6d0>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001190:	f10c 0c02 	add.w	ip, ip, #2
 8001194:	f839 c01c 	ldrh.w	ip, [r9, ip, lsl #1]
 8001198:	fa1f f888 	uxth.w	r8, r8

    if (ep->xfer_len > TxPctSize)
 800119c:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 80011a0:	4594      	cmp	ip, r2
    {
      ep->xfer_len -= TxPctSize;
    }
    else
    {
      ep->xfer_len = 0U;
 80011a2:	bf2c      	ite	cs
 80011a4:	2200      	movcs	r2, #0
      ep->xfer_len -= TxPctSize;
 80011a6:	eba2 020c 	subcc.w	r2, r2, ip
 80011aa:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80011ac:	2a00      	cmp	r2, #0
 80011ae:	d15b      	bne.n	8001268 <HAL_PCD_IRQHandler+0x5c0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80011b0:	2328      	movs	r3, #40	@ 0x28
 80011b2:	fb03 4307 	mla	r3, r3, r7, r4
 80011b6:	7c5b      	ldrb	r3, [r3, #17]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d141      	bne.n	8001240 <HAL_PCD_IRQHandler+0x598>
 80011bc:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 80011c0:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 80011c4:	b292      	uxth	r2, r2
 80011c6:	010b      	lsls	r3, r1, #4
 80011c8:	4494      	add	ip, r2
 80011ca:	f83c 2003 	ldrh.w	r2, [ip, r3]
 80011ce:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80011d2:	f82c 2003 	strh.w	r2, [ip, r3]
 80011d6:	f83c 2003 	ldrh.w	r2, [ip, r3]
 80011da:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80011de:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80011e2:	b292      	uxth	r2, r2
 80011e4:	f82c 2003 	strh.w	r2, [ip, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80011e8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 80011ec:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 80011f0:	b292      	uxth	r2, r2
 80011f2:	4410      	add	r0, r2
 80011f4:	5ac2      	ldrh	r2, [r0, r3]
 80011f6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80011fa:	52c2      	strh	r2, [r0, r3]
 80011fc:	5ac2      	ldrh	r2, [r0, r3]
 80011fe:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8001202:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8001206:	b292      	uxth	r2, r2
 8001208:	52c2      	strh	r2, [r0, r3]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800120a:	4620      	mov	r0, r4
 800120c:	f002 fac5 	bl	800379a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001210:	f1b8 0f00 	cmp.w	r8, #0
 8001214:	f000 80f4 	beq.w	8001400 <HAL_PCD_IRQHandler+0x758>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001218:	2328      	movs	r3, #40	@ 0x28
 800121a:	fb03 4307 	mla	r3, r3, r7, r4
 800121e:	6822      	ldr	r2, [r4, #0]
 8001220:	7c19      	ldrb	r1, [r3, #16]
 8001222:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8001226:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800122a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800122e:	041b      	lsls	r3, r3, #16
 8001230:	0c1b      	lsrs	r3, r3, #16
 8001232:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001236:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800123a:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 800123e:	e0df      	b.n	8001400 <HAL_PCD_IRQHandler+0x758>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001240:	2b01      	cmp	r3, #1
 8001242:	d1e2      	bne.n	800120a <HAL_PCD_IRQHandler+0x562>
 8001244:	f8b0 e050 	ldrh.w	lr, [r0, #80]	@ 0x50
 8001248:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 800124c:	fa1f fe8e 	uxth.w	lr, lr
 8001250:	44f4      	add	ip, lr
 8001252:	010b      	lsls	r3, r1, #4
 8001254:	f82c 2003 	strh.w	r2, [ip, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001258:	f8b0 c050 	ldrh.w	ip, [r0, #80]	@ 0x50
 800125c:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 8001260:	fa1f fc8c 	uxth.w	ip, ip
 8001264:	4460      	add	r0, ip
 8001266:	e7cf      	b.n	8001208 <HAL_PCD_IRQHandler+0x560>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001268:	f1b8 0f00 	cmp.w	r8, #0
 800126c:	d00d      	beq.n	800128a <HAL_PCD_IRQHandler+0x5e2>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800126e:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 8001272:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8001276:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800127a:	0412      	lsls	r2, r2, #16
 800127c:	0c12      	lsrs	r2, r2, #16
 800127e:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8001282:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001286:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 800128a:	f04f 0828 	mov.w	r8, #40	@ 0x28
 800128e:	fb08 4807 	mla	r8, r8, r7, r4
 8001292:	f898 2034 	ldrb.w	r2, [r8, #52]	@ 0x34
 8001296:	2a01      	cmp	r2, #1
 8001298:	f040 80b2 	bne.w	8001400 <HAL_PCD_IRQHandler+0x758>
        ep->xfer_buff += TxPctSize;
 800129c:	f8d8 2024 	ldr.w	r2, [r8, #36]	@ 0x24
 80012a0:	eb02 0e0c 	add.w	lr, r2, ip
 80012a4:	f8c8 e024 	str.w	lr, [r8, #36]	@ 0x24
        ep->xfer_count += TxPctSize;
 80012a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80012aa:	4462      	add	r2, ip
 80012ac:	62da      	str	r2, [r3, #44]	@ 0x2c
        if (ep->xfer_len_db >= ep->maxpacket)
 80012ae:	f8d8 3030 	ldr.w	r3, [r8, #48]	@ 0x30
 80012b2:	f8d8 2020 	ldr.w	r2, [r8, #32]
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d335      	bcc.n	8001326 <HAL_PCD_IRQHandler+0x67e>
          ep->xfer_len_db -= len;
 80012ba:	1a9b      	subs	r3, r3, r2
 80012bc:	f8c8 3030 	str.w	r3, [r8, #48]	@ 0x30
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80012c0:	2328      	movs	r3, #40	@ 0x28
 80012c2:	fb03 4307 	mla	r3, r3, r7, r4
 80012c6:	f893 c011 	ldrb.w	ip, [r3, #17]
 80012ca:	b293      	uxth	r3, r2
 80012cc:	f1bc 0f00 	cmp.w	ip, #0
 80012d0:	d145      	bne.n	800135e <HAL_PCD_IRQHandler+0x6b6>
 80012d2:	f8b0 8050 	ldrh.w	r8, [r0, #80]	@ 0x50
 80012d6:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 80012da:	fa1f f888 	uxth.w	r8, r8
 80012de:	44c4      	add	ip, r8
 80012e0:	0109      	lsls	r1, r1, #4
 80012e2:	f83c 8001 	ldrh.w	r8, [ip, r1]
 80012e6:	2a3e      	cmp	r2, #62	@ 0x3e
 80012e8:	f3c8 0809 	ubfx	r8, r8, #0, #10
 80012ec:	f82c 8001 	strh.w	r8, [ip, r1]
 80012f0:	d925      	bls.n	800133e <HAL_PCD_IRQHandler+0x696>
 80012f2:	ea4f 1852 	mov.w	r8, r2, lsr #5
 80012f6:	06d2      	lsls	r2, r2, #27
 80012f8:	f83c 2001 	ldrh.w	r2, [ip, r1]
 80012fc:	bf08      	it	eq
 80012fe:	f108 38ff 	addeq.w	r8, r8, #4294967295
 8001302:	b292      	uxth	r2, r2
 8001304:	ea42 2288 	orr.w	r2, r2, r8, lsl #10
 8001308:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800130c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8001310:	b292      	uxth	r2, r2
 8001312:	f82c 2001 	strh.w	r2, [ip, r1]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8001316:	2228      	movs	r2, #40	@ 0x28
 8001318:	fb02 4207 	mla	r2, r2, r7, r4
 800131c:	8b12      	ldrh	r2, [r2, #24]

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800131e:	4671      	mov	r1, lr
 8001320:	f001 f9dc 	bl	80026dc <USB_WritePMA>
 8001324:	e06c      	b.n	8001400 <HAL_PCD_IRQHandler+0x758>
        else if (ep->xfer_len_db == 0U)
 8001326:	b91b      	cbnz	r3, 8001330 <HAL_PCD_IRQHandler+0x688>
    if (ep->xfer_len > TxPctSize)
 8001328:	4662      	mov	r2, ip
          ep->xfer_fill_db = 0U;
 800132a:	f888 3034 	strb.w	r3, [r8, #52]	@ 0x34
 800132e:	e7c7      	b.n	80012c0 <HAL_PCD_IRQHandler+0x618>
          ep->xfer_fill_db = 0U;
 8001330:	2200      	movs	r2, #0
 8001332:	f888 2034 	strb.w	r2, [r8, #52]	@ 0x34
          ep->xfer_len_db = 0U;
 8001336:	f8c8 2030 	str.w	r2, [r8, #48]	@ 0x30
 800133a:	461a      	mov	r2, r3
 800133c:	e7c0      	b.n	80012c0 <HAL_PCD_IRQHandler+0x618>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800133e:	b912      	cbnz	r2, 8001346 <HAL_PCD_IRQHandler+0x69e>
 8001340:	f83c 2001 	ldrh.w	r2, [ip, r1]
 8001344:	e7e0      	b.n	8001308 <HAL_PCD_IRQHandler+0x660>
 8001346:	ea4f 0852 	mov.w	r8, r2, lsr #1
 800134a:	07d2      	lsls	r2, r2, #31
 800134c:	f83c 2001 	ldrh.w	r2, [ip, r1]
 8001350:	bf48      	it	mi
 8001352:	f108 0801 	addmi.w	r8, r8, #1
 8001356:	b292      	uxth	r2, r2
 8001358:	ea42 2288 	orr.w	r2, r2, r8, lsl #10
 800135c:	e7d8      	b.n	8001310 <HAL_PCD_IRQHandler+0x668>
 800135e:	f1bc 0f01 	cmp.w	ip, #1
 8001362:	d1d8      	bne.n	8001316 <HAL_PCD_IRQHandler+0x66e>
 8001364:	f8b0 c050 	ldrh.w	ip, [r0, #80]	@ 0x50
 8001368:	f200 4204 	addw	r2, r0, #1028	@ 0x404
 800136c:	fa1f fc8c 	uxth.w	ip, ip
 8001370:	4462      	add	r2, ip
 8001372:	0109      	lsls	r1, r1, #4
 8001374:	5253      	strh	r3, [r2, r1]
 8001376:	e7ce      	b.n	8001316 <HAL_PCD_IRQHandler+0x66e>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001378:	f10c 0c06 	add.w	ip, ip, #6
 800137c:	f839 c01c 	ldrh.w	ip, [r9, ip, lsl #1]
 8001380:	fa1f f888 	uxth.w	r8, r8
    if (ep->xfer_len >= TxPctSize)
 8001384:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8001388:	4594      	cmp	ip, r2
      ep->xfer_len = 0U;
 800138a:	bf8c      	ite	hi
 800138c:	4672      	movhi	r2, lr
      ep->xfer_len -= TxPctSize;
 800138e:	eba2 020c 	subls.w	r2, r2, ip
 8001392:	629a      	str	r2, [r3, #40]	@ 0x28
    if (ep->xfer_len == 0U)
 8001394:	2a00      	cmp	r2, #0
 8001396:	d15d      	bne.n	8001454 <HAL_PCD_IRQHandler+0x7ac>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001398:	2328      	movs	r3, #40	@ 0x28
 800139a:	fb03 4307 	mla	r3, r3, r7, r4
 800139e:	7c5b      	ldrb	r3, [r3, #17]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d143      	bne.n	800142c <HAL_PCD_IRQHandler+0x784>
 80013a4:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 80013a8:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 80013ac:	b292      	uxth	r2, r2
 80013ae:	010b      	lsls	r3, r1, #4
 80013b0:	4494      	add	ip, r2
 80013b2:	f83c 2003 	ldrh.w	r2, [ip, r3]
 80013b6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80013ba:	f82c 2003 	strh.w	r2, [ip, r3]
 80013be:	f83c 2003 	ldrh.w	r2, [ip, r3]
 80013c2:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80013c6:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80013ca:	b292      	uxth	r2, r2
 80013cc:	f82c 2003 	strh.w	r2, [ip, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80013d0:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 80013d4:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 80013d8:	b292      	uxth	r2, r2
 80013da:	4410      	add	r0, r2
 80013dc:	5ac2      	ldrh	r2, [r0, r3]
 80013de:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80013e2:	52c2      	strh	r2, [r0, r3]
 80013e4:	5ac2      	ldrh	r2, [r0, r3]
 80013e6:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80013ea:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80013ee:	b292      	uxth	r2, r2
 80013f0:	52c2      	strh	r2, [r0, r3]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80013f2:	4620      	mov	r0, r4
 80013f4:	f002 f9d1 	bl	800379a <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80013f8:	f1b8 0f00 	cmp.w	r8, #0
 80013fc:	f43f af0c 	beq.w	8001218 <HAL_PCD_IRQHandler+0x570>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8001400:	2328      	movs	r3, #40	@ 0x28
 8001402:	fb03 4307 	mla	r3, r3, r7, r4
 8001406:	6822      	ldr	r2, [r4, #0]
 8001408:	7c19      	ldrb	r1, [r3, #16]
 800140a:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800140e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001412:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001416:	041b      	lsls	r3, r3, #16
 8001418:	0c1b      	lsrs	r3, r3, #16
 800141a:	f083 0330 	eor.w	r3, r3, #48	@ 0x30
 800141e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001422:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001426:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 800142a:	e44a      	b.n	8000cc2 <HAL_PCD_IRQHandler+0x1a>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800142c:	2b01      	cmp	r3, #1
 800142e:	d1e0      	bne.n	80013f2 <HAL_PCD_IRQHandler+0x74a>
 8001430:	f8b0 e050 	ldrh.w	lr, [r0, #80]	@ 0x50
 8001434:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 8001438:	fa1f fe8e 	uxth.w	lr, lr
 800143c:	44f4      	add	ip, lr
 800143e:	010b      	lsls	r3, r1, #4
 8001440:	f82c 2003 	strh.w	r2, [ip, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001444:	f8b0 c050 	ldrh.w	ip, [r0, #80]	@ 0x50
 8001448:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 800144c:	fa1f fc8c 	uxth.w	ip, ip
 8001450:	4460      	add	r0, ip
 8001452:	e7cd      	b.n	80013f0 <HAL_PCD_IRQHandler+0x748>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001454:	f1b8 0f00 	cmp.w	r8, #0
 8001458:	d10d      	bne.n	8001476 <HAL_PCD_IRQHandler+0x7ce>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800145a:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 800145e:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8001462:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001466:	0412      	lsls	r2, r2, #16
 8001468:	0c12      	lsrs	r2, r2, #16
 800146a:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 800146e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001472:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8001476:	f04f 0828 	mov.w	r8, #40	@ 0x28
 800147a:	fb08 4807 	mla	r8, r8, r7, r4
 800147e:	f898 2034 	ldrb.w	r2, [r8, #52]	@ 0x34
 8001482:	2a01      	cmp	r2, #1
 8001484:	d1bc      	bne.n	8001400 <HAL_PCD_IRQHandler+0x758>
        ep->xfer_buff += TxPctSize;
 8001486:	f8d8 2024 	ldr.w	r2, [r8, #36]	@ 0x24
 800148a:	eb02 0e0c 	add.w	lr, r2, ip
 800148e:	f8c8 e024 	str.w	lr, [r8, #36]	@ 0x24
        ep->xfer_count += TxPctSize;
 8001492:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001494:	4462      	add	r2, ip
 8001496:	62da      	str	r2, [r3, #44]	@ 0x2c
        if (ep->xfer_len_db >= ep->maxpacket)
 8001498:	f8d8 3030 	ldr.w	r3, [r8, #48]	@ 0x30
 800149c:	f8d8 2020 	ldr.w	r2, [r8, #32]
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d332      	bcc.n	800150a <HAL_PCD_IRQHandler+0x862>
          ep->xfer_len_db -= len;
 80014a4:	1a9b      	subs	r3, r3, r2
 80014a6:	f8c8 3030 	str.w	r3, [r8, #48]	@ 0x30
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80014aa:	2328      	movs	r3, #40	@ 0x28
 80014ac:	fb03 4307 	mla	r3, r3, r7, r4
 80014b0:	f893 c011 	ldrb.w	ip, [r3, #17]
 80014b4:	b293      	uxth	r3, r2
 80014b6:	f1bc 0f00 	cmp.w	ip, #0
 80014ba:	d142      	bne.n	8001542 <HAL_PCD_IRQHandler+0x89a>
 80014bc:	f8b0 8050 	ldrh.w	r8, [r0, #80]	@ 0x50
 80014c0:	f200 4c0c 	addw	ip, r0, #1036	@ 0x40c
 80014c4:	fa1f f888 	uxth.w	r8, r8
 80014c8:	44c4      	add	ip, r8
 80014ca:	0109      	lsls	r1, r1, #4
 80014cc:	f83c 8001 	ldrh.w	r8, [ip, r1]
 80014d0:	2a3e      	cmp	r2, #62	@ 0x3e
 80014d2:	f3c8 0809 	ubfx	r8, r8, #0, #10
 80014d6:	f82c 8001 	strh.w	r8, [ip, r1]
 80014da:	d922      	bls.n	8001522 <HAL_PCD_IRQHandler+0x87a>
 80014dc:	ea4f 1852 	mov.w	r8, r2, lsr #5
 80014e0:	06d2      	lsls	r2, r2, #27
 80014e2:	f83c 2001 	ldrh.w	r2, [ip, r1]
 80014e6:	bf08      	it	eq
 80014e8:	f108 38ff 	addeq.w	r8, r8, #4294967295
 80014ec:	b292      	uxth	r2, r2
 80014ee:	ea42 2288 	orr.w	r2, r2, r8, lsl #10
 80014f2:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80014f6:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80014fa:	b292      	uxth	r2, r2
 80014fc:	f82c 2001 	strh.w	r2, [ip, r1]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8001500:	2228      	movs	r2, #40	@ 0x28
 8001502:	fb02 4207 	mla	r2, r2, r7, r4
 8001506:	8b52      	ldrh	r2, [r2, #26]
 8001508:	e709      	b.n	800131e <HAL_PCD_IRQHandler+0x676>
        else if (ep->xfer_len_db == 0U)
 800150a:	b91b      	cbnz	r3, 8001514 <HAL_PCD_IRQHandler+0x86c>
    if (ep->xfer_len >= TxPctSize)
 800150c:	4662      	mov	r2, ip
          ep->xfer_fill_db = 0U;
 800150e:	f888 3034 	strb.w	r3, [r8, #52]	@ 0x34
 8001512:	e7ca      	b.n	80014aa <HAL_PCD_IRQHandler+0x802>
          ep->xfer_len_db = 0U;
 8001514:	2200      	movs	r2, #0
 8001516:	f8c8 2030 	str.w	r2, [r8, #48]	@ 0x30
          ep->xfer_fill_db = 0;
 800151a:	f888 2034 	strb.w	r2, [r8, #52]	@ 0x34
 800151e:	461a      	mov	r2, r3
 8001520:	e7c3      	b.n	80014aa <HAL_PCD_IRQHandler+0x802>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001522:	b912      	cbnz	r2, 800152a <HAL_PCD_IRQHandler+0x882>
 8001524:	f83c 2001 	ldrh.w	r2, [ip, r1]
 8001528:	e7e3      	b.n	80014f2 <HAL_PCD_IRQHandler+0x84a>
 800152a:	ea4f 0852 	mov.w	r8, r2, lsr #1
 800152e:	07d2      	lsls	r2, r2, #31
 8001530:	f83c 2001 	ldrh.w	r2, [ip, r1]
 8001534:	bf48      	it	mi
 8001536:	f108 0801 	addmi.w	r8, r8, #1
 800153a:	b292      	uxth	r2, r2
 800153c:	ea42 2288 	orr.w	r2, r2, r8, lsl #10
 8001540:	e7db      	b.n	80014fa <HAL_PCD_IRQHandler+0x852>
 8001542:	f1bc 0f01 	cmp.w	ip, #1
 8001546:	d1db      	bne.n	8001500 <HAL_PCD_IRQHandler+0x858>
 8001548:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 800154c:	f200 4c0c 	addw	ip, r0, #1036	@ 0x40c
 8001550:	b292      	uxth	r2, r2
 8001552:	4494      	add	ip, r2
 8001554:	010a      	lsls	r2, r1, #4
 8001556:	f82c 3002 	strh.w	r3, [ip, r2]
 800155a:	e7d1      	b.n	8001500 <HAL_PCD_IRQHandler+0x858>
  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800155c:	0546      	lsls	r6, r0, #21
 800155e:	d512      	bpl.n	8001586 <HAL_PCD_IRQHandler+0x8de>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001560:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 8001562:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001564:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8001568:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800156c:	041b      	lsls	r3, r3, #16
 800156e:	0c1b      	lsrs	r3, r3, #16
 8001570:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    HAL_PCD_ResetCallback(hpcd);
 8001574:	f002 f91d 	bl	80037b2 <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001578:	4629      	mov	r1, r5
 800157a:	4620      	mov	r0, r4
}
 800157c:	b005      	add	sp, #20
 800157e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001582:	f7ff bb7d 	b.w	8000c80 <HAL_PCD_SetAddress>
  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001586:	0441      	lsls	r1, r0, #17
 8001588:	d50a      	bpl.n	80015a0 <HAL_PCD_IRQHandler+0x8f8>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800158a:	6822      	ldr	r2, [r4, #0]
 800158c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8001590:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001594:	041b      	lsls	r3, r3, #16
 8001596:	0c1b      	lsrs	r3, r3, #16
 8001598:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    return;
 800159c:	f7ff bb96 	b.w	8000ccc <HAL_PCD_IRQHandler+0x24>
  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80015a0:	0482      	lsls	r2, r0, #18
 80015a2:	d505      	bpl.n	80015b0 <HAL_PCD_IRQHandler+0x908>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80015a4:	6822      	ldr	r2, [r4, #0]
 80015a6:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 80015aa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80015ae:	e7f1      	b.n	8001594 <HAL_PCD_IRQHandler+0x8ec>
  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80015b0:	04c3      	lsls	r3, r0, #19
 80015b2:	d519      	bpl.n	80015e8 <HAL_PCD_IRQHandler+0x940>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80015b4:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 80015b6:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80015b8:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 80015bc:	f023 0304 	bic.w	r3, r3, #4
 80015c0:	041b      	lsls	r3, r3, #16
 80015c2:	0c1b      	lsrs	r3, r3, #16
 80015c4:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80015c8:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 80015cc:	f023 0308 	bic.w	r3, r3, #8
 80015d0:	041b      	lsls	r3, r3, #16
 80015d2:	0c1b      	lsrs	r3, r3, #16
 80015d4:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    HAL_PCD_ResumeCallback(hpcd);
 80015d8:	f002 f90e 	bl	80037f8 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80015dc:	6822      	ldr	r2, [r4, #0]
 80015de:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 80015e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80015e6:	e7d5      	b.n	8001594 <HAL_PCD_IRQHandler+0x8ec>
  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80015e8:	0507      	lsls	r7, r0, #20
 80015ea:	d548      	bpl.n	800167e <HAL_PCD_IRQHandler+0x9d6>
 80015ec:	4668      	mov	r0, sp
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80015ee:	6823      	ldr	r3, [r4, #0]
 80015f0:	4606      	mov	r6, r0
 80015f2:	4619      	mov	r1, r3
 80015f4:	461a      	mov	r2, r3
 80015f6:	f103 0520 	add.w	r5, r3, #32
 80015fa:	f832 7b04 	ldrh.w	r7, [r2], #4
    for (i = 0U; i < 8U; i++)
 80015fe:	4295      	cmp	r5, r2
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001600:	f826 7b02 	strh.w	r7, [r6], #2
    for (i = 0U; i < 8U; i++)
 8001604:	d1f9      	bne.n	80015fa <HAL_PCD_IRQHandler+0x952>
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001606:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 800160a:	b292      	uxth	r2, r2
 800160c:	f042 0201 	orr.w	r2, r2, #1
 8001610:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001614:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 8001618:	f022 0201 	bic.w	r2, r2, #1
 800161c:	0412      	lsls	r2, r2, #16
 800161e:	0c12      	lsrs	r2, r2, #16
 8001620:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001624:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 8001628:	0556      	lsls	r6, r2, #21
 800162a:	d5fb      	bpl.n	8001624 <HAL_PCD_IRQHandler+0x97c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800162c:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 8001630:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001634:	0412      	lsls	r2, r2, #16
 8001636:	0c12      	lsrs	r2, r2, #16
 8001638:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800163c:	f830 2b02 	ldrh.w	r2, [r0], #2
 8001640:	f821 2b04 	strh.w	r2, [r1], #4
    for (i = 0U; i < 8U; i++)
 8001644:	428d      	cmp	r5, r1
 8001646:	d1f9      	bne.n	800163c <HAL_PCD_IRQHandler+0x994>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001648:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
    HAL_PCD_SuspendCallback(hpcd);
 800164c:	4620      	mov	r0, r4
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800164e:	b292      	uxth	r2, r2
 8001650:	f042 0208 	orr.w	r2, r2, #8
 8001654:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001658:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 800165c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001660:	0412      	lsls	r2, r2, #16
 8001662:	0c12      	lsrs	r2, r2, #16
 8001664:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001668:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 800166c:	b292      	uxth	r2, r2
 800166e:	f042 0204 	orr.w	r2, r2, #4
 8001672:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8001676:	f002 f8af 	bl	80037d8 <HAL_PCD_SuspendCallback>
    return;
 800167a:	f7ff bb27 	b.w	8000ccc <HAL_PCD_IRQHandler+0x24>
  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800167e:	0582      	lsls	r2, r0, #22
 8001680:	d50d      	bpl.n	800169e <HAL_PCD_IRQHandler+0x9f6>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001682:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 8001684:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001686:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 800168a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800168e:	041b      	lsls	r3, r3, #16
 8001690:	0c1b      	lsrs	r3, r3, #16
 8001692:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    HAL_PCD_SOFCallback(hpcd);
 8001696:	f002 f888 	bl	80037aa <HAL_PCD_SOFCallback>
    return;
 800169a:	f7ff bb17 	b.w	8000ccc <HAL_PCD_IRQHandler+0x24>
  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800169e:	05c3      	lsls	r3, r0, #23
 80016a0:	f57f ab14 	bpl.w	8000ccc <HAL_PCD_IRQHandler+0x24>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80016a4:	6822      	ldr	r2, [r4, #0]
 80016a6:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 80016aa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80016ae:	e771      	b.n	8001594 <HAL_PCD_IRQHandler+0x8ec>

080016b0 <HAL_PCD_EP_Open>:
{
 80016b0:	b570      	push	{r4, r5, r6, lr}
 80016b2:	2428      	movs	r4, #40	@ 0x28
 80016b4:	4605      	mov	r5, r0
 80016b6:	f001 0007 	and.w	r0, r1, #7
 80016ba:	4344      	muls	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 80016bc:	f011 0f80 	tst.w	r1, #128	@ 0x80
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016c0:	bf14      	ite	ne
 80016c2:	f104 0110 	addne.w	r1, r4, #16
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80016c6:	f504 71a8 	addeq.w	r1, r4, #336	@ 0x150
 80016ca:	eb05 0604 	add.w	r6, r5, r4
    ep->is_in = 1U;
 80016ce:	bf15      	itete	ne
 80016d0:	2401      	movne	r4, #1
    ep->is_in = 0U;
 80016d2:	2400      	moveq	r4, #0
    ep->is_in = 1U;
 80016d4:	7474      	strbne	r4, [r6, #17]
    ep->is_in = 0U;
 80016d6:	f886 4151 	strbeq.w	r4, [r6, #337]	@ 0x151
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016da:	bf14      	ite	ne
 80016dc:	1949      	addne	r1, r1, r5
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80016de:	1949      	addeq	r1, r1, r5
  if (ep_type == EP_TYPE_BULK)
 80016e0:	2b02      	cmp	r3, #2
  ep->type = ep_type;
 80016e2:	70cb      	strb	r3, [r1, #3]
    ep->data_pid_start = 0U;
 80016e4:	bf08      	it	eq
 80016e6:	2300      	moveq	r3, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 80016e8:	7008      	strb	r0, [r1, #0]
    ep->data_pid_start = 0U;
 80016ea:	bf08      	it	eq
 80016ec:	710b      	strbeq	r3, [r1, #4]
  ep->maxpacket = ep_mps;
 80016ee:	610a      	str	r2, [r1, #16]
  __HAL_LOCK(hpcd);
 80016f0:	f895 3290 	ldrb.w	r3, [r5, #656]	@ 0x290
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d009      	beq.n	800170c <HAL_PCD_EP_Open+0x5c>
 80016f8:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80016fa:	6828      	ldr	r0, [r5, #0]
  __HAL_LOCK(hpcd);
 80016fc:	f885 3290 	strb.w	r3, [r5, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001700:	f000 fd40 	bl	8002184 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001704:	2000      	movs	r0, #0
 8001706:	f885 0290 	strb.w	r0, [r5, #656]	@ 0x290
}
 800170a:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 800170c:	2002      	movs	r0, #2
 800170e:	e7fc      	b.n	800170a <HAL_PCD_EP_Open+0x5a>

08001710 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 8001710:	2328      	movs	r3, #40	@ 0x28
 8001712:	f001 0207 	and.w	r2, r1, #7
 8001716:	4353      	muls	r3, r2
 8001718:	f011 0f80 	tst.w	r1, #128	@ 0x80
{
 800171c:	b510      	push	{r4, lr}
 800171e:	4604      	mov	r4, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001720:	bf18      	it	ne
 8001722:	f103 0110 	addne.w	r1, r3, #16
 8001726:	4418      	add	r0, r3
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001728:	bf0b      	itete	eq
 800172a:	f503 71a8 	addeq.w	r1, r3, #336	@ 0x150
    ep->is_in = 1U;
 800172e:	2301      	movne	r3, #1
    ep->is_in = 0U;
 8001730:	2300      	moveq	r3, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001732:	1909      	addne	r1, r1, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001734:	bf0a      	itet	eq
 8001736:	1909      	addeq	r1, r1, r4
    ep->is_in = 1U;
 8001738:	7443      	strbne	r3, [r0, #17]
    ep->is_in = 0U;
 800173a:	f880 3151 	strbeq.w	r3, [r0, #337]	@ 0x151
  ep->num = ep_addr & EP_ADDR_MSK;
 800173e:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8001740:	f894 3290 	ldrb.w	r3, [r4, #656]	@ 0x290
 8001744:	2b01      	cmp	r3, #1
 8001746:	d009      	beq.n	800175c <HAL_PCD_EP_Close+0x4c>
 8001748:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800174a:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800174c:	f884 3290 	strb.w	r3, [r4, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001750:	f000 fe78 	bl	8002444 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001754:	2000      	movs	r0, #0
 8001756:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290
}
 800175a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800175c:	2002      	movs	r0, #2
 800175e:	e7fc      	b.n	800175a <HAL_PCD_EP_Close+0x4a>

08001760 <HAL_PCD_EP_Receive>:
{
 8001760:	b570      	push	{r4, r5, r6, lr}
  ep->xfer_buff = pBuf;
 8001762:	2428      	movs	r4, #40	@ 0x28
  ep->xfer_count = 0U;
 8001764:	2600      	movs	r6, #0
 8001766:	f001 0107 	and.w	r1, r1, #7
  ep->xfer_buff = pBuf;
 800176a:	434c      	muls	r4, r1
 800176c:	1905      	adds	r5, r0, r4
  ep->num = ep_addr & EP_ADDR_MSK;
 800176e:	f885 1150 	strb.w	r1, [r5, #336]	@ 0x150
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001772:	f504 71a8 	add.w	r1, r4, #336	@ 0x150
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001776:	4401      	add	r1, r0
  ep->xfer_len = len;
 8001778:	e9c5 2359 	strd	r2, r3, [r5, #356]	@ 0x164
  ep->xfer_count = 0U;
 800177c:	f8c5 616c 	str.w	r6, [r5, #364]	@ 0x16c
  ep->is_in = 0U;
 8001780:	f885 6151 	strb.w	r6, [r5, #337]	@ 0x151
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001784:	6800      	ldr	r0, [r0, #0]
 8001786:	f000 ffb9 	bl	80026fc <USB_EPStartXfer>
}
 800178a:	4630      	mov	r0, r6
 800178c:	bd70      	pop	{r4, r5, r6, pc}

0800178e <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800178e:	2328      	movs	r3, #40	@ 0x28
 8001790:	f001 0107 	and.w	r1, r1, #7
 8001794:	fb03 0001 	mla	r0, r3, r1, r0
}
 8001798:	f8d0 016c 	ldr.w	r0, [r0, #364]	@ 0x16c
 800179c:	4770      	bx	lr

0800179e <HAL_PCD_EP_Transmit>:
{
 800179e:	b570      	push	{r4, r5, r6, lr}
 80017a0:	2528      	movs	r5, #40	@ 0x28
 80017a2:	f001 0107 	and.w	r1, r1, #7
 80017a6:	434d      	muls	r5, r1
  ep->xfer_buff = pBuf;
 80017a8:	1944      	adds	r4, r0, r5
  ep->xfer_count = 0U;
 80017aa:	2600      	movs	r6, #0
  ep->xfer_len = len;
 80017ac:	e9c4 2309 	strd	r2, r3, [r4, #36]	@ 0x24
  ep->xfer_fill_db = 1U;
 80017b0:	2201      	movs	r2, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 80017b2:	7421      	strb	r1, [r4, #16]
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017b4:	f105 0110 	add.w	r1, r5, #16
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80017b8:	4401      	add	r1, r0
  ep->xfer_fill_db = 1U;
 80017ba:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
  ep->xfer_len_db = len;
 80017be:	6323      	str	r3, [r4, #48]	@ 0x30
  ep->xfer_count = 0U;
 80017c0:	62e6      	str	r6, [r4, #44]	@ 0x2c
  ep->is_in = 1U;
 80017c2:	7462      	strb	r2, [r4, #17]
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80017c4:	6800      	ldr	r0, [r0, #0]
 80017c6:	f000 ff99 	bl	80026fc <USB_EPStartXfer>
}
 80017ca:	4630      	mov	r0, r6
 80017cc:	bd70      	pop	{r4, r5, r6, pc}

080017ce <HAL_PCD_EP_SetStall>:
{
 80017ce:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80017d0:	7903      	ldrb	r3, [r0, #4]
 80017d2:	f001 0507 	and.w	r5, r1, #7
 80017d6:	42ab      	cmp	r3, r5
{
 80017d8:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80017da:	d32a      	bcc.n	8001832 <HAL_PCD_EP_SetStall+0x64>
  if ((0x80U & ep_addr) == 0x80U)
 80017dc:	f011 0f80 	tst.w	r1, #128	@ 0x80
 80017e0:	f04f 0328 	mov.w	r3, #40	@ 0x28
 80017e4:	d01c      	beq.n	8001820 <HAL_PCD_EP_SetStall+0x52>
    ep->is_in = 1U;
 80017e6:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017e8:	436b      	muls	r3, r5
 80017ea:	f103 0110 	add.w	r1, r3, #16
    ep->is_in = 1U;
 80017ee:	4403      	add	r3, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017f0:	4401      	add	r1, r0
    ep->is_in = 1U;
 80017f2:	745a      	strb	r2, [r3, #17]
  ep->is_stall = 1U;
 80017f4:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 80017f6:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 80017f8:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 80017fa:	f894 2290 	ldrb.w	r2, [r4, #656]	@ 0x290
 80017fe:	429a      	cmp	r2, r3
 8001800:	d019      	beq.n	8001836 <HAL_PCD_EP_SetStall+0x68>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001802:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8001804:	f884 3290 	strb.w	r3, [r4, #656]	@ 0x290
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001808:	f000 feef 	bl	80025ea <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800180c:	b925      	cbnz	r5, 8001818 <HAL_PCD_EP_SetStall+0x4a>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800180e:	6820      	ldr	r0, [r4, #0]
 8001810:	f504 7126 	add.w	r1, r4, #664	@ 0x298
 8001814:	f000 ff60 	bl	80026d8 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 8001818:	2000      	movs	r0, #0
 800181a:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290
}
 800181e:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 0U;
 8001820:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8001822:	434b      	muls	r3, r1
 8001824:	f503 71a8 	add.w	r1, r3, #336	@ 0x150
    ep->is_in = 0U;
 8001828:	4403      	add	r3, r0
    ep = &hpcd->OUT_ep[ep_addr];
 800182a:	4401      	add	r1, r0
    ep->is_in = 0U;
 800182c:	f883 2151 	strb.w	r2, [r3, #337]	@ 0x151
 8001830:	e7e0      	b.n	80017f4 <HAL_PCD_EP_SetStall+0x26>
    return HAL_ERROR;
 8001832:	2001      	movs	r0, #1
 8001834:	e7f3      	b.n	800181e <HAL_PCD_EP_SetStall+0x50>
  __HAL_LOCK(hpcd);
 8001836:	2002      	movs	r0, #2
 8001838:	e7f1      	b.n	800181e <HAL_PCD_EP_SetStall+0x50>

0800183a <HAL_PCD_EP_ClrStall>:
{
 800183a:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800183c:	7902      	ldrb	r2, [r0, #4]
 800183e:	f001 030f 	and.w	r3, r1, #15
 8001842:	429a      	cmp	r2, r3
{
 8001844:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001846:	d326      	bcc.n	8001896 <HAL_PCD_EP_ClrStall+0x5c>
  if ((0x80U & ep_addr) == 0x80U)
 8001848:	2328      	movs	r3, #40	@ 0x28
 800184a:	f001 0207 	and.w	r2, r1, #7
 800184e:	4353      	muls	r3, r2
 8001850:	f011 0f80 	tst.w	r1, #128	@ 0x80
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001854:	bf14      	ite	ne
 8001856:	f103 0110 	addne.w	r1, r3, #16
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800185a:	f503 71a8 	addeq.w	r1, r3, #336	@ 0x150
 800185e:	4418      	add	r0, r3
  ep->is_stall = 0U;
 8001860:	f04f 0500 	mov.w	r5, #0
    ep->is_in = 1U;
 8001864:	bf15      	itete	ne
 8001866:	2301      	movne	r3, #1
    ep->is_in = 0U;
 8001868:	2300      	moveq	r3, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800186a:	1909      	addne	r1, r1, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800186c:	1909      	addeq	r1, r1, r4
    ep->is_in = 1U;
 800186e:	bf14      	ite	ne
 8001870:	7443      	strbne	r3, [r0, #17]
    ep->is_in = 0U;
 8001872:	f880 3151 	strbeq.w	r3, [r0, #337]	@ 0x151
  ep->is_stall = 0U;
 8001876:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001878:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 800187a:	f894 3290 	ldrb.w	r3, [r4, #656]	@ 0x290
 800187e:	2b01      	cmp	r3, #1
 8001880:	d00b      	beq.n	800189a <HAL_PCD_EP_ClrStall+0x60>
 8001882:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001884:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8001886:	f884 3290 	strb.w	r3, [r4, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800188a:	f000 fece 	bl	800262a <USB_EPClearStall>
  return HAL_OK;
 800188e:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 8001890:	f884 5290 	strb.w	r5, [r4, #656]	@ 0x290
}
 8001894:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001896:	2001      	movs	r0, #1
 8001898:	e7fc      	b.n	8001894 <HAL_PCD_EP_ClrStall+0x5a>
  __HAL_LOCK(hpcd);
 800189a:	2002      	movs	r0, #2
 800189c:	e7fa      	b.n	8001894 <HAL_PCD_EP_ClrStall+0x5a>

0800189e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800189e:	b510      	push	{r4, lr}
 80018a0:	2428      	movs	r4, #40	@ 0x28
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80018a2:	f011 0f80 	tst.w	r1, #128	@ 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018a6:	bf1b      	ittet	ne
 80018a8:	f001 0107 	andne.w	r1, r1, #7
 80018ac:	fb04 0001 	mlane	r0, r4, r1, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80018b0:	fb04 0001 	mlaeq	r0, r4, r1, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018b4:	3010      	addne	r0, #16
    ep = &hpcd->OUT_ep[ep_addr];
 80018b6:	bf08      	it	eq
 80018b8:	f500 70a8 	addeq.w	r0, r0, #336	@ 0x150
  if (ep_kind == PCD_SNG_BUF)
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80018bc:	b299      	uxth	r1, r3
  if (ep_kind == PCD_SNG_BUF)
 80018be:	b91a      	cbnz	r2, 80018c8 <HAL_PCDEx_PMAConfig+0x2a>
    ep->doublebuffer = 0U;
 80018c0:	7302      	strb	r2, [r0, #12]
    ep->pmaadress = (uint16_t)pmaadress;
 80018c2:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 80018c4:	2000      	movs	r0, #0
 80018c6:	bd10      	pop	{r4, pc}
    ep->doublebuffer = 1U;
 80018c8:	2201      	movs	r2, #1
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80018ca:	6083      	str	r3, [r0, #8]
    ep->doublebuffer = 1U;
 80018cc:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80018ce:	e7f9      	b.n	80018c4 <HAL_PCDEx_PMAConfig+0x26>

080018d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018d0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018d4:	4605      	mov	r5, r0
 80018d6:	b338      	cbz	r0, 8001928 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018d8:	6803      	ldr	r3, [r0, #0]
 80018da:	07db      	lsls	r3, r3, #31
 80018dc:	d410      	bmi.n	8001900 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018de:	682b      	ldr	r3, [r5, #0]
 80018e0:	079f      	lsls	r7, r3, #30
 80018e2:	d45e      	bmi.n	80019a2 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018e4:	682b      	ldr	r3, [r5, #0]
 80018e6:	0719      	lsls	r1, r3, #28
 80018e8:	f100 8095 	bmi.w	8001a16 <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018ec:	682b      	ldr	r3, [r5, #0]
 80018ee:	075a      	lsls	r2, r3, #29
 80018f0:	f100 80c1 	bmi.w	8001a76 <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018f4:	69eb      	ldr	r3, [r5, #28]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	f040 812c 	bne.w	8001b54 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 80018fc:	2000      	movs	r0, #0
 80018fe:	e029      	b.n	8001954 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001900:	4c90      	ldr	r4, [pc, #576]	@ (8001b44 <HAL_RCC_OscConfig+0x274>)
 8001902:	6863      	ldr	r3, [r4, #4]
 8001904:	f003 030c 	and.w	r3, r3, #12
 8001908:	2b04      	cmp	r3, #4
 800190a:	d007      	beq.n	800191c <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800190c:	6863      	ldr	r3, [r4, #4]
 800190e:	f003 030c 	and.w	r3, r3, #12
 8001912:	2b08      	cmp	r3, #8
 8001914:	d10a      	bne.n	800192c <HAL_RCC_OscConfig+0x5c>
 8001916:	6863      	ldr	r3, [r4, #4]
 8001918:	03de      	lsls	r6, r3, #15
 800191a:	d507      	bpl.n	800192c <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800191c:	6823      	ldr	r3, [r4, #0]
 800191e:	039c      	lsls	r4, r3, #14
 8001920:	d5dd      	bpl.n	80018de <HAL_RCC_OscConfig+0xe>
 8001922:	686b      	ldr	r3, [r5, #4]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d1da      	bne.n	80018de <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 8001928:	2001      	movs	r0, #1
 800192a:	e013      	b.n	8001954 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800192c:	686b      	ldr	r3, [r5, #4]
 800192e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001932:	d112      	bne.n	800195a <HAL_RCC_OscConfig+0x8a>
 8001934:	6823      	ldr	r3, [r4, #0]
 8001936:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800193a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800193c:	f7fe ffb2 	bl	80008a4 <HAL_GetTick>
 8001940:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001942:	6823      	ldr	r3, [r4, #0]
 8001944:	0398      	lsls	r0, r3, #14
 8001946:	d4ca      	bmi.n	80018de <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001948:	f7fe ffac 	bl	80008a4 <HAL_GetTick>
 800194c:	1b80      	subs	r0, r0, r6
 800194e:	2864      	cmp	r0, #100	@ 0x64
 8001950:	d9f7      	bls.n	8001942 <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 8001952:	2003      	movs	r0, #3
}
 8001954:	b002      	add	sp, #8
 8001956:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800195a:	b99b      	cbnz	r3, 8001984 <HAL_RCC_OscConfig+0xb4>
 800195c:	6823      	ldr	r3, [r4, #0]
 800195e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001962:	6023      	str	r3, [r4, #0]
 8001964:	6823      	ldr	r3, [r4, #0]
 8001966:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800196a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800196c:	f7fe ff9a 	bl	80008a4 <HAL_GetTick>
 8001970:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001972:	6823      	ldr	r3, [r4, #0]
 8001974:	0399      	lsls	r1, r3, #14
 8001976:	d5b2      	bpl.n	80018de <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001978:	f7fe ff94 	bl	80008a4 <HAL_GetTick>
 800197c:	1b80      	subs	r0, r0, r6
 800197e:	2864      	cmp	r0, #100	@ 0x64
 8001980:	d9f7      	bls.n	8001972 <HAL_RCC_OscConfig+0xa2>
 8001982:	e7e6      	b.n	8001952 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001984:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001988:	6823      	ldr	r3, [r4, #0]
 800198a:	d103      	bne.n	8001994 <HAL_RCC_OscConfig+0xc4>
 800198c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001990:	6023      	str	r3, [r4, #0]
 8001992:	e7cf      	b.n	8001934 <HAL_RCC_OscConfig+0x64>
 8001994:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001998:	6023      	str	r3, [r4, #0]
 800199a:	6823      	ldr	r3, [r4, #0]
 800199c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019a0:	e7cb      	b.n	800193a <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019a2:	4c68      	ldr	r4, [pc, #416]	@ (8001b44 <HAL_RCC_OscConfig+0x274>)
 80019a4:	6863      	ldr	r3, [r4, #4]
 80019a6:	f013 0f0c 	tst.w	r3, #12
 80019aa:	d007      	beq.n	80019bc <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80019ac:	6863      	ldr	r3, [r4, #4]
 80019ae:	f003 030c 	and.w	r3, r3, #12
 80019b2:	2b08      	cmp	r3, #8
 80019b4:	d110      	bne.n	80019d8 <HAL_RCC_OscConfig+0x108>
 80019b6:	6863      	ldr	r3, [r4, #4]
 80019b8:	03da      	lsls	r2, r3, #15
 80019ba:	d40d      	bmi.n	80019d8 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019bc:	6823      	ldr	r3, [r4, #0]
 80019be:	079b      	lsls	r3, r3, #30
 80019c0:	d502      	bpl.n	80019c8 <HAL_RCC_OscConfig+0xf8>
 80019c2:	692b      	ldr	r3, [r5, #16]
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d1af      	bne.n	8001928 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019c8:	6823      	ldr	r3, [r4, #0]
 80019ca:	696a      	ldr	r2, [r5, #20]
 80019cc:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80019d0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80019d4:	6023      	str	r3, [r4, #0]
 80019d6:	e785      	b.n	80018e4 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019d8:	692a      	ldr	r2, [r5, #16]
 80019da:	4b5b      	ldr	r3, [pc, #364]	@ (8001b48 <HAL_RCC_OscConfig+0x278>)
 80019dc:	b16a      	cbz	r2, 80019fa <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 80019de:	2201      	movs	r2, #1
 80019e0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80019e2:	f7fe ff5f 	bl	80008a4 <HAL_GetTick>
 80019e6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019e8:	6823      	ldr	r3, [r4, #0]
 80019ea:	079f      	lsls	r7, r3, #30
 80019ec:	d4ec      	bmi.n	80019c8 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019ee:	f7fe ff59 	bl	80008a4 <HAL_GetTick>
 80019f2:	1b80      	subs	r0, r0, r6
 80019f4:	2802      	cmp	r0, #2
 80019f6:	d9f7      	bls.n	80019e8 <HAL_RCC_OscConfig+0x118>
 80019f8:	e7ab      	b.n	8001952 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 80019fa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80019fc:	f7fe ff52 	bl	80008a4 <HAL_GetTick>
 8001a00:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a02:	6823      	ldr	r3, [r4, #0]
 8001a04:	0798      	lsls	r0, r3, #30
 8001a06:	f57f af6d 	bpl.w	80018e4 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a0a:	f7fe ff4b 	bl	80008a4 <HAL_GetTick>
 8001a0e:	1b80      	subs	r0, r0, r6
 8001a10:	2802      	cmp	r0, #2
 8001a12:	d9f6      	bls.n	8001a02 <HAL_RCC_OscConfig+0x132>
 8001a14:	e79d      	b.n	8001952 <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a16:	69aa      	ldr	r2, [r5, #24]
 8001a18:	4e4a      	ldr	r6, [pc, #296]	@ (8001b44 <HAL_RCC_OscConfig+0x274>)
 8001a1a:	4b4b      	ldr	r3, [pc, #300]	@ (8001b48 <HAL_RCC_OscConfig+0x278>)
 8001a1c:	b1e2      	cbz	r2, 8001a58 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8001a1e:	2201      	movs	r2, #1
 8001a20:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8001a24:	f7fe ff3e 	bl	80008a4 <HAL_GetTick>
 8001a28:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a2a:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8001a2c:	079b      	lsls	r3, r3, #30
 8001a2e:	d50d      	bpl.n	8001a4c <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a30:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8001a34:	4b45      	ldr	r3, [pc, #276]	@ (8001b4c <HAL_RCC_OscConfig+0x27c>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	fbb3 f3f2 	udiv	r3, r3, r2
 8001a3c:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8001a3e:	bf00      	nop
  }
  while (Delay --);
 8001a40:	9b01      	ldr	r3, [sp, #4]
 8001a42:	1e5a      	subs	r2, r3, #1
 8001a44:	9201      	str	r2, [sp, #4]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d1f9      	bne.n	8001a3e <HAL_RCC_OscConfig+0x16e>
 8001a4a:	e74f      	b.n	80018ec <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a4c:	f7fe ff2a 	bl	80008a4 <HAL_GetTick>
 8001a50:	1b00      	subs	r0, r0, r4
 8001a52:	2802      	cmp	r0, #2
 8001a54:	d9e9      	bls.n	8001a2a <HAL_RCC_OscConfig+0x15a>
 8001a56:	e77c      	b.n	8001952 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 8001a58:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8001a5c:	f7fe ff22 	bl	80008a4 <HAL_GetTick>
 8001a60:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a62:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8001a64:	079f      	lsls	r7, r3, #30
 8001a66:	f57f af41 	bpl.w	80018ec <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a6a:	f7fe ff1b 	bl	80008a4 <HAL_GetTick>
 8001a6e:	1b00      	subs	r0, r0, r4
 8001a70:	2802      	cmp	r0, #2
 8001a72:	d9f6      	bls.n	8001a62 <HAL_RCC_OscConfig+0x192>
 8001a74:	e76d      	b.n	8001952 <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a76:	4c33      	ldr	r4, [pc, #204]	@ (8001b44 <HAL_RCC_OscConfig+0x274>)
 8001a78:	69e3      	ldr	r3, [r4, #28]
 8001a7a:	00d8      	lsls	r0, r3, #3
 8001a7c:	d424      	bmi.n	8001ac8 <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 8001a7e:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a80:	69e3      	ldr	r3, [r4, #28]
 8001a82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a86:	61e3      	str	r3, [r4, #28]
 8001a88:	69e3      	ldr	r3, [r4, #28]
 8001a8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a8e:	9300      	str	r3, [sp, #0]
 8001a90:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a92:	4e2f      	ldr	r6, [pc, #188]	@ (8001b50 <HAL_RCC_OscConfig+0x280>)
 8001a94:	6833      	ldr	r3, [r6, #0]
 8001a96:	05d9      	lsls	r1, r3, #23
 8001a98:	d518      	bpl.n	8001acc <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a9a:	68eb      	ldr	r3, [r5, #12]
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d126      	bne.n	8001aee <HAL_RCC_OscConfig+0x21e>
 8001aa0:	6a23      	ldr	r3, [r4, #32]
 8001aa2:	f043 0301 	orr.w	r3, r3, #1
 8001aa6:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001aa8:	f7fe fefc 	bl	80008a4 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aac:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8001ab0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ab2:	6a23      	ldr	r3, [r4, #32]
 8001ab4:	079b      	lsls	r3, r3, #30
 8001ab6:	d53f      	bpl.n	8001b38 <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 8001ab8:	2f00      	cmp	r7, #0
 8001aba:	f43f af1b 	beq.w	80018f4 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001abe:	69e3      	ldr	r3, [r4, #28]
 8001ac0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ac4:	61e3      	str	r3, [r4, #28]
 8001ac6:	e715      	b.n	80018f4 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8001ac8:	2700      	movs	r7, #0
 8001aca:	e7e2      	b.n	8001a92 <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001acc:	6833      	ldr	r3, [r6, #0]
 8001ace:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ad2:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001ad4:	f7fe fee6 	bl	80008a4 <HAL_GetTick>
 8001ad8:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ada:	6833      	ldr	r3, [r6, #0]
 8001adc:	05da      	lsls	r2, r3, #23
 8001ade:	d4dc      	bmi.n	8001a9a <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ae0:	f7fe fee0 	bl	80008a4 <HAL_GetTick>
 8001ae4:	eba0 0008 	sub.w	r0, r0, r8
 8001ae8:	2864      	cmp	r0, #100	@ 0x64
 8001aea:	d9f6      	bls.n	8001ada <HAL_RCC_OscConfig+0x20a>
 8001aec:	e731      	b.n	8001952 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001aee:	b9ab      	cbnz	r3, 8001b1c <HAL_RCC_OscConfig+0x24c>
 8001af0:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001af2:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001af6:	f023 0301 	bic.w	r3, r3, #1
 8001afa:	6223      	str	r3, [r4, #32]
 8001afc:	6a23      	ldr	r3, [r4, #32]
 8001afe:	f023 0304 	bic.w	r3, r3, #4
 8001b02:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001b04:	f7fe fece 	bl	80008a4 <HAL_GetTick>
 8001b08:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b0a:	6a23      	ldr	r3, [r4, #32]
 8001b0c:	0798      	lsls	r0, r3, #30
 8001b0e:	d5d3      	bpl.n	8001ab8 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b10:	f7fe fec8 	bl	80008a4 <HAL_GetTick>
 8001b14:	1b80      	subs	r0, r0, r6
 8001b16:	4540      	cmp	r0, r8
 8001b18:	d9f7      	bls.n	8001b0a <HAL_RCC_OscConfig+0x23a>
 8001b1a:	e71a      	b.n	8001952 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b1c:	2b05      	cmp	r3, #5
 8001b1e:	6a23      	ldr	r3, [r4, #32]
 8001b20:	d103      	bne.n	8001b2a <HAL_RCC_OscConfig+0x25a>
 8001b22:	f043 0304 	orr.w	r3, r3, #4
 8001b26:	6223      	str	r3, [r4, #32]
 8001b28:	e7ba      	b.n	8001aa0 <HAL_RCC_OscConfig+0x1d0>
 8001b2a:	f023 0301 	bic.w	r3, r3, #1
 8001b2e:	6223      	str	r3, [r4, #32]
 8001b30:	6a23      	ldr	r3, [r4, #32]
 8001b32:	f023 0304 	bic.w	r3, r3, #4
 8001b36:	e7b6      	b.n	8001aa6 <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b38:	f7fe feb4 	bl	80008a4 <HAL_GetTick>
 8001b3c:	1b80      	subs	r0, r0, r6
 8001b3e:	4540      	cmp	r0, r8
 8001b40:	d9b7      	bls.n	8001ab2 <HAL_RCC_OscConfig+0x1e2>
 8001b42:	e706      	b.n	8001952 <HAL_RCC_OscConfig+0x82>
 8001b44:	40021000 	.word	0x40021000
 8001b48:	42420000 	.word	0x42420000
 8001b4c:	2000000c 	.word	0x2000000c
 8001b50:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b54:	4c2a      	ldr	r4, [pc, #168]	@ (8001c00 <HAL_RCC_OscConfig+0x330>)
 8001b56:	6862      	ldr	r2, [r4, #4]
 8001b58:	f002 020c 	and.w	r2, r2, #12
 8001b5c:	2a08      	cmp	r2, #8
 8001b5e:	d03e      	beq.n	8001bde <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b60:	2200      	movs	r2, #0
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	4b27      	ldr	r3, [pc, #156]	@ (8001c04 <HAL_RCC_OscConfig+0x334>)
        __HAL_RCC_PLL_DISABLE();
 8001b66:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b68:	d12c      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8001b6a:	f7fe fe9b 	bl	80008a4 <HAL_GetTick>
 8001b6e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b70:	6823      	ldr	r3, [r4, #0]
 8001b72:	0199      	lsls	r1, r3, #6
 8001b74:	d420      	bmi.n	8001bb8 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b76:	6a2b      	ldr	r3, [r5, #32]
 8001b78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b7c:	d105      	bne.n	8001b8a <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b7e:	6862      	ldr	r2, [r4, #4]
 8001b80:	68a9      	ldr	r1, [r5, #8]
 8001b82:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8001b86:	430a      	orrs	r2, r1
 8001b88:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b8a:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8001b8c:	6862      	ldr	r2, [r4, #4]
 8001b8e:	430b      	orrs	r3, r1
 8001b90:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
 8001b94:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 8001b96:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b98:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8001b9a:	4b1a      	ldr	r3, [pc, #104]	@ (8001c04 <HAL_RCC_OscConfig+0x334>)
 8001b9c:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001b9e:	f7fe fe81 	bl	80008a4 <HAL_GetTick>
 8001ba2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ba4:	6823      	ldr	r3, [r4, #0]
 8001ba6:	019a      	lsls	r2, r3, #6
 8001ba8:	f53f aea8 	bmi.w	80018fc <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bac:	f7fe fe7a 	bl	80008a4 <HAL_GetTick>
 8001bb0:	1b40      	subs	r0, r0, r5
 8001bb2:	2802      	cmp	r0, #2
 8001bb4:	d9f6      	bls.n	8001ba4 <HAL_RCC_OscConfig+0x2d4>
 8001bb6:	e6cc      	b.n	8001952 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bb8:	f7fe fe74 	bl	80008a4 <HAL_GetTick>
 8001bbc:	1b80      	subs	r0, r0, r6
 8001bbe:	2802      	cmp	r0, #2
 8001bc0:	d9d6      	bls.n	8001b70 <HAL_RCC_OscConfig+0x2a0>
 8001bc2:	e6c6      	b.n	8001952 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8001bc4:	f7fe fe6e 	bl	80008a4 <HAL_GetTick>
 8001bc8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bca:	6823      	ldr	r3, [r4, #0]
 8001bcc:	019b      	lsls	r3, r3, #6
 8001bce:	f57f ae95 	bpl.w	80018fc <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bd2:	f7fe fe67 	bl	80008a4 <HAL_GetTick>
 8001bd6:	1b40      	subs	r0, r0, r5
 8001bd8:	2802      	cmp	r0, #2
 8001bda:	d9f6      	bls.n	8001bca <HAL_RCC_OscConfig+0x2fa>
 8001bdc:	e6b9      	b.n	8001952 <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	f43f aea2 	beq.w	8001928 <HAL_RCC_OscConfig+0x58>
        pll_config = RCC->CFGR;
 8001be4:	6860      	ldr	r0, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001be6:	6a2b      	ldr	r3, [r5, #32]
 8001be8:	f400 3280 	and.w	r2, r0, #65536	@ 0x10000
 8001bec:	429a      	cmp	r2, r3
 8001bee:	f47f ae9b 	bne.w	8001928 <HAL_RCC_OscConfig+0x58>
 8001bf2:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001bf4:	f400 1070 	and.w	r0, r0, #3932160	@ 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bf8:	1ac0      	subs	r0, r0, r3
 8001bfa:	bf18      	it	ne
 8001bfc:	2001      	movne	r0, #1
 8001bfe:	e6a9      	b.n	8001954 <HAL_RCC_OscConfig+0x84>
 8001c00:	40021000 	.word	0x40021000
 8001c04:	42420000 	.word	0x42420000

08001c08 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8001c08:	4a0d      	ldr	r2, [pc, #52]	@ (8001c40 <HAL_RCC_GetSysClockFreq+0x38>)
 8001c0a:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001c0c:	f003 010c 	and.w	r1, r3, #12
 8001c10:	2908      	cmp	r1, #8
 8001c12:	d112      	bne.n	8001c3a <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c14:	480b      	ldr	r0, [pc, #44]	@ (8001c44 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001c16:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c1a:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c1c:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c1e:	d509      	bpl.n	8001c34 <HAL_RCC_GetSysClockFreq+0x2c>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c20:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c22:	4a09      	ldr	r2, [pc, #36]	@ (8001c48 <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c24:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c28:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c2a:	4a08      	ldr	r2, [pc, #32]	@ (8001c4c <HAL_RCC_GetSysClockFreq+0x44>)
 8001c2c:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c2e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001c32:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c34:	4b06      	ldr	r3, [pc, #24]	@ (8001c50 <HAL_RCC_GetSysClockFreq+0x48>)
 8001c36:	4358      	muls	r0, r3
 8001c38:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8001c3a:	4803      	ldr	r0, [pc, #12]	@ (8001c48 <HAL_RCC_GetSysClockFreq+0x40>)
}
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	40021000 	.word	0x40021000
 8001c44:	0800432a 	.word	0x0800432a
 8001c48:	007a1200 	.word	0x007a1200
 8001c4c:	08004328 	.word	0x08004328
 8001c50:	003d0900 	.word	0x003d0900

08001c54 <HAL_RCC_ClockConfig>:
{
 8001c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c58:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8001c5a:	4604      	mov	r4, r0
 8001c5c:	b910      	cbnz	r0, 8001c64 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001c5e:	2001      	movs	r0, #1
}
 8001c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c64:	4a44      	ldr	r2, [pc, #272]	@ (8001d78 <HAL_RCC_ClockConfig+0x124>)
 8001c66:	6813      	ldr	r3, [r2, #0]
 8001c68:	f003 0307 	and.w	r3, r3, #7
 8001c6c:	428b      	cmp	r3, r1
 8001c6e:	d328      	bcc.n	8001cc2 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c70:	6821      	ldr	r1, [r4, #0]
 8001c72:	078e      	lsls	r6, r1, #30
 8001c74:	d430      	bmi.n	8001cd8 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c76:	07ca      	lsls	r2, r1, #31
 8001c78:	d443      	bmi.n	8001d02 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c7a:	4a3f      	ldr	r2, [pc, #252]	@ (8001d78 <HAL_RCC_ClockConfig+0x124>)
 8001c7c:	6813      	ldr	r3, [r2, #0]
 8001c7e:	f003 0307 	and.w	r3, r3, #7
 8001c82:	42ab      	cmp	r3, r5
 8001c84:	d865      	bhi.n	8001d52 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c86:	6822      	ldr	r2, [r4, #0]
 8001c88:	4d3c      	ldr	r5, [pc, #240]	@ (8001d7c <HAL_RCC_ClockConfig+0x128>)
 8001c8a:	f012 0f04 	tst.w	r2, #4
 8001c8e:	d16c      	bne.n	8001d6a <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c90:	0713      	lsls	r3, r2, #28
 8001c92:	d506      	bpl.n	8001ca2 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c94:	686b      	ldr	r3, [r5, #4]
 8001c96:	6922      	ldr	r2, [r4, #16]
 8001c98:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8001c9c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001ca0:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ca2:	f7ff ffb1 	bl	8001c08 <HAL_RCC_GetSysClockFreq>
 8001ca6:	686b      	ldr	r3, [r5, #4]
 8001ca8:	4a35      	ldr	r2, [pc, #212]	@ (8001d80 <HAL_RCC_ClockConfig+0x12c>)
 8001caa:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001cae:	5cd3      	ldrb	r3, [r2, r3]
 8001cb0:	40d8      	lsrs	r0, r3
 8001cb2:	4b34      	ldr	r3, [pc, #208]	@ (8001d84 <HAL_RCC_ClockConfig+0x130>)
 8001cb4:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001cb6:	4b34      	ldr	r3, [pc, #208]	@ (8001d88 <HAL_RCC_ClockConfig+0x134>)
 8001cb8:	6818      	ldr	r0, [r3, #0]
 8001cba:	f7fe fdb1 	bl	8000820 <HAL_InitTick>
  return HAL_OK;
 8001cbe:	2000      	movs	r0, #0
 8001cc0:	e7ce      	b.n	8001c60 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cc2:	6813      	ldr	r3, [r2, #0]
 8001cc4:	f023 0307 	bic.w	r3, r3, #7
 8001cc8:	430b      	orrs	r3, r1
 8001cca:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ccc:	6813      	ldr	r3, [r2, #0]
 8001cce:	f003 0307 	and.w	r3, r3, #7
 8001cd2:	428b      	cmp	r3, r1
 8001cd4:	d1c3      	bne.n	8001c5e <HAL_RCC_ClockConfig+0xa>
 8001cd6:	e7cb      	b.n	8001c70 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cd8:	4b28      	ldr	r3, [pc, #160]	@ (8001d7c <HAL_RCC_ClockConfig+0x128>)
 8001cda:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cde:	bf1e      	ittt	ne
 8001ce0:	685a      	ldrne	r2, [r3, #4]
 8001ce2:	f442 62e0 	orrne.w	r2, r2, #1792	@ 0x700
 8001ce6:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ce8:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cea:	bf42      	ittt	mi
 8001cec:	685a      	ldrmi	r2, [r3, #4]
 8001cee:	f442 5260 	orrmi.w	r2, r2, #14336	@ 0x3800
 8001cf2:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cf4:	685a      	ldr	r2, [r3, #4]
 8001cf6:	68a0      	ldr	r0, [r4, #8]
 8001cf8:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8001cfc:	4302      	orrs	r2, r0
 8001cfe:	605a      	str	r2, [r3, #4]
 8001d00:	e7b9      	b.n	8001c76 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d02:	6862      	ldr	r2, [r4, #4]
 8001d04:	4e1d      	ldr	r6, [pc, #116]	@ (8001d7c <HAL_RCC_ClockConfig+0x128>)
 8001d06:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d08:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d0a:	d11a      	bne.n	8001d42 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d0c:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d10:	d0a5      	beq.n	8001c5e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d12:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d14:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d18:	f023 0303 	bic.w	r3, r3, #3
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001d20:	f7fe fdc0 	bl	80008a4 <HAL_GetTick>
 8001d24:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d26:	6873      	ldr	r3, [r6, #4]
 8001d28:	6862      	ldr	r2, [r4, #4]
 8001d2a:	f003 030c 	and.w	r3, r3, #12
 8001d2e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001d32:	d0a2      	beq.n	8001c7a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d34:	f7fe fdb6 	bl	80008a4 <HAL_GetTick>
 8001d38:	1bc0      	subs	r0, r0, r7
 8001d3a:	4540      	cmp	r0, r8
 8001d3c:	d9f3      	bls.n	8001d26 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8001d3e:	2003      	movs	r0, #3
 8001d40:	e78e      	b.n	8001c60 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d42:	2a02      	cmp	r2, #2
 8001d44:	d102      	bne.n	8001d4c <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d46:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001d4a:	e7e1      	b.n	8001d10 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d4c:	f013 0f02 	tst.w	r3, #2
 8001d50:	e7de      	b.n	8001d10 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d52:	6813      	ldr	r3, [r2, #0]
 8001d54:	f023 0307 	bic.w	r3, r3, #7
 8001d58:	432b      	orrs	r3, r5
 8001d5a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d5c:	6813      	ldr	r3, [r2, #0]
 8001d5e:	f003 0307 	and.w	r3, r3, #7
 8001d62:	42ab      	cmp	r3, r5
 8001d64:	f47f af7b 	bne.w	8001c5e <HAL_RCC_ClockConfig+0xa>
 8001d68:	e78d      	b.n	8001c86 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d6a:	686b      	ldr	r3, [r5, #4]
 8001d6c:	68e1      	ldr	r1, [r4, #12]
 8001d6e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001d72:	430b      	orrs	r3, r1
 8001d74:	606b      	str	r3, [r5, #4]
 8001d76:	e78b      	b.n	8001c90 <HAL_RCC_ClockConfig+0x3c>
 8001d78:	40022000 	.word	0x40022000
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	08004318 	.word	0x08004318
 8001d84:	2000000c 	.word	0x2000000c
 8001d88:	20000014 	.word	0x20000014

08001d8c <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001d8c:	6803      	ldr	r3, [r0, #0]
{
 8001d8e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001d92:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001d94:	07d8      	lsls	r0, r3, #31
 8001d96:	d521      	bpl.n	8001ddc <HAL_RCCEx_PeriphCLKConfig+0x50>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d98:	4c36      	ldr	r4, [pc, #216]	@ (8001e74 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8001d9a:	69e3      	ldr	r3, [r4, #28]
 8001d9c:	00d9      	lsls	r1, r3, #3
 8001d9e:	d42b      	bmi.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8001da0:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001da2:	69e3      	ldr	r3, [r4, #28]
 8001da4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001da8:	61e3      	str	r3, [r4, #28]
 8001daa:	69e3      	ldr	r3, [r4, #28]
 8001dac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001db0:	9301      	str	r3, [sp, #4]
 8001db2:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001db4:	4f30      	ldr	r7, [pc, #192]	@ (8001e78 <HAL_RCCEx_PeriphCLKConfig+0xec>)
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	05da      	lsls	r2, r3, #23
 8001dba:	d51f      	bpl.n	8001dfc <HAL_RCCEx_PeriphCLKConfig+0x70>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001dbc:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001dbe:	686a      	ldr	r2, [r5, #4]
 8001dc0:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8001dc4:	d12e      	bne.n	8001e24 <HAL_RCCEx_PeriphCLKConfig+0x98>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001dc6:	6a23      	ldr	r3, [r4, #32]
 8001dc8:	686a      	ldr	r2, [r5, #4]
 8001dca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001dd2:	b11e      	cbz	r6, 8001ddc <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dd4:	69e3      	ldr	r3, [r4, #28]
 8001dd6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001dda:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001ddc:	682a      	ldr	r2, [r5, #0]
 8001dde:	0791      	lsls	r1, r2, #30
 8001de0:	d506      	bpl.n	8001df0 <HAL_RCCEx_PeriphCLKConfig+0x64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001de2:	4924      	ldr	r1, [pc, #144]	@ (8001e74 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8001de4:	68a8      	ldr	r0, [r5, #8]
 8001de6:	684b      	ldr	r3, [r1, #4]
 8001de8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001dec:	4303      	orrs	r3, r0
 8001dee:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001df0:	06d3      	lsls	r3, r2, #27
 8001df2:	d436      	bmi.n	8001e62 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001df4:	2000      	movs	r0, #0
 8001df6:	e012      	b.n	8001e1e <HAL_RCCEx_PeriphCLKConfig+0x92>
    FlagStatus pwrclkchanged = RESET;
 8001df8:	2600      	movs	r6, #0
 8001dfa:	e7db      	b.n	8001db4 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e02:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001e04:	f7fe fd4e 	bl	80008a4 <HAL_GetTick>
 8001e08:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	05db      	lsls	r3, r3, #23
 8001e0e:	d4d5      	bmi.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e10:	f7fe fd48 	bl	80008a4 <HAL_GetTick>
 8001e14:	eba0 0008 	sub.w	r0, r0, r8
 8001e18:	2864      	cmp	r0, #100	@ 0x64
 8001e1a:	d9f6      	bls.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
          return HAL_TIMEOUT;
 8001e1c:	2003      	movs	r0, #3
}
 8001e1e:	b002      	add	sp, #8
 8001e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e24:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d0cc      	beq.n	8001dc6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e2c:	2001      	movs	r0, #1
 8001e2e:	4a13      	ldr	r2, [pc, #76]	@ (8001e7c <HAL_RCCEx_PeriphCLKConfig+0xf0>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e30:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e32:	f8c2 0440 	str.w	r0, [r2, #1088]	@ 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e36:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e38:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001e3c:	07df      	lsls	r7, r3, #31
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e3e:	f8c2 0440 	str.w	r0, [r2, #1088]	@ 0x440
      RCC->BDCR = temp_reg;
 8001e42:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001e44:	d5bf      	bpl.n	8001dc6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        tickstart = HAL_GetTick();
 8001e46:	f7fe fd2d 	bl	80008a4 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e4a:	f241 3888 	movw	r8, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 8001e4e:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e50:	6a23      	ldr	r3, [r4, #32]
 8001e52:	0798      	lsls	r0, r3, #30
 8001e54:	d4b7      	bmi.n	8001dc6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e56:	f7fe fd25 	bl	80008a4 <HAL_GetTick>
 8001e5a:	1bc0      	subs	r0, r0, r7
 8001e5c:	4540      	cmp	r0, r8
 8001e5e:	d9f7      	bls.n	8001e50 <HAL_RCCEx_PeriphCLKConfig+0xc4>
 8001e60:	e7dc      	b.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0x90>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001e62:	4a04      	ldr	r2, [pc, #16]	@ (8001e74 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8001e64:	68e9      	ldr	r1, [r5, #12]
 8001e66:	6853      	ldr	r3, [r2, #4]
 8001e68:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001e6c:	430b      	orrs	r3, r1
 8001e6e:	6053      	str	r3, [r2, #4]
 8001e70:	e7c0      	b.n	8001df4 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8001e72:	bf00      	nop
 8001e74:	40021000 	.word	0x40021000
 8001e78:	40007000 	.word	0x40007000
 8001e7c:	42420000 	.word	0x42420000

08001e80 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e80:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d118      	bne.n	8001eba <HAL_TIM_Base_Start+0x3a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e88:	2302      	movs	r3, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e8a:	4a0d      	ldr	r2, [pc, #52]	@ (8001ec0 <HAL_TIM_Base_Start+0x40>)
  htim->State = HAL_TIM_STATE_BUSY;
 8001e8c:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e90:	6803      	ldr	r3, [r0, #0]
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d006      	beq.n	8001ea4 <HAL_TIM_Base_Start+0x24>
 8001e96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e9a:	d003      	beq.n	8001ea4 <HAL_TIM_Base_Start+0x24>
 8001e9c:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d104      	bne.n	8001eae <HAL_TIM_Base_Start+0x2e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ea4:	689a      	ldr	r2, [r3, #8]
 8001ea6:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eaa:	2a06      	cmp	r2, #6
 8001eac:	d003      	beq.n	8001eb6 <HAL_TIM_Base_Start+0x36>
    {
      __HAL_TIM_ENABLE(htim);
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	f042 0201 	orr.w	r2, r2, #1
 8001eb4:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 8001eb6:	2000      	movs	r0, #0
 8001eb8:	4770      	bx	lr
    return HAL_ERROR;
 8001eba:	2001      	movs	r0, #1
}
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	40012c00 	.word	0x40012c00

08001ec4 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ec4:	4a19      	ldr	r2, [pc, #100]	@ (8001f2c <TIM_Base_SetConfig+0x68>)
{
 8001ec6:	b510      	push	{r4, lr}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ec8:	4290      	cmp	r0, r2
  tmpcr1 = TIMx->CR1;
 8001eca:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ecc:	d005      	beq.n	8001eda <TIM_Base_SetConfig+0x16>
 8001ece:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8001ed2:	d002      	beq.n	8001eda <TIM_Base_SetConfig+0x16>
 8001ed4:	4c16      	ldr	r4, [pc, #88]	@ (8001f30 <TIM_Base_SetConfig+0x6c>)
 8001ed6:	42a0      	cmp	r0, r4
 8001ed8:	d110      	bne.n	8001efc <TIM_Base_SetConfig+0x38>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001eda:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001edc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ee0:	4290      	cmp	r0, r2
    tmpcr1 |= Structure->CounterMode;
 8001ee2:	ea43 0304 	orr.w	r3, r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ee6:	d005      	beq.n	8001ef4 <TIM_Base_SetConfig+0x30>
 8001ee8:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8001eec:	d002      	beq.n	8001ef4 <TIM_Base_SetConfig+0x30>
 8001eee:	4a10      	ldr	r2, [pc, #64]	@ (8001f30 <TIM_Base_SetConfig+0x6c>)
 8001ef0:	4290      	cmp	r0, r2
 8001ef2:	d103      	bne.n	8001efc <TIM_Base_SetConfig+0x38>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ef4:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ef6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001efa:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001efc:	694a      	ldr	r2, [r1, #20]
 8001efe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001f02:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8001f04:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f06:	688b      	ldr	r3, [r1, #8]
 8001f08:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f0a:	680b      	ldr	r3, [r1, #0]
 8001f0c:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f0e:	4b07      	ldr	r3, [pc, #28]	@ (8001f2c <TIM_Base_SetConfig+0x68>)
 8001f10:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f12:	bf04      	itt	eq
 8001f14:	690b      	ldreq	r3, [r1, #16]
 8001f16:	6303      	streq	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001f1c:	6903      	ldr	r3, [r0, #16]
 8001f1e:	07db      	lsls	r3, r3, #31
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001f20:	bf42      	ittt	mi
 8001f22:	6903      	ldrmi	r3, [r0, #16]
 8001f24:	f023 0301 	bicmi.w	r3, r3, #1
 8001f28:	6103      	strmi	r3, [r0, #16]
  }
}
 8001f2a:	bd10      	pop	{r4, pc}
 8001f2c:	40012c00 	.word	0x40012c00
 8001f30:	40000400 	.word	0x40000400

08001f34 <HAL_TIM_Base_Init>:
{
 8001f34:	b510      	push	{r4, lr}
  if (htim == NULL)
 8001f36:	4604      	mov	r4, r0
 8001f38:	b330      	cbz	r0, 8001f88 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001f3a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8001f3e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001f42:	b91b      	cbnz	r3, 8001f4c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001f44:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001f48:	f7fe fbf6 	bl	8000738 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001f4c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f4e:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001f50:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f54:	1d21      	adds	r1, r4, #4
 8001f56:	f7ff ffb5 	bl	8001ec4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f5a:	2301      	movs	r3, #1
  return HAL_OK;
 8001f5c:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f5e:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f62:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8001f66:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8001f6a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8001f6e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f72:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001f76:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001f7a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8001f7e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8001f82:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 8001f86:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001f88:	2001      	movs	r0, #1
 8001f8a:	e7fc      	b.n	8001f86 <HAL_TIM_Base_Init+0x52>

08001f8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001f8c:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001f8e:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001f90:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f92:	f424 447f 	bic.w	r4, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001f96:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8001f9a:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001f9c:	6082      	str	r2, [r0, #8]
}
 8001f9e:	bd10      	pop	{r4, pc}

08001fa0 <HAL_TIM_ConfigClockSource>:
{
 8001fa0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001fa2:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 8001fa6:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	f04f 0002 	mov.w	r0, #2
 8001fae:	f000 808e 	beq.w	80020ce <HAL_TIM_ConfigClockSource+0x12e>
 8001fb2:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8001fb4:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001fb8:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8001fba:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001fbe:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001fc0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001fc4:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001fc8:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8001fca:	680b      	ldr	r3, [r1, #0]
 8001fcc:	2b60      	cmp	r3, #96	@ 0x60
 8001fce:	d04f      	beq.n	8002070 <HAL_TIM_ConfigClockSource+0xd0>
 8001fd0:	d832      	bhi.n	8002038 <HAL_TIM_ConfigClockSource+0x98>
 8001fd2:	2b40      	cmp	r3, #64	@ 0x40
 8001fd4:	d064      	beq.n	80020a0 <HAL_TIM_ConfigClockSource+0x100>
 8001fd6:	d816      	bhi.n	8002006 <HAL_TIM_ConfigClockSource+0x66>
 8001fd8:	2b20      	cmp	r3, #32
 8001fda:	d00d      	beq.n	8001ff8 <HAL_TIM_ConfigClockSource+0x58>
 8001fdc:	d80a      	bhi.n	8001ff4 <HAL_TIM_ConfigClockSource+0x54>
 8001fde:	f033 0110 	bics.w	r1, r3, #16
 8001fe2:	d009      	beq.n	8001ff8 <HAL_TIM_ConfigClockSource+0x58>
  htim->State = HAL_TIM_STATE_READY;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8001fea:	2300      	movs	r3, #0
 8001fec:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8001ff0:	4610      	mov	r0, r2
 8001ff2:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 8001ff4:	2b30      	cmp	r3, #48	@ 0x30
 8001ff6:	d1f5      	bne.n	8001fe4 <HAL_TIM_ConfigClockSource+0x44>
  tmpsmcr = TIMx->SMCR;
 8001ff8:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001ffa:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001ffe:	4313      	orrs	r3, r2
 8002000:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8002004:	e028      	b.n	8002058 <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 8002006:	2b50      	cmp	r3, #80	@ 0x50
 8002008:	d1ec      	bne.n	8001fe4 <HAL_TIM_ConfigClockSource+0x44>
                               sClockSourceConfig->ClockPolarity,
 800200a:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800200c:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 800200e:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002010:	6a03      	ldr	r3, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002012:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002016:	f023 0301 	bic.w	r3, r3, #1
 800201a:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800201c:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 800201e:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002020:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002024:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002028:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800202a:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800202c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800202e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002032:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 8002036:	e00f      	b.n	8002058 <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 8002038:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800203c:	d00d      	beq.n	800205a <HAL_TIM_ConfigClockSource+0xba>
 800203e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002042:	d00c      	beq.n	800205e <HAL_TIM_ConfigClockSource+0xbe>
 8002044:	2b70      	cmp	r3, #112	@ 0x70
 8002046:	d1cd      	bne.n	8001fe4 <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 8002048:	68cb      	ldr	r3, [r1, #12]
 800204a:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800204e:	f7ff ff9d 	bl	8001f8c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002052:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002054:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8002058:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800205a:	2200      	movs	r2, #0
 800205c:	e7c2      	b.n	8001fe4 <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 800205e:	68cb      	ldr	r3, [r1, #12]
 8002060:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8002064:	f7ff ff92 	bl	8001f8c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002068:	6883      	ldr	r3, [r0, #8]
 800206a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800206e:	e7f3      	b.n	8002058 <HAL_TIM_ConfigClockSource+0xb8>
  tmpccer = TIMx->CCER;
 8002070:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002072:	6a02      	ldr	r2, [r0, #32]
                               sClockSourceConfig->ClockPolarity,
 8002074:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002076:	f022 0210 	bic.w	r2, r2, #16
                               sClockSourceConfig->ClockFilter);
 800207a:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800207c:	6202      	str	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800207e:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002080:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002084:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
  tmpccer |= (TIM_ICPolarity << 4U);
 8002088:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800208c:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8002090:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002092:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002094:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002096:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800209a:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 800209e:	e7db      	b.n	8002058 <HAL_TIM_ConfigClockSource+0xb8>
                               sClockSourceConfig->ClockPolarity,
 80020a0:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80020a2:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 80020a4:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80020a6:	6a03      	ldr	r3, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80020a8:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80020ac:	f023 0301 	bic.w	r3, r3, #1
 80020b0:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80020b2:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 80020b4:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80020b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80020ba:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80020be:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80020c0:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80020c2:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80020c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80020c8:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 80020cc:	e7c4      	b.n	8002058 <HAL_TIM_ConfigClockSource+0xb8>
  __HAL_LOCK(htim);
 80020ce:	4602      	mov	r2, r0
 80020d0:	e78e      	b.n	8001ff0 <HAL_TIM_ConfigClockSource+0x50>
	...

080020d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80020d4:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80020d6:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
{
 80020da:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 80020dc:	2a01      	cmp	r2, #1
 80020de:	f04f 0002 	mov.w	r0, #2
 80020e2:	d01e      	beq.n	8002122 <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80020e4:	681a      	ldr	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80020e6:	f883 003d 	strb.w	r0, [r3, #61]	@ 0x3d
  tmpcr2 = htim->Instance->CR2;
 80020ea:	6854      	ldr	r4, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80020ec:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 80020ee:	f024 0470 	bic.w	r4, r4, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80020f2:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 80020f4:	6890      	ldr	r0, [r2, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80020f6:	6054      	str	r4, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020f8:	4c0a      	ldr	r4, [pc, #40]	@ (8002124 <HAL_TIMEx_MasterConfigSynchronization+0x50>)
 80020fa:	42a2      	cmp	r2, r4
 80020fc:	d006      	beq.n	800210c <HAL_TIMEx_MasterConfigSynchronization+0x38>
 80020fe:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8002102:	d003      	beq.n	800210c <HAL_TIMEx_MasterConfigSynchronization+0x38>
 8002104:	f5a4 3494 	sub.w	r4, r4, #75776	@ 0x12800
 8002108:	42a2      	cmp	r2, r4
 800210a:	d104      	bne.n	8002116 <HAL_TIMEx_MasterConfigSynchronization+0x42>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800210c:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800210e:	f020 0080 	bic.w	r0, r0, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002112:	4301      	orrs	r1, r0

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002114:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002116:	2201      	movs	r2, #1

  __HAL_UNLOCK(htim);
 8002118:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800211a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 800211e:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8002122:	bd30      	pop	{r4, r5, pc}
 8002124:	40012c00 	.word	0x40012c00

08002128 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002128:	b084      	sub	sp, #16
 800212a:	a804      	add	r0, sp, #16
 800212c:	e900 000e 	stmdb	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8002130:	2000      	movs	r0, #0
 8002132:	b004      	add	sp, #16
 8002134:	4770      	bx	lr

08002136 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002136:	4603      	mov	r3, r0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8002138:	f44f 423f 	mov.w	r2, #48896	@ 0xbf00
  USBx->ISTR = 0U;
 800213c:	2000      	movs	r0, #0
 800213e:	f8a3 0044 	strh.w	r0, [r3, #68]	@ 0x44
  USBx->CNTR = (uint16_t)winterruptmask;
 8002142:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
}
 8002146:	4770      	bx	lr

08002148 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002148:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 800214c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002150:	045b      	lsls	r3, r3, #17
 8002152:	0c5b      	lsrs	r3, r3, #17
 8002154:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40

  return HAL_OK;
}
 8002158:	2000      	movs	r0, #0
 800215a:	4770      	bx	lr

0800215c <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 800215c:	2000      	movs	r0, #0
 800215e:	4770      	bx	lr

08002160 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002160:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002162:	4604      	mov	r4, r0
 8002164:	a804      	add	r0, sp, #16
 8002166:	e900 000e 	stmdb	r0, {r1, r2, r3}
  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800216a:	2000      	movs	r0, #0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800216c:	2301      	movs	r3, #1
 800216e:	f8a4 3040 	strh.w	r3, [r4, #64]	@ 0x40
  USBx->CNTR = 0U;
 8002172:	f8a4 0040 	strh.w	r0, [r4, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002176:	f8a4 0044 	strh.w	r0, [r4, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800217a:	f8a4 0050 	strh.w	r0, [r4, #80]	@ 0x50

  return HAL_OK;
}
 800217e:	b004      	add	sp, #16
 8002180:	bd10      	pop	{r4, pc}
	...

08002184 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002184:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002186:	780a      	ldrb	r2, [r1, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8002188:	78cd      	ldrb	r5, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800218a:	f830 4022 	ldrh.w	r4, [r0, r2, lsl #2]
{
 800218e:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002190:	f424 44ec 	bic.w	r4, r4, #30208	@ 0x7600
 8002194:	f024 0470 	bic.w	r4, r4, #112	@ 0x70
 8002198:	0424      	lsls	r4, r4, #16
 800219a:	0c24      	lsrs	r4, r4, #16
  switch (ep->type)
 800219c:	2d03      	cmp	r5, #3
 800219e:	d84b      	bhi.n	8002238 <USB_ActivateEndpoint+0xb4>
 80021a0:	e8df f005 	tbb	[pc, r5]
 80021a4:	43454702 	.word	0x43454702
  HAL_StatusTypeDef ret = HAL_OK;
 80021a8:	4628      	mov	r0, r5
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80021aa:	f444 7400 	orr.w	r4, r4, #512	@ 0x200
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80021ae:	f248 0680 	movw	r6, #32896	@ 0x8080
 80021b2:	4334      	orrs	r4, r6
 80021b4:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80021b8:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 80021bc:	4f9e      	ldr	r7, [pc, #632]	@ (8002438 <USB_ActivateEndpoint+0x2b4>)
 80021be:	b2a4      	uxth	r4, r4
 80021c0:	403c      	ands	r4, r7
 80021c2:	4314      	orrs	r4, r2
 80021c4:	4334      	orrs	r4, r6
 80021c6:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

  if (ep->doublebuffer == 0U)
 80021ca:	7b0c      	ldrb	r4, [r1, #12]
 80021cc:	eb03 1c02 	add.w	ip, r3, r2, lsl #4
 80021d0:	2c00      	cmp	r4, #0
 80021d2:	f040 808b 	bne.w	80022ec <USB_ActivateEndpoint+0x168>
  {
    if (ep->is_in != 0U)
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80021d6:	88cc      	ldrh	r4, [r1, #6]
    if (ep->is_in != 0U)
 80021d8:	784e      	ldrb	r6, [r1, #1]
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80021da:	0864      	lsrs	r4, r4, #1
 80021dc:	0064      	lsls	r4, r4, #1
    if (ep->is_in != 0U)
 80021de:	b36e      	cbz	r6, 800223c <USB_ActivateEndpoint+0xb8>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80021e0:	f8b3 1050 	ldrh.w	r1, [r3, #80]	@ 0x50
 80021e4:	b289      	uxth	r1, r1
 80021e6:	4461      	add	r1, ip
 80021e8:	f8a1 4400 	strh.w	r4, [r1, #1024]	@ 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80021ec:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80021f0:	0649      	lsls	r1, r1, #25
 80021f2:	d509      	bpl.n	8002208 <USB_ActivateEndpoint+0x84>
 80021f4:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80021f8:	b289      	uxth	r1, r1
 80021fa:	4039      	ands	r1, r7
 80021fc:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8002200:	f041 01c0 	orr.w	r1, r1, #192	@ 0xc0
 8002204:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002208:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800220c:	4c8b      	ldr	r4, [pc, #556]	@ (800243c <USB_ActivateEndpoint+0x2b8>)
 800220e:	b289      	uxth	r1, r1
      if (ep->type != EP_TYPE_ISOC)
 8002210:	2d01      	cmp	r5, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002212:	ea01 0104 	and.w	r1, r1, r4
      if (ep->type != EP_TYPE_ISOC)
 8002216:	d001      	beq.n	800221c <USB_ActivateEndpoint+0x98>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002218:	f081 0120 	eor.w	r1, r1, #32
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800221c:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8002220:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8002224:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
 8002228:	e04a      	b.n	80022c0 <USB_ActivateEndpoint+0x13c>
      wEpRegVal |= USB_EP_INTERRUPT;
 800222a:	f444 64c0 	orr.w	r4, r4, #1536	@ 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 800222e:	2000      	movs	r0, #0
      break;
 8002230:	e7bd      	b.n	80021ae <USB_ActivateEndpoint+0x2a>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002232:	f444 6480 	orr.w	r4, r4, #1024	@ 0x400
      break;
 8002236:	e7fa      	b.n	800222e <USB_ActivateEndpoint+0xaa>
  switch (ep->type)
 8002238:	2001      	movs	r0, #1
 800223a:	e7b8      	b.n	80021ae <USB_ActivateEndpoint+0x2a>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800223c:	f8b3 5050 	ldrh.w	r5, [r3, #80]	@ 0x50
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002240:	6909      	ldr	r1, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002242:	b2ad      	uxth	r5, r5
 8002244:	4465      	add	r5, ip
 8002246:	f8a5 4408 	strh.w	r4, [r5, #1032]	@ 0x408
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800224a:	f8b3 4050 	ldrh.w	r4, [r3, #80]	@ 0x50
 800224e:	293e      	cmp	r1, #62	@ 0x3e
 8002250:	b2a4      	uxth	r4, r4
 8002252:	4464      	add	r4, ip
 8002254:	f8b4 540c 	ldrh.w	r5, [r4, #1036]	@ 0x40c
 8002258:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800225c:	f8a4 540c 	strh.w	r5, [r4, #1036]	@ 0x40c
 8002260:	d92f      	bls.n	80022c2 <USB_ActivateEndpoint+0x13e>
 8002262:	094d      	lsrs	r5, r1, #5
 8002264:	06ce      	lsls	r6, r1, #27
 8002266:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	@ 0x40c
 800226a:	bf08      	it	eq
 800226c:	f105 35ff 	addeq.w	r5, r5, #4294967295
 8002270:	b289      	uxth	r1, r1
 8002272:	ea41 2185 	orr.w	r1, r1, r5, lsl #10
 8002276:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 800227a:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800227e:	b289      	uxth	r1, r1
 8002280:	f8a4 140c 	strh.w	r1, [r4, #1036]	@ 0x40c
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002284:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8002288:	044f      	lsls	r7, r1, #17
 800228a:	d50d      	bpl.n	80022a8 <USB_ActivateEndpoint+0x124>
 800228c:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8002290:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8002294:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8002298:	0409      	lsls	r1, r1, #16
 800229a:	0c09      	lsrs	r1, r1, #16
 800229c:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 80022a0:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 80022a4:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      if (ep->num == 0U)
 80022a8:	4c65      	ldr	r4, [pc, #404]	@ (8002440 <USB_ActivateEndpoint+0x2bc>)
 80022aa:	b9c2      	cbnz	r2, 80022de <USB_ActivateEndpoint+0x15a>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80022ac:	881a      	ldrh	r2, [r3, #0]
 80022ae:	b292      	uxth	r2, r2
 80022b0:	4022      	ands	r2, r4
 80022b2:	f482 5240 	eor.w	r2, r2, #12288	@ 0x3000
 80022b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80022ba:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80022be:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
 80022c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80022c2:	b911      	cbnz	r1, 80022ca <USB_ActivateEndpoint+0x146>
 80022c4:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	@ 0x40c
 80022c8:	e7d5      	b.n	8002276 <USB_ActivateEndpoint+0xf2>
 80022ca:	084d      	lsrs	r5, r1, #1
 80022cc:	07c9      	lsls	r1, r1, #31
 80022ce:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	@ 0x40c
 80022d2:	bf48      	it	mi
 80022d4:	3501      	addmi	r5, #1
 80022d6:	b289      	uxth	r1, r1
 80022d8:	ea41 2185 	orr.w	r1, r1, r5, lsl #10
 80022dc:	e7cf      	b.n	800227e <USB_ActivateEndpoint+0xfa>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80022de:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80022e2:	b289      	uxth	r1, r1
 80022e4:	4021      	ands	r1, r4
 80022e6:	f481 5100 	eor.w	r1, r1, #8192	@ 0x2000
 80022ea:	e797      	b.n	800221c <USB_ActivateEndpoint+0x98>
    if (ep->type == EP_TYPE_BULK)
 80022ec:	2d02      	cmp	r5, #2
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80022ee:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
    if (ep->type == EP_TYPE_BULK)
 80022f2:	d15b      	bne.n	80023ac <USB_ActivateEndpoint+0x228>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80022f4:	b2a4      	uxth	r4, r4
 80022f6:	403c      	ands	r4, r7
 80022f8:	f444 4401 	orr.w	r4, r4, #33024	@ 0x8100
 80022fc:	f044 0480 	orr.w	r4, r4, #128	@ 0x80
 8002300:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8002304:	f8b3 4050 	ldrh.w	r4, [r3, #80]	@ 0x50
 8002308:	890e      	ldrh	r6, [r1, #8]
 800230a:	b2a4      	uxth	r4, r4
 800230c:	0876      	lsrs	r6, r6, #1
 800230e:	4464      	add	r4, ip
 8002310:	0076      	lsls	r6, r6, #1
 8002312:	f8a4 6400 	strh.w	r6, [r4, #1024]	@ 0x400
 8002316:	894e      	ldrh	r6, [r1, #10]
 8002318:	f8b3 4050 	ldrh.w	r4, [r3, #80]	@ 0x50
 800231c:	0876      	lsrs	r6, r6, #1
 800231e:	b2a4      	uxth	r4, r4
 8002320:	4464      	add	r4, ip
 8002322:	0076      	lsls	r6, r6, #1
 8002324:	f8a4 6408 	strh.w	r6, [r4, #1032]	@ 0x408
    if (ep->is_in == 0U)
 8002328:	7849      	ldrb	r1, [r1, #1]
 800232a:	2900      	cmp	r1, #0
 800232c:	d148      	bne.n	80023c0 <USB_ActivateEndpoint+0x23c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800232e:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8002332:	044e      	lsls	r6, r1, #17
 8002334:	d50d      	bpl.n	8002352 <USB_ActivateEndpoint+0x1ce>
 8002336:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800233a:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 800233e:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8002342:	0409      	lsls	r1, r1, #16
 8002344:	0c09      	lsrs	r1, r1, #16
 8002346:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 800234a:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 800234e:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002352:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8002356:	064d      	lsls	r5, r1, #25
 8002358:	d50d      	bpl.n	8002376 <USB_ActivateEndpoint+0x1f2>
 800235a:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800235e:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8002362:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8002366:	0409      	lsls	r1, r1, #16
 8002368:	0c09      	lsrs	r1, r1, #16
 800236a:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 800236e:	f041 01c0 	orr.w	r1, r1, #192	@ 0xc0
 8002372:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002376:	f248 0480 	movw	r4, #32896	@ 0x8080
 800237a:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800237e:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 8002382:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8002386:	0409      	lsls	r1, r1, #16
 8002388:	0c09      	lsrs	r1, r1, #16
 800238a:	f481 5140 	eor.w	r1, r1, #12288	@ 0x3000
 800238e:	4321      	orrs	r1, r4
 8002390:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002394:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8002398:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 800239c:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 80023a0:	0409      	lsls	r1, r1, #16
 80023a2:	0c09      	lsrs	r1, r1, #16
 80023a4:	430c      	orrs	r4, r1
 80023a6:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
 80023aa:	e789      	b.n	80022c0 <USB_ActivateEndpoint+0x13c>
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80023ac:	f424 44e2 	bic.w	r4, r4, #28928	@ 0x7100
 80023b0:	f024 0470 	bic.w	r4, r4, #112	@ 0x70
 80023b4:	0424      	lsls	r4, r4, #16
 80023b6:	0c24      	lsrs	r4, r4, #16
 80023b8:	4326      	orrs	r6, r4
 80023ba:	f823 6022 	strh.w	r6, [r3, r2, lsl #2]
 80023be:	e7a1      	b.n	8002304 <USB_ActivateEndpoint+0x180>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80023c0:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80023c4:	044c      	lsls	r4, r1, #17
 80023c6:	d50d      	bpl.n	80023e4 <USB_ActivateEndpoint+0x260>
 80023c8:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80023cc:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 80023d0:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 80023d4:	0409      	lsls	r1, r1, #16
 80023d6:	0c09      	lsrs	r1, r1, #16
 80023d8:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 80023dc:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 80023e0:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80023e4:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80023e8:	0649      	lsls	r1, r1, #25
 80023ea:	d50d      	bpl.n	8002408 <USB_ActivateEndpoint+0x284>
 80023ec:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80023f0:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 80023f4:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 80023f8:	0409      	lsls	r1, r1, #16
 80023fa:	0c09      	lsrs	r1, r1, #16
 80023fc:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8002400:	f041 01c0 	orr.w	r1, r1, #192	@ 0xc0
 8002404:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002408:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800240c:	4c0b      	ldr	r4, [pc, #44]	@ (800243c <USB_ActivateEndpoint+0x2b8>)
 800240e:	b289      	uxth	r1, r1
 8002410:	4021      	ands	r1, r4
      if (ep->type != EP_TYPE_ISOC)
 8002412:	2d01      	cmp	r5, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002414:	bf18      	it	ne
 8002416:	f081 0120 	eorne.w	r1, r1, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800241a:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 800241e:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8002422:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002426:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800242a:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 800242e:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8002432:	0409      	lsls	r1, r1, #16
 8002434:	0c09      	lsrs	r1, r1, #16
 8002436:	e6f1      	b.n	800221c <USB_ActivateEndpoint+0x98>
 8002438:	ffff8f8f 	.word	0xffff8f8f
 800243c:	ffff8fbf 	.word	0xffff8fbf
 8002440:	ffffbf8f 	.word	0xffffbf8f

08002444 <USB_DeactivateEndpoint>:
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
  {
    if (ep->is_in != 0U)
 8002444:	784a      	ldrb	r2, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002446:	780b      	ldrb	r3, [r1, #0]
  if (ep->doublebuffer == 0U)
 8002448:	7b09      	ldrb	r1, [r1, #12]
 800244a:	bbd9      	cbnz	r1, 80024c4 <USB_DeactivateEndpoint+0x80>
    if (ep->is_in != 0U)
 800244c:	b30a      	cbz	r2, 8002492 <USB_DeactivateEndpoint+0x4e>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800244e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002452:	0651      	lsls	r1, r2, #25
 8002454:	d50d      	bpl.n	8002472 <USB_DeactivateEndpoint+0x2e>
 8002456:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800245a:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 800245e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002462:	0412      	lsls	r2, r2, #16
 8002464:	0c12      	lsrs	r2, r2, #16
 8002466:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800246a:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 800246e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002472:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002476:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 800247a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800247e:	0412      	lsls	r2, r2, #16
 8002480:	0c12      	lsrs	r2, r2, #16
 8002482:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002486:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800248a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 800248e:	2000      	movs	r0, #0
 8002490:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002492:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002496:	0452      	lsls	r2, r2, #17
 8002498:	d50d      	bpl.n	80024b6 <USB_DeactivateEndpoint+0x72>
 800249a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800249e:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 80024a2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80024a6:	0412      	lsls	r2, r2, #16
 80024a8:	0c12      	lsrs	r2, r2, #16
 80024aa:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 80024ae:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80024b2:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80024b6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80024ba:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80024be:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80024c2:	e7dc      	b.n	800247e <USB_DeactivateEndpoint+0x3a>
    if (ep->is_in == 0U)
 80024c4:	2a00      	cmp	r2, #0
 80024c6:	d14a      	bne.n	800255e <USB_DeactivateEndpoint+0x11a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80024c8:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80024cc:	0451      	lsls	r1, r2, #17
 80024ce:	d50d      	bpl.n	80024ec <USB_DeactivateEndpoint+0xa8>
 80024d0:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80024d4:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 80024d8:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80024dc:	0412      	lsls	r2, r2, #16
 80024de:	0c12      	lsrs	r2, r2, #16
 80024e0:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 80024e4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80024e8:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80024ec:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80024f0:	0652      	lsls	r2, r2, #25
 80024f2:	d50d      	bpl.n	8002510 <USB_DeactivateEndpoint+0xcc>
 80024f4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80024f8:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 80024fc:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002500:	0412      	lsls	r2, r2, #16
 8002502:	0c12      	lsrs	r2, r2, #16
 8002504:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002508:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 800250c:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002510:	f248 0180 	movw	r1, #32896	@ 0x8080
      PCD_TX_DTOG(USBx, ep->num);
 8002514:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002518:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 800251c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002520:	0412      	lsls	r2, r2, #16
 8002522:	0c12      	lsrs	r2, r2, #16
 8002524:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002528:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 800252c:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002530:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002534:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002538:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800253c:	0412      	lsls	r2, r2, #16
 800253e:	0c12      	lsrs	r2, r2, #16
 8002540:	430a      	orrs	r2, r1
 8002542:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002546:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800254a:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 800254e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002552:	0412      	lsls	r2, r2, #16
 8002554:	0c12      	lsrs	r2, r2, #16
 8002556:	4311      	orrs	r1, r2
 8002558:	f820 1023 	strh.w	r1, [r0, r3, lsl #2]
 800255c:	e797      	b.n	800248e <USB_DeactivateEndpoint+0x4a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800255e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002562:	0451      	lsls	r1, r2, #17
 8002564:	d50d      	bpl.n	8002582 <USB_DeactivateEndpoint+0x13e>
 8002566:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800256a:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 800256e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002572:	0412      	lsls	r2, r2, #16
 8002574:	0c12      	lsrs	r2, r2, #16
 8002576:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 800257a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800257e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002582:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002586:	0652      	lsls	r2, r2, #25
 8002588:	d50d      	bpl.n	80025a6 <USB_DeactivateEndpoint+0x162>
 800258a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800258e:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8002592:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002596:	0412      	lsls	r2, r2, #16
 8002598:	0c12      	lsrs	r2, r2, #16
 800259a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800259e:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 80025a2:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80025a6:	f248 0180 	movw	r1, #32896	@ 0x8080
      PCD_RX_DTOG(USBx, ep->num);
 80025aa:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80025ae:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 80025b2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80025b6:	0412      	lsls	r2, r2, #16
 80025b8:	0c12      	lsrs	r2, r2, #16
 80025ba:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 80025be:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80025c2:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80025c6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80025ca:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 80025ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80025d2:	0412      	lsls	r2, r2, #16
 80025d4:	0c12      	lsrs	r2, r2, #16
 80025d6:	430a      	orrs	r2, r1
 80025d8:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80025dc:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80025e0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80025e4:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80025e8:	e7b3      	b.n	8002552 <USB_DeactivateEndpoint+0x10e>

080025ea <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 80025ea:	784b      	ldrb	r3, [r1, #1]
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80025ec:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 80025ee:	b18b      	cbz	r3, 8002614 <USB_EPSetStall+0x2a>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80025f0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80025f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80025f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80025fc:	041b      	lsls	r3, r3, #16
 80025fe:	0c1b      	lsrs	r3, r3, #16
 8002600:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8002604:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002608:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800260c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 8002610:	2000      	movs	r0, #0
 8002612:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8002614:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002618:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800261c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002620:	041b      	lsls	r3, r3, #16
 8002622:	0c1b      	lsrs	r3, r3, #16
 8002624:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8002628:	e7ec      	b.n	8002604 <USB_EPSetStall+0x1a>

0800262a <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 800262a:	7b0b      	ldrb	r3, [r1, #12]
 800262c:	bb3b      	cbnz	r3, 800267e <USB_EPClearStall+0x54>
  {
    if (ep->is_in != 0U)
 800262e:	784b      	ldrb	r3, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002630:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in != 0U)
 8002632:	b333      	cbz	r3, 8002682 <USB_EPClearStall+0x58>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002634:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002638:	065b      	lsls	r3, r3, #25
 800263a:	d50d      	bpl.n	8002658 <USB_EPClearStall+0x2e>
 800263c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002640:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002644:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002648:	041b      	lsls	r3, r3, #16
 800264a:	0c1b      	lsrs	r3, r3, #16
 800264c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002650:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002654:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8002658:	78cb      	ldrb	r3, [r1, #3]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d00f      	beq.n	800267e <USB_EPClearStall+0x54>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800265e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002662:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002666:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800266a:	041b      	lsls	r3, r3, #16
 800266c:	0c1b      	lsrs	r3, r3, #16
 800266e:	f083 0320 	eor.w	r3, r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002672:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002676:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800267a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 800267e:	2000      	movs	r0, #0
 8002680:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002682:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002686:	045b      	lsls	r3, r3, #17
 8002688:	d50d      	bpl.n	80026a6 <USB_EPClearStall+0x7c>
 800268a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800268e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002692:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002696:	041b      	lsls	r3, r3, #16
 8002698:	0c1b      	lsrs	r3, r3, #16
 800269a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800269e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026a2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80026a6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80026aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80026ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026b2:	041b      	lsls	r3, r3, #16
 80026b4:	0c1b      	lsrs	r3, r3, #16
 80026b6:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 80026ba:	e7da      	b.n	8002672 <USB_EPClearStall+0x48>

080026bc <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 80026bc:	b911      	cbnz	r1, 80026c4 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80026be:	2380      	movs	r3, #128	@ 0x80
 80026c0:	f8a0 304c 	strh.w	r3, [r0, #76]	@ 0x4c
  }

  return HAL_OK;
}
 80026c4:	2000      	movs	r0, #0
 80026c6:	4770      	bx	lr

080026c8 <USB_DevConnect>:
/**
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
 80026c8:	2000      	movs	r0, #0
 80026ca:	4770      	bx	lr

080026cc <USB_DevDisconnect>:
/**
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
 80026cc:	2000      	movs	r0, #0
 80026ce:	4770      	bx	lr

080026d0 <USB_ReadInterrupts>:
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80026d0:	f8b0 0044 	ldrh.w	r0, [r0, #68]	@ 0x44
  return tmpreg;
}
 80026d4:	b280      	uxth	r0, r0
 80026d6:	4770      	bx	lr

080026d8 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80026d8:	2000      	movs	r0, #0
 80026da:	4770      	bx	lr

080026dc <USB_WritePMA>:
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80026dc:	eb00 0042 	add.w	r0, r0, r2, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80026e0:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80026e2:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80026e6:	085b      	lsrs	r3, r3, #1
 80026e8:	eb00 0383 	add.w	r3, r0, r3, lsl #2

  for (count = n; count != 0U; count--)
 80026ec:	4283      	cmp	r3, r0
 80026ee:	d100      	bne.n	80026f2 <USB_WritePMA+0x16>
#endif /* PMA_ACCESS */

    pBuf++;
    pBuf++;
  }
}
 80026f0:	4770      	bx	lr
    WrVal |= (uint16_t)pBuf[1] << 8;
 80026f2:	f831 2b02 	ldrh.w	r2, [r1], #2
    *pdwVal = (WrVal & 0xFFFFU);
 80026f6:	f820 2b04 	strh.w	r2, [r0], #4
  for (count = n; count != 0U; count--)
 80026fa:	e7f7      	b.n	80026ec <USB_WritePMA+0x10>

080026fc <USB_EPStartXfer>:
{
 80026fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (ep->is_in == 1U)
 8002700:	784b      	ldrb	r3, [r1, #1]
{
 8002702:	4604      	mov	r4, r0
  if (ep->is_in == 1U)
 8002704:	2b01      	cmp	r3, #1
{
 8002706:	460d      	mov	r5, r1
    if (ep->doublebuffer == 0U)
 8002708:	7b0a      	ldrb	r2, [r1, #12]
  if (ep->is_in == 1U)
 800270a:	f040 8118 	bne.w	800293e <USB_EPStartXfer+0x242>
    if (ep->xfer_len > ep->maxpacket)
 800270e:	f8d1 9010 	ldr.w	r9, [r1, #16]
 8002712:	698f      	ldr	r7, [r1, #24]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8002714:	6949      	ldr	r1, [r1, #20]
 8002716:	454f      	cmp	r7, r9
 8002718:	bf28      	it	cs
 800271a:	464f      	movcs	r7, r9
    if (ep->doublebuffer == 0U)
 800271c:	bb0a      	cbnz	r2, 8002762 <USB_EPStartXfer+0x66>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800271e:	b2bf      	uxth	r7, r7
 8002720:	88ea      	ldrh	r2, [r5, #6]
 8002722:	463b      	mov	r3, r7
 8002724:	f7ff ffda 	bl	80026dc <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8002728:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 800272c:	7829      	ldrb	r1, [r5, #0]
 800272e:	b280      	uxth	r0, r0
 8002730:	f204 4204 	addw	r2, r4, #1028	@ 0x404
 8002734:	0109      	lsls	r1, r1, #4
 8002736:	4402      	add	r2, r0
 8002738:	528f      	strh	r7, [r1, r2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800273a:	782a      	ldrb	r2, [r5, #0]
 800273c:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8002740:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002744:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002748:	041b      	lsls	r3, r3, #16
 800274a:	0c1b      	lsrs	r3, r3, #16
 800274c:	f083 0330 	eor.w	r3, r3, #48	@ 0x30
  return HAL_OK;
 8002750:	2000      	movs	r0, #0
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8002752:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002756:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800275a:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
}
 800275e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (ep->type == EP_TYPE_BULK)
 8002762:	78eb      	ldrb	r3, [r5, #3]
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8002764:	f895 e000 	ldrb.w	lr, [r5]
      if (ep->type == EP_TYPE_BULK)
 8002768:	2b02      	cmp	r3, #2
        if (ep->xfer_len_db > ep->maxpacket)
 800276a:	6a2e      	ldr	r6, [r5, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800276c:	ea4f 1c0e 	mov.w	ip, lr, lsl #4
      if (ep->type == EP_TYPE_BULK)
 8002770:	f040 80d0 	bne.w	8002914 <USB_EPStartXfer+0x218>
        if (ep->xfer_len_db > ep->maxpacket)
 8002774:	45b1      	cmp	r9, r6
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8002776:	f830 202e 	ldrh.w	r2, [r0, lr, lsl #2]
        if (ep->xfer_len_db > ep->maxpacket)
 800277a:	f080 80b4 	bcs.w	80028e6 <USB_EPStartXfer+0x1ea>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800277e:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8002782:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002786:	0412      	lsls	r2, r2, #16
 8002788:	0c12      	lsrs	r2, r2, #16
 800278a:	f442 4201 	orr.w	r2, r2, #33024	@ 0x8100
 800278e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002792:	f820 202e 	strh.w	r2, [r0, lr, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002796:	f830 802e 	ldrh.w	r8, [r0, lr, lsl #2]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800279a:	f8b0 e050 	ldrh.w	lr, [r0, #80]	@ 0x50
          ep->xfer_len_db -= len;
 800279e:	1bf6      	subs	r6, r6, r7
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80027a0:	f018 0840 	ands.w	r8, r8, #64	@ 0x40
          ep->xfer_len_db -= len;
 80027a4:	622e      	str	r6, [r5, #32]
            ep->xfer_buff += len;
 80027a6:	eb01 0a07 	add.w	sl, r1, r7
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80027aa:	b2bb      	uxth	r3, r7
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80027ac:	fa1f fe8e 	uxth.w	lr, lr
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80027b0:	d04e      	beq.n	8002850 <USB_EPStartXfer+0x154>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80027b2:	f200 420c 	addw	r2, r0, #1036	@ 0x40c
 80027b6:	4472      	add	r2, lr
 80027b8:	f822 300c 	strh.w	r3, [r2, ip]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80027bc:	896a      	ldrh	r2, [r5, #10]
 80027be:	f7ff ff8d 	bl	80026dc <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 80027c2:	45b1      	cmp	r9, r6
              ep->xfer_len_db -= len;
 80027c4:	bf36      	itet	cc
 80027c6:	1bf3      	subcc	r3, r6, r7
              ep->xfer_len_db = 0U;
 80027c8:	2300      	movcs	r3, #0
 80027ca:	463e      	movcc	r6, r7
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80027cc:	786a      	ldrb	r2, [r5, #1]
 80027ce:	622b      	str	r3, [r5, #32]
            ep->xfer_buff += len;
 80027d0:	f8c5 a014 	str.w	sl, [r5, #20]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80027d4:	b2b3      	uxth	r3, r6
 80027d6:	bb7a      	cbnz	r2, 8002838 <USB_EPStartXfer+0x13c>
 80027d8:	f8b4 2050 	ldrh.w	r2, [r4, #80]	@ 0x50
 80027dc:	7828      	ldrb	r0, [r5, #0]
 80027de:	b292      	uxth	r2, r2
 80027e0:	f204 4104 	addw	r1, r4, #1028	@ 0x404
 80027e4:	0100      	lsls	r0, r0, #4
 80027e6:	4411      	add	r1, r2
 80027e8:	5a42      	ldrh	r2, [r0, r1]
 80027ea:	2e3e      	cmp	r6, #62	@ 0x3e
 80027ec:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80027f0:	5242      	strh	r2, [r0, r1]
 80027f2:	d914      	bls.n	800281e <USB_EPStartXfer+0x122>
 80027f4:	5a42      	ldrh	r2, [r0, r1]
 80027f6:	0977      	lsrs	r7, r6, #5
 80027f8:	06f6      	lsls	r6, r6, #27
 80027fa:	bf08      	it	eq
 80027fc:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8002800:	b292      	uxth	r2, r2
 8002802:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 8002806:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800280a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800280e:	b292      	uxth	r2, r2
 8002810:	5242      	strh	r2, [r0, r1]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002812:	892a      	ldrh	r2, [r5, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002814:	4651      	mov	r1, sl
 8002816:	4620      	mov	r0, r4
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002818:	f7ff ff60 	bl	80026dc <USB_WritePMA>
 800281c:	e78d      	b.n	800273a <USB_EPStartXfer+0x3e>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800281e:	b90e      	cbnz	r6, 8002824 <USB_EPStartXfer+0x128>
 8002820:	5a42      	ldrh	r2, [r0, r1]
 8002822:	e7f0      	b.n	8002806 <USB_EPStartXfer+0x10a>
 8002824:	07f2      	lsls	r2, r6, #31
 8002826:	5a42      	ldrh	r2, [r0, r1]
 8002828:	ea4f 0756 	mov.w	r7, r6, lsr #1
 800282c:	bf48      	it	mi
 800282e:	3701      	addmi	r7, #1
 8002830:	b292      	uxth	r2, r2
 8002832:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 8002836:	e7ea      	b.n	800280e <USB_EPStartXfer+0x112>
 8002838:	2a01      	cmp	r2, #1
 800283a:	d1ea      	bne.n	8002812 <USB_EPStartXfer+0x116>
 800283c:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 8002840:	7829      	ldrb	r1, [r5, #0]
 8002842:	b280      	uxth	r0, r0
 8002844:	f204 4204 	addw	r2, r4, #1028	@ 0x404
 8002848:	0109      	lsls	r1, r1, #4
 800284a:	4402      	add	r2, r0
 800284c:	528b      	strh	r3, [r1, r2]
 800284e:	e7e0      	b.n	8002812 <USB_EPStartXfer+0x116>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002850:	f200 4204 	addw	r2, r0, #1028	@ 0x404
 8002854:	4472      	add	r2, lr
 8002856:	f822 300c 	strh.w	r3, [r2, ip]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800285a:	892a      	ldrh	r2, [r5, #8]
 800285c:	f7ff ff3e 	bl	80026dc <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 8002860:	45b1      	cmp	r9, r6
              ep->xfer_len_db -= len;
 8002862:	bf36      	itet	cc
 8002864:	1bf3      	subcc	r3, r6, r7
              ep->xfer_len_db = 0U;
 8002866:	4643      	movcs	r3, r8
 8002868:	463e      	movcc	r6, r7
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800286a:	786a      	ldrb	r2, [r5, #1]
 800286c:	622b      	str	r3, [r5, #32]
            ep->xfer_buff += len;
 800286e:	f8c5 a014 	str.w	sl, [r5, #20]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002872:	b2b3      	uxth	r3, r6
 8002874:	bb5a      	cbnz	r2, 80028ce <USB_EPStartXfer+0x1d2>
 8002876:	f8b4 2050 	ldrh.w	r2, [r4, #80]	@ 0x50
 800287a:	7828      	ldrb	r0, [r5, #0]
 800287c:	b292      	uxth	r2, r2
 800287e:	f204 410c 	addw	r1, r4, #1036	@ 0x40c
 8002882:	0100      	lsls	r0, r0, #4
 8002884:	4411      	add	r1, r2
 8002886:	5a42      	ldrh	r2, [r0, r1]
 8002888:	2e3e      	cmp	r6, #62	@ 0x3e
 800288a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800288e:	5242      	strh	r2, [r0, r1]
 8002890:	d910      	bls.n	80028b4 <USB_EPStartXfer+0x1b8>
 8002892:	5a42      	ldrh	r2, [r0, r1]
 8002894:	0977      	lsrs	r7, r6, #5
 8002896:	06f6      	lsls	r6, r6, #27
 8002898:	bf08      	it	eq
 800289a:	f107 37ff 	addeq.w	r7, r7, #4294967295
 800289e:	b292      	uxth	r2, r2
 80028a0:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 80028a4:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80028a8:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80028ac:	b292      	uxth	r2, r2
 80028ae:	5242      	strh	r2, [r0, r1]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80028b0:	896a      	ldrh	r2, [r5, #10]
 80028b2:	e7af      	b.n	8002814 <USB_EPStartXfer+0x118>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80028b4:	b90e      	cbnz	r6, 80028ba <USB_EPStartXfer+0x1be>
 80028b6:	5a42      	ldrh	r2, [r0, r1]
 80028b8:	e7f4      	b.n	80028a4 <USB_EPStartXfer+0x1a8>
 80028ba:	07f2      	lsls	r2, r6, #31
 80028bc:	5a42      	ldrh	r2, [r0, r1]
 80028be:	ea4f 0756 	mov.w	r7, r6, lsr #1
 80028c2:	bf48      	it	mi
 80028c4:	3701      	addmi	r7, #1
 80028c6:	b292      	uxth	r2, r2
 80028c8:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 80028cc:	e7ee      	b.n	80028ac <USB_EPStartXfer+0x1b0>
 80028ce:	2a01      	cmp	r2, #1
 80028d0:	d1ee      	bne.n	80028b0 <USB_EPStartXfer+0x1b4>
 80028d2:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 80028d6:	7829      	ldrb	r1, [r5, #0]
 80028d8:	b280      	uxth	r0, r0
 80028da:	f204 420c 	addw	r2, r4, #1036	@ 0x40c
 80028de:	0109      	lsls	r1, r1, #4
 80028e0:	4402      	add	r2, r0
 80028e2:	528b      	strh	r3, [r1, r2]
 80028e4:	e7e4      	b.n	80028b0 <USB_EPStartXfer+0x1b4>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80028e6:	f422 42e2 	bic.w	r2, r2, #28928	@ 0x7100
 80028ea:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80028ee:	0412      	lsls	r2, r2, #16
 80028f0:	0c12      	lsrs	r2, r2, #16
 80028f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80028f6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80028fa:	f820 202e 	strh.w	r2, [r0, lr, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80028fe:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8002902:	f200 4204 	addw	r2, r0, #1028	@ 0x404
 8002906:	b29b      	uxth	r3, r3
 8002908:	441a      	add	r2, r3
 800290a:	b2b3      	uxth	r3, r6
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800290c:	f822 300c 	strh.w	r3, [r2, ip]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002910:	892a      	ldrh	r2, [r5, #8]
 8002912:	e781      	b.n	8002818 <USB_EPStartXfer+0x11c>
        ep->xfer_len_db -= len;
 8002914:	1bf6      	subs	r6, r6, r7
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002916:	f830 202e 	ldrh.w	r2, [r0, lr, lsl #2]
        ep->xfer_len_db -= len;
 800291a:	622e      	str	r6, [r5, #32]
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800291c:	f8b0 6050 	ldrh.w	r6, [r0, #80]	@ 0x50
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8002920:	b2bb      	uxth	r3, r7
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002922:	0657      	lsls	r7, r2, #25
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002924:	b2b6      	uxth	r6, r6
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002926:	d506      	bpl.n	8002936 <USB_EPStartXfer+0x23a>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002928:	f200 420c 	addw	r2, r0, #1036	@ 0x40c
 800292c:	4432      	add	r2, r6
 800292e:	f822 300c 	strh.w	r3, [r2, ip]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002932:	896a      	ldrh	r2, [r5, #10]
 8002934:	e770      	b.n	8002818 <USB_EPStartXfer+0x11c>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002936:	f200 4204 	addw	r2, r0, #1028	@ 0x404
 800293a:	4432      	add	r2, r6
 800293c:	e7e6      	b.n	800290c <USB_EPStartXfer+0x210>
    if (ep->doublebuffer == 0U)
 800293e:	2a00      	cmp	r2, #0
 8002940:	d13b      	bne.n	80029ba <USB_EPStartXfer+0x2be>
      if (ep->xfer_len > ep->maxpacket)
 8002942:	698b      	ldr	r3, [r1, #24]
 8002944:	6909      	ldr	r1, [r1, #16]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8002946:	f8b0 0050 	ldrh.w	r0, [r0, #80]	@ 0x50
      if (ep->xfer_len > ep->maxpacket)
 800294a:	428b      	cmp	r3, r1
        ep->xfer_len -= len;
 800294c:	bf84      	itt	hi
 800294e:	1a5a      	subhi	r2, r3, r1
 8002950:	460b      	movhi	r3, r1
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8002952:	7829      	ldrb	r1, [r5, #0]
 8002954:	61aa      	str	r2, [r5, #24]
 8002956:	b280      	uxth	r0, r0
 8002958:	f204 420c 	addw	r2, r4, #1036	@ 0x40c
 800295c:	0109      	lsls	r1, r1, #4
 800295e:	4402      	add	r2, r0
 8002960:	5a88      	ldrh	r0, [r1, r2]
 8002962:	2b3e      	cmp	r3, #62	@ 0x3e
 8002964:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8002968:	5288      	strh	r0, [r1, r2]
 800296a:	d91a      	bls.n	80029a2 <USB_EPStartXfer+0x2a6>
 800296c:	0958      	lsrs	r0, r3, #5
 800296e:	06de      	lsls	r6, r3, #27
 8002970:	5a8b      	ldrh	r3, [r1, r2]
 8002972:	bf08      	it	eq
 8002974:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8002978:	b29b      	uxth	r3, r3
 800297a:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 800297e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002982:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002986:	b29b      	uxth	r3, r3
 8002988:	528b      	strh	r3, [r1, r2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800298a:	782a      	ldrb	r2, [r5, #0]
 800298c:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8002990:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002994:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002998:	041b      	lsls	r3, r3, #16
 800299a:	0c1b      	lsrs	r3, r3, #16
 800299c:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 80029a0:	e6d6      	b.n	8002750 <USB_EPStartXfer+0x54>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80029a2:	b90b      	cbnz	r3, 80029a8 <USB_EPStartXfer+0x2ac>
 80029a4:	5a8b      	ldrh	r3, [r1, r2]
 80029a6:	e7ea      	b.n	800297e <USB_EPStartXfer+0x282>
 80029a8:	0858      	lsrs	r0, r3, #1
 80029aa:	07db      	lsls	r3, r3, #31
 80029ac:	5a8b      	ldrh	r3, [r1, r2]
 80029ae:	bf48      	it	mi
 80029b0:	3001      	addmi	r0, #1
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 80029b8:	e7e5      	b.n	8002986 <USB_EPStartXfer+0x28a>
      if (ep->type == EP_TYPE_BULK)
 80029ba:	78ca      	ldrb	r2, [r1, #3]
 80029bc:	2a02      	cmp	r2, #2
 80029be:	d170      	bne.n	8002aa2 <USB_EPStartXfer+0x3a6>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d138      	bne.n	8002a36 <USB_EPStartXfer+0x33a>
 80029c4:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 80029c8:	780b      	ldrb	r3, [r1, #0]
 80029ca:	b292      	uxth	r2, r2
 80029cc:	f200 4004 	addw	r0, r0, #1028	@ 0x404
 80029d0:	011b      	lsls	r3, r3, #4
 80029d2:	4410      	add	r0, r2
 80029d4:	5ac2      	ldrh	r2, [r0, r3]
 80029d6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80029da:	52c2      	strh	r2, [r0, r3]
 80029dc:	690a      	ldr	r2, [r1, #16]
 80029de:	2a3e      	cmp	r2, #62	@ 0x3e
 80029e0:	d946      	bls.n	8002a70 <USB_EPStartXfer+0x374>
 80029e2:	5ac1      	ldrh	r1, [r0, r3]
 80029e4:	0956      	lsrs	r6, r2, #5
 80029e6:	06d7      	lsls	r7, r2, #27
 80029e8:	bf08      	it	eq
 80029ea:	f106 36ff 	addeq.w	r6, r6, #4294967295
 80029ee:	b289      	uxth	r1, r1
 80029f0:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 80029f4:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80029f8:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80029fc:	b289      	uxth	r1, r1
 80029fe:	52c1      	strh	r1, [r0, r3]
 8002a00:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 8002a04:	f204 410c 	addw	r1, r4, #1036	@ 0x40c
 8002a08:	b280      	uxth	r0, r0
 8002a0a:	4401      	add	r1, r0
 8002a0c:	5ac8      	ldrh	r0, [r1, r3]
 8002a0e:	2a3e      	cmp	r2, #62	@ 0x3e
 8002a10:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8002a14:	52c8      	strh	r0, [r1, r3]
 8002a16:	d938      	bls.n	8002a8a <USB_EPStartXfer+0x38e>
 8002a18:	0950      	lsrs	r0, r2, #5
 8002a1a:	06d7      	lsls	r7, r2, #27
 8002a1c:	5aca      	ldrh	r2, [r1, r3]
 8002a1e:	bf08      	it	eq
 8002a20:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8002a24:	b292      	uxth	r2, r2
 8002a26:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 8002a2a:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002a2e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002a32:	b292      	uxth	r2, r2
 8002a34:	52ca      	strh	r2, [r1, r3]
        if (ep->xfer_count != 0U)
 8002a36:	69eb      	ldr	r3, [r5, #28]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d0a6      	beq.n	800298a <USB_EPStartXfer+0x28e>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8002a3c:	f244 0340 	movw	r3, #16448	@ 0x4040
 8002a40:	782a      	ldrb	r2, [r5, #0]
 8002a42:	f834 1022 	ldrh.w	r1, [r4, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8002a46:	ea03 0001 	and.w	r0, r3, r1
 8002a4a:	438b      	bics	r3, r1
 8002a4c:	d001      	beq.n	8002a52 <USB_EPStartXfer+0x356>
 8002a4e:	2800      	cmp	r0, #0
 8002a50:	d19b      	bne.n	800298a <USB_EPStartXfer+0x28e>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8002a52:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8002a56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002a5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a5e:	041b      	lsls	r3, r3, #16
 8002a60:	0c1b      	lsrs	r3, r3, #16
 8002a62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a66:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002a6a:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
 8002a6e:	e78c      	b.n	800298a <USB_EPStartXfer+0x28e>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8002a70:	b90a      	cbnz	r2, 8002a76 <USB_EPStartXfer+0x37a>
 8002a72:	5ac1      	ldrh	r1, [r0, r3]
 8002a74:	e7be      	b.n	80029f4 <USB_EPStartXfer+0x2f8>
 8002a76:	07d1      	lsls	r1, r2, #31
 8002a78:	5ac1      	ldrh	r1, [r0, r3]
 8002a7a:	ea4f 0652 	mov.w	r6, r2, lsr #1
 8002a7e:	bf48      	it	mi
 8002a80:	3601      	addmi	r6, #1
 8002a82:	b289      	uxth	r1, r1
 8002a84:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8002a88:	e7b8      	b.n	80029fc <USB_EPStartXfer+0x300>
 8002a8a:	b90a      	cbnz	r2, 8002a90 <USB_EPStartXfer+0x394>
 8002a8c:	5aca      	ldrh	r2, [r1, r3]
 8002a8e:	e7cc      	b.n	8002a2a <USB_EPStartXfer+0x32e>
 8002a90:	0850      	lsrs	r0, r2, #1
 8002a92:	07d6      	lsls	r6, r2, #31
 8002a94:	5aca      	ldrh	r2, [r1, r3]
 8002a96:	bf48      	it	mi
 8002a98:	3001      	addmi	r0, #1
 8002a9a:	b292      	uxth	r2, r2
 8002a9c:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 8002aa0:	e7c7      	b.n	8002a32 <USB_EPStartXfer+0x336>
      else if (ep->type == EP_TYPE_ISOC)
 8002aa2:	2a01      	cmp	r2, #1
 8002aa4:	d15d      	bne.n	8002b62 <USB_EPStartXfer+0x466>
        if (ep->xfer_len > ep->maxpacket)
 8002aa6:	698a      	ldr	r2, [r1, #24]
 8002aa8:	6909      	ldr	r1, [r1, #16]
 8002aaa:	428a      	cmp	r2, r1
          ep->xfer_len = 0U;
 8002aac:	bf94      	ite	ls
 8002aae:	2000      	movls	r0, #0
          ep->xfer_len -= len;
 8002ab0:	1a50      	subhi	r0, r2, r1
 8002ab2:	61a8      	str	r0, [r5, #24]
 8002ab4:	bf88      	it	hi
 8002ab6:	460a      	movhi	r2, r1
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	f47f af66 	bne.w	800298a <USB_EPStartXfer+0x28e>
 8002abe:	f8b4 1050 	ldrh.w	r1, [r4, #80]	@ 0x50
 8002ac2:	782b      	ldrb	r3, [r5, #0]
 8002ac4:	b289      	uxth	r1, r1
 8002ac6:	f204 4004 	addw	r0, r4, #1028	@ 0x404
 8002aca:	011b      	lsls	r3, r3, #4
 8002acc:	4408      	add	r0, r1
 8002ace:	5ac1      	ldrh	r1, [r0, r3]
 8002ad0:	2a3e      	cmp	r2, #62	@ 0x3e
 8002ad2:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8002ad6:	52c1      	strh	r1, [r0, r3]
 8002ad8:	d92b      	bls.n	8002b32 <USB_EPStartXfer+0x436>
 8002ada:	06d1      	lsls	r1, r2, #27
 8002adc:	5ac1      	ldrh	r1, [r0, r3]
 8002ade:	ea4f 1652 	mov.w	r6, r2, lsr #5
 8002ae2:	bf08      	it	eq
 8002ae4:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8002ae8:	b289      	uxth	r1, r1
 8002aea:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8002aee:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8002af2:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8002af6:	b289      	uxth	r1, r1
 8002af8:	52c1      	strh	r1, [r0, r3]
 8002afa:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 8002afe:	f204 410c 	addw	r1, r4, #1036	@ 0x40c
 8002b02:	b280      	uxth	r0, r0
 8002b04:	4401      	add	r1, r0
 8002b06:	5ac8      	ldrh	r0, [r1, r3]
 8002b08:	2a3e      	cmp	r2, #62	@ 0x3e
 8002b0a:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8002b0e:	52c8      	strh	r0, [r1, r3]
 8002b10:	d91b      	bls.n	8002b4a <USB_EPStartXfer+0x44e>
 8002b12:	0950      	lsrs	r0, r2, #5
 8002b14:	06d6      	lsls	r6, r2, #27
 8002b16:	5aca      	ldrh	r2, [r1, r3]
 8002b18:	bf08      	it	eq
 8002b1a:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8002b1e:	b292      	uxth	r2, r2
 8002b20:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 8002b24:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002b28:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002b2c:	b292      	uxth	r2, r2
 8002b2e:	52ca      	strh	r2, [r1, r3]
 8002b30:	e72b      	b.n	800298a <USB_EPStartXfer+0x28e>
 8002b32:	b90a      	cbnz	r2, 8002b38 <USB_EPStartXfer+0x43c>
 8002b34:	5ac1      	ldrh	r1, [r0, r3]
 8002b36:	e7da      	b.n	8002aee <USB_EPStartXfer+0x3f2>
 8002b38:	5ac1      	ldrh	r1, [r0, r3]
 8002b3a:	0856      	lsrs	r6, r2, #1
 8002b3c:	07d7      	lsls	r7, r2, #31
 8002b3e:	bf48      	it	mi
 8002b40:	3601      	addmi	r6, #1
 8002b42:	b289      	uxth	r1, r1
 8002b44:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8002b48:	e7d5      	b.n	8002af6 <USB_EPStartXfer+0x3fa>
 8002b4a:	b90a      	cbnz	r2, 8002b50 <USB_EPStartXfer+0x454>
 8002b4c:	5aca      	ldrh	r2, [r1, r3]
 8002b4e:	e7e9      	b.n	8002b24 <USB_EPStartXfer+0x428>
 8002b50:	0850      	lsrs	r0, r2, #1
 8002b52:	07d2      	lsls	r2, r2, #31
 8002b54:	5aca      	ldrh	r2, [r1, r3]
 8002b56:	bf48      	it	mi
 8002b58:	3001      	addmi	r0, #1
 8002b5a:	b292      	uxth	r2, r2
 8002b5c:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 8002b60:	e7e4      	b.n	8002b2c <USB_EPStartXfer+0x430>
        return HAL_ERROR;
 8002b62:	2001      	movs	r0, #1
 8002b64:	e5fb      	b.n	800275e <USB_EPStartXfer+0x62>

08002b66 <USB_ReadPMA>:
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002b66:	eb00 0042 	add.w	r0, r0, r2, lsl #1
{
 8002b6a:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002b6c:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
  uint32_t n = (uint32_t)wNBytes >> 1;
 8002b70:	085d      	lsrs	r5, r3, #1

  for (count = n; count != 0U; count--)
 8002b72:	460c      	mov	r4, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002b74:	4607      	mov	r7, r0
  for (count = n; count != 0U; count--)
 8002b76:	462e      	mov	r6, r5
 8002b78:	3402      	adds	r4, #2
 8002b7a:	b936      	cbnz	r6, 8002b8a <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8002b7c:	07db      	lsls	r3, r3, #31
  {
    RdVal = *pdwVal;
 8002b7e:	bf44      	itt	mi
 8002b80:	f830 3025 	ldrhmi.w	r3, [r0, r5, lsl #2]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8002b84:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
  }
}
 8002b88:	bdf0      	pop	{r4, r5, r6, r7, pc}
    RdVal = *(__IO uint16_t *)pdwVal;
 8002b8a:	f837 2b04 	ldrh.w	r2, [r7], #4
  for (count = n; count != 0U; count--)
 8002b8e:	3e01      	subs	r6, #1
    RdVal = *(__IO uint16_t *)pdwVal;
 8002b90:	b292      	uxth	r2, r2
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8002b92:	f804 2c02 	strb.w	r2, [r4, #-2]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8002b96:	0a12      	lsrs	r2, r2, #8
 8002b98:	f804 2c01 	strb.w	r2, [r4, #-1]
  for (count = n; count != 0U; count--)
 8002b9c:	e7ec      	b.n	8002b78 <USB_ReadPMA+0x12>

08002b9e <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8002b9e:	f8d0 32bc 	ldr.w	r3, [r0, #700]	@ 0x2bc
{
 8002ba2:	b510      	push	{r4, lr}
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8002ba4:	b16b      	cbz	r3, 8002bc2 <USBD_CDC_EP0_RxReady+0x24>
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8002ba6:	f8d0 42b8 	ldr.w	r4, [r0, #696]	@ 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8002baa:	f894 0200 	ldrb.w	r0, [r4, #512]	@ 0x200
 8002bae:	28ff      	cmp	r0, #255	@ 0xff
 8002bb0:	d007      	beq.n	8002bc2 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	4621      	mov	r1, r4
 8002bb6:	f894 2201 	ldrb.w	r2, [r4, #513]	@ 0x201
 8002bba:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8002bbc:	23ff      	movs	r3, #255	@ 0xff
 8002bbe:	f884 3200 	strb.w	r3, [r4, #512]	@ 0x200

  }
  return USBD_OK;
}
 8002bc2:	2000      	movs	r0, #0
 8002bc4:	bd10      	pop	{r4, pc}
	...

08002bc8 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8002bc8:	2343      	movs	r3, #67	@ 0x43
 8002bca:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8002bcc:	4800      	ldr	r0, [pc, #0]	@ (8002bd0 <USBD_CDC_GetFSCfgDesc+0x8>)
 8002bce:	4770      	bx	lr
 8002bd0:	2000005c 	.word	0x2000005c

08002bd4 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8002bd4:	2343      	movs	r3, #67	@ 0x43
 8002bd6:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8002bd8:	4800      	ldr	r0, [pc, #0]	@ (8002bdc <USBD_CDC_GetHSCfgDesc+0x8>)
 8002bda:	4770      	bx	lr
 8002bdc:	200000a0 	.word	0x200000a0

08002be0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8002be0:	2343      	movs	r3, #67	@ 0x43
 8002be2:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8002be4:	4800      	ldr	r0, [pc, #0]	@ (8002be8 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8002be6:	4770      	bx	lr
 8002be8:	20000018 	.word	0x20000018

08002bec <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8002bec:	230a      	movs	r3, #10
 8002bee:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8002bf0:	4800      	ldr	r0, [pc, #0]	@ (8002bf4 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8002bf2:	4770      	bx	lr
 8002bf4:	2000011c 	.word	0x2000011c

08002bf8 <USBD_CDC_DataOut>:
{
 8002bf8:	b538      	push	{r3, r4, r5, lr}
 8002bfa:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8002bfc:	f8d0 52b8 	ldr.w	r5, [r0, #696]	@ 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8002c00:	f000 fe9a 	bl	8003938 <USBD_LL_GetRxDataSize>
  if (pdev->pClassData != NULL)
 8002c04:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8002c08:	f8c5 020c 	str.w	r0, [r5, #524]	@ 0x20c
  if (pdev->pClassData != NULL)
 8002c0c:	b14b      	cbz	r3, 8002c22 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8002c0e:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
 8002c12:	f8d5 0204 	ldr.w	r0, [r5, #516]	@ 0x204
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	f505 7103 	add.w	r1, r5, #524	@ 0x20c
 8002c1c:	4798      	blx	r3
    return USBD_OK;
 8002c1e:	2000      	movs	r0, #0
}
 8002c20:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8002c22:	2002      	movs	r0, #2
 8002c24:	e7fc      	b.n	8002c20 <USBD_CDC_DataOut+0x28>

08002c26 <USBD_CDC_DataIn>:
{
 8002c26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8002c28:	f8d0 62b8 	ldr.w	r6, [r0, #696]	@ 0x2b8
  if (pdev->pClassData != NULL)
 8002c2c:	b1ce      	cbz	r6, 8002c62 <USBD_CDC_DataIn+0x3c>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8002c2e:	2214      	movs	r2, #20
 8002c30:	fb02 0201 	mla	r2, r2, r1, r0
 8002c34:	69d3      	ldr	r3, [r2, #28]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8002c36:	f8d0 52c0 	ldr.w	r5, [r0, #704]	@ 0x2c0
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8002c3a:	b173      	cbz	r3, 8002c5a <USBD_CDC_DataIn+0x34>
 8002c3c:	2728      	movs	r7, #40	@ 0x28
 8002c3e:	fb07 5401 	mla	r4, r7, r1, r5
 8002c42:	6a24      	ldr	r4, [r4, #32]
 8002c44:	fbb3 f5f4 	udiv	r5, r3, r4
 8002c48:	fb04 3315 	mls	r3, r4, r5, r3
 8002c4c:	b92b      	cbnz	r3, 8002c5a <USBD_CDC_DataIn+0x34>
      pdev->ep_in[epnum].total_length = 0U;
 8002c4e:	61d3      	str	r3, [r2, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8002c50:	461a      	mov	r2, r3
 8002c52:	f000 fe5f 	bl	8003914 <USBD_LL_Transmit>
    return USBD_OK;
 8002c56:	2000      	movs	r0, #0
}
 8002c58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	f8c6 3214 	str.w	r3, [r6, #532]	@ 0x214
 8002c60:	e7f9      	b.n	8002c56 <USBD_CDC_DataIn+0x30>
    return USBD_FAIL;
 8002c62:	2002      	movs	r0, #2
 8002c64:	e7f8      	b.n	8002c58 <USBD_CDC_DataIn+0x32>

08002c66 <USBD_CDC_Setup>:
  uint8_t ifalt = 0U;
 8002c66:	2300      	movs	r3, #0
{
 8002c68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002c6a:	780f      	ldrb	r7, [r1, #0]
  uint8_t ifalt = 0U;
 8002c6c:	f88d 3005 	strb.w	r3, [sp, #5]
  uint16_t status_info = 0U;
 8002c70:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002c74:	f017 0360 	ands.w	r3, r7, #96	@ 0x60
{
 8002c78:	4604      	mov	r4, r0
 8002c7a:	460d      	mov	r5, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8002c7c:	f8d0 62b8 	ldr.w	r6, [r0, #696]	@ 0x2b8
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002c80:	d022      	beq.n	8002cc8 <USBD_CDC_Setup+0x62>
 8002c82:	2b20      	cmp	r3, #32
 8002c84:	d13a      	bne.n	8002cfc <USBD_CDC_Setup+0x96>
      if (req->wLength)
 8002c86:	88ca      	ldrh	r2, [r1, #6]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8002c88:	784b      	ldrb	r3, [r1, #1]
      if (req->wLength)
 8002c8a:	b1ba      	cbz	r2, 8002cbc <USBD_CDC_Setup+0x56>
        if (req->bmRequest & 0x80U)
 8002c8c:	0639      	lsls	r1, r7, #24
 8002c8e:	d50b      	bpl.n	8002ca8 <USBD_CDC_Setup+0x42>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8002c90:	f8d0 12bc 	ldr.w	r1, [r0, #700]	@ 0x2bc
 8002c94:	4618      	mov	r0, r3
 8002c96:	688f      	ldr	r7, [r1, #8]
 8002c98:	4631      	mov	r1, r6
 8002c9a:	47b8      	blx	r7
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8002c9c:	4631      	mov	r1, r6
 8002c9e:	4620      	mov	r0, r4
 8002ca0:	88ea      	ldrh	r2, [r5, #6]
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8002ca2:	f000 fc29 	bl	80034f8 <USBD_CtlSendData>
 8002ca6:	e006      	b.n	8002cb6 <USBD_CDC_Setup+0x50>
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8002ca8:	4631      	mov	r1, r6
          hcdc->CmdOpCode = req->bRequest;
 8002caa:	f886 3200 	strb.w	r3, [r6, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8002cae:	f886 2201 	strb.w	r2, [r6, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8002cb2:	f000 fc36 	bl	8003522 <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 8002cb6:	2000      	movs	r0, #0
}
 8002cb8:	b003      	add	sp, #12
 8002cba:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8002cbc:	f8d0 02bc 	ldr.w	r0, [r0, #700]	@ 0x2bc
 8002cc0:	6884      	ldr	r4, [r0, #8]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	47a0      	blx	r4
 8002cc6:	e7f6      	b.n	8002cb6 <USBD_CDC_Setup+0x50>
      switch (req->bRequest)
 8002cc8:	784b      	ldrb	r3, [r1, #1]
 8002cca:	2b0a      	cmp	r3, #10
 8002ccc:	d00a      	beq.n	8002ce4 <USBD_CDC_Setup+0x7e>
 8002cce:	2b0b      	cmp	r3, #11
 8002cd0:	d010      	beq.n	8002cf4 <USBD_CDC_Setup+0x8e>
 8002cd2:	b99b      	cbnz	r3, 8002cfc <USBD_CDC_Setup+0x96>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002cd4:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8002cd8:	2b03      	cmp	r3, #3
 8002cda:	d10f      	bne.n	8002cfc <USBD_CDC_Setup+0x96>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8002cdc:	2202      	movs	r2, #2
 8002cde:	f10d 0106 	add.w	r1, sp, #6
 8002ce2:	e7de      	b.n	8002ca2 <USBD_CDC_Setup+0x3c>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002ce4:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8002ce8:	2b03      	cmp	r3, #3
 8002cea:	d107      	bne.n	8002cfc <USBD_CDC_Setup+0x96>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8002cec:	2201      	movs	r2, #1
 8002cee:	f10d 0105 	add.w	r1, sp, #5
 8002cf2:	e7d6      	b.n	8002ca2 <USBD_CDC_Setup+0x3c>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8002cf4:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8002cf8:	2b03      	cmp	r3, #3
 8002cfa:	d0dc      	beq.n	8002cb6 <USBD_CDC_Setup+0x50>
          USBD_CtlError(pdev, req);
 8002cfc:	4620      	mov	r0, r4
 8002cfe:	4629      	mov	r1, r5
 8002d00:	f000 fbd3 	bl	80034aa <USBD_CtlError>
            ret = USBD_FAIL;
 8002d04:	2002      	movs	r0, #2
 8002d06:	e7d7      	b.n	8002cb8 <USBD_CDC_Setup+0x52>

08002d08 <USBD_CDC_DeInit>:
{
 8002d08:	b538      	push	{r3, r4, r5, lr}
 8002d0a:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8002d0c:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8002d0e:	2181      	movs	r1, #129	@ 0x81
 8002d10:	f000 fdcb 	bl	80038aa <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8002d14:	2101      	movs	r1, #1
 8002d16:	4620      	mov	r0, r4
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8002d18:	62e5      	str	r5, [r4, #44]	@ 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8002d1a:	f000 fdc6 	bl	80038aa <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8002d1e:	2182      	movs	r1, #130	@ 0x82
 8002d20:	4620      	mov	r0, r4
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8002d22:	f8c4 516c 	str.w	r5, [r4, #364]	@ 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8002d26:	f000 fdc0 	bl	80038aa <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 8002d2a:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8002d2e:	6425      	str	r5, [r4, #64]	@ 0x40
  if (pdev->pClassData != NULL)
 8002d30:	b14b      	cbz	r3, 8002d46 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8002d32:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8002d3a:	f8d4 02b8 	ldr.w	r0, [r4, #696]	@ 0x2b8
 8002d3e:	f000 fe03 	bl	8003948 <USBD_static_free>
    pdev->pClassData = NULL;
 8002d42:	f8c4 52b8 	str.w	r5, [r4, #696]	@ 0x2b8
}
 8002d46:	2000      	movs	r0, #0
 8002d48:	bd38      	pop	{r3, r4, r5, pc}

08002d4a <USBD_CDC_Init>:
{
 8002d4a:	b570      	push	{r4, r5, r6, lr}
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002d4c:	7c03      	ldrb	r3, [r0, #16]
{
 8002d4e:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002d50:	bba3      	cbnz	r3, 8002dbc <USBD_CDC_Init+0x72>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8002d52:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d56:	2181      	movs	r1, #129	@ 0x81
 8002d58:	2202      	movs	r2, #2
 8002d5a:	f000 fd9a 	bl	8003892 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8002d5e:	2101      	movs	r1, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8002d60:	f44f 7300 	mov.w	r3, #512	@ 0x200
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8002d64:	62e1      	str	r1, [r4, #44]	@ 0x2c
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8002d66:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8002d68:	2202      	movs	r2, #2
 8002d6a:	4620      	mov	r0, r4
 8002d6c:	f000 fd91 	bl	8003892 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8002d70:	2308      	movs	r3, #8
 8002d72:	2203      	movs	r2, #3
 8002d74:	2182      	movs	r1, #130	@ 0x82
 8002d76:	4620      	mov	r0, r4
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8002d78:	f8c4 516c 	str.w	r5, [r4, #364]	@ 0x16c
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8002d7c:	f000 fd89 	bl	8003892 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8002d80:	f44f 7007 	mov.w	r0, #540	@ 0x21c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8002d84:	6425      	str	r5, [r4, #64]	@ 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8002d86:	f000 fddb 	bl	8003940 <USBD_static_malloc>
 8002d8a:	4606      	mov	r6, r0
 8002d8c:	f8c4 02b8 	str.w	r0, [r4, #696]	@ 0x2b8
  if (pdev->pClassData == NULL)
 8002d90:	b1f8      	cbz	r0, 8002dd2 <USBD_CDC_Init+0x88>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8002d92:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4798      	blx	r3
    hcdc->TxState = 0U;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	f8c6 3214 	str.w	r3, [r6, #532]	@ 0x214
    hcdc->RxState = 0U;
 8002da0:	f8c6 3218 	str.w	r3, [r6, #536]	@ 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002da4:	7c23      	ldrb	r3, [r4, #16]
 8002da6:	b993      	cbnz	r3, 8002dce <USBD_CDC_Init+0x84>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8002da8:	f44f 7300 	mov.w	r3, #512	@ 0x200
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8002dac:	4629      	mov	r1, r5
 8002dae:	4620      	mov	r0, r4
 8002db0:	f8d6 2204 	ldr.w	r2, [r6, #516]	@ 0x204
 8002db4:	f000 fdb7 	bl	8003926 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8002db8:	2000      	movs	r0, #0
}
 8002dba:	bd70      	pop	{r4, r5, r6, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8002dbc:	2340      	movs	r3, #64	@ 0x40
 8002dbe:	2181      	movs	r1, #129	@ 0x81
 8002dc0:	2202      	movs	r2, #2
 8002dc2:	f000 fd66 	bl	8003892 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8002dc6:	2101      	movs	r1, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8002dc8:	2340      	movs	r3, #64	@ 0x40
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8002dca:	62e1      	str	r1, [r4, #44]	@ 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8002dcc:	e7cb      	b.n	8002d66 <USBD_CDC_Init+0x1c>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8002dce:	2340      	movs	r3, #64	@ 0x40
 8002dd0:	e7ec      	b.n	8002dac <USBD_CDC_Init+0x62>
    ret = 1U;
 8002dd2:	4628      	mov	r0, r5
 8002dd4:	e7f1      	b.n	8002dba <USBD_CDC_Init+0x70>

08002dd6 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 8002dd6:	b119      	cbz	r1, 8002de0 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 8002dd8:	f8c0 12bc 	str.w	r1, [r0, #700]	@ 0x2bc
    ret = USBD_OK;
 8002ddc:	2000      	movs	r0, #0
 8002dde:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8002de0:	2002      	movs	r0, #2
  }

  return ret;
}
 8002de2:	4770      	bx	lr

08002de4 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8002de4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 8002de8:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 8002dea:	f8c3 1208 	str.w	r1, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8002dee:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
}
 8002df2:	4770      	bx	lr

08002df4 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 8002df4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8

  return USBD_OK;
}
 8002df8:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8002dfa:	f8c3 1204 	str.w	r1, [r3, #516]	@ 0x204
}
 8002dfe:	4770      	bx	lr

08002e00 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8002e00:	f8d0 22b8 	ldr.w	r2, [r0, #696]	@ 0x2b8
{
 8002e04:	b510      	push	{r4, lr}

  if (pdev->pClassData != NULL)
 8002e06:	b182      	cbz	r2, 8002e2a <USBD_CDC_TransmitPacket+0x2a>
  {
    if (hcdc->TxState == 0U)
 8002e08:	f8d2 4214 	ldr.w	r4, [r2, #532]	@ 0x214
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	b974      	cbnz	r4, 8002e2e <USBD_CDC_TransmitPacket+0x2e>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8002e10:	f8c2 3214 	str.w	r3, [r2, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8002e14:	f8d2 3210 	ldr.w	r3, [r2, #528]	@ 0x210

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8002e18:	2181      	movs	r1, #129	@ 0x81
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8002e1a:	6303      	str	r3, [r0, #48]	@ 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8002e1c:	f8d2 2208 	ldr.w	r2, [r2, #520]	@ 0x208
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	f000 fd77 	bl	8003914 <USBD_LL_Transmit>
                       (uint16_t)hcdc->TxLength);

      return USBD_OK;
 8002e26:	4620      	mov	r0, r4
  }
  else
  {
    return USBD_FAIL;
  }
}
 8002e28:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8002e2a:	2002      	movs	r0, #2
 8002e2c:	e7fc      	b.n	8002e28 <USBD_CDC_TransmitPacket+0x28>
      return USBD_BUSY;
 8002e2e:	4618      	mov	r0, r3
 8002e30:	e7fa      	b.n	8002e28 <USBD_CDC_TransmitPacket+0x28>

08002e32 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8002e32:	f8d0 22b8 	ldr.w	r2, [r0, #696]	@ 0x2b8
{
 8002e36:	b508      	push	{r3, lr}

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8002e38:	b162      	cbz	r2, 8002e54 <USBD_CDC_ReceivePacket+0x22>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002e3a:	7c03      	ldrb	r3, [r0, #16]
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8002e3c:	f8d2 2204 	ldr.w	r2, [r2, #516]	@ 0x204
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002e40:	b933      	cbnz	r3, 8002e50 <USBD_CDC_ReceivePacket+0x1e>
      USBD_LL_PrepareReceive(pdev,
 8002e42:	f44f 7300 	mov.w	r3, #512	@ 0x200
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8002e46:	2101      	movs	r1, #1
 8002e48:	f000 fd6d 	bl	8003926 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8002e4c:	2000      	movs	r0, #0
  }
  else
  {
    return USBD_FAIL;
  }
}
 8002e4e:	bd08      	pop	{r3, pc}
      USBD_LL_PrepareReceive(pdev,
 8002e50:	2340      	movs	r3, #64	@ 0x40
 8002e52:	e7f8      	b.n	8002e46 <USBD_CDC_ReceivePacket+0x14>
    return USBD_FAIL;
 8002e54:	2002      	movs	r0, #2
 8002e56:	e7fa      	b.n	8002e4e <USBD_CDC_ReceivePacket+0x1c>

08002e58 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8002e58:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8002e5a:	b180      	cbz	r0, 8002e7e <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8002e5c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8002e60:	b113      	cbz	r3, 8002e68 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8002e62:	2300      	movs	r3, #0
 8002e64:	f8c0 32b4 	str.w	r3, [r0, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8002e68:	b109      	cbz	r1, 8002e6e <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8002e6a:	f8c0 12b0 	str.w	r1, [r0, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002e6e:	2301      	movs	r3, #1
  pdev->id = id;
 8002e70:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002e72:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8002e76:	f000 fcc3 	bl	8003800 <USBD_LL_Init>

  return USBD_OK;
 8002e7a:	2000      	movs	r0, #0
}
 8002e7c:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8002e7e:	2002      	movs	r0, #2
 8002e80:	e7fc      	b.n	8002e7c <USBD_Init+0x24>

08002e82 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 8002e82:	b119      	cbz	r1, 8002e8c <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8002e84:	f8c0 12b4 	str.w	r1, [r0, #692]	@ 0x2b4
    status = USBD_OK;
 8002e88:	2000      	movs	r0, #0
 8002e8a:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8002e8c:	2002      	movs	r0, #2
  }

  return status;
}
 8002e8e:	4770      	bx	lr

08002e90 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8002e90:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8002e92:	f000 fcf5 	bl	8003880 <USBD_LL_Start>

  return USBD_OK;
}
 8002e96:	2000      	movs	r0, #0
 8002e98:	bd08      	pop	{r3, pc}

08002e9a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8002e9a:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8002e9c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8002ea0:	b133      	cbz	r3, 8002eb0 <USBD_SetClassConfig+0x16>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4798      	blx	r3
 8002ea6:	3800      	subs	r0, #0
 8002ea8:	bf18      	it	ne
 8002eaa:	2001      	movne	r0, #1
 8002eac:	0040      	lsls	r0, r0, #1
      ret = USBD_OK;
    }
  }

  return ret;
}
 8002eae:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 8002eb0:	2002      	movs	r0, #2
 8002eb2:	e7fc      	b.n	8002eae <USBD_SetClassConfig+0x14>

08002eb4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8002eb4:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8002eb6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	4798      	blx	r3

  return USBD_OK;
}
 8002ebe:	2000      	movs	r0, #0
 8002ec0:	bd08      	pop	{r3, pc}

08002ec2 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8002ec2:	b538      	push	{r3, r4, r5, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8002ec4:	f500 752a 	add.w	r5, r0, #680	@ 0x2a8
{
 8002ec8:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8002eca:	4628      	mov	r0, r5
 8002ecc:	f000 fae2 	bl	8003494 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8002ed0:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8002ed2:	f894 12a8 	ldrb.w	r1, [r4, #680]	@ 0x2a8
  pdev->ep0_state = USBD_EP0_SETUP;
 8002ed6:	f8c4 3294 	str.w	r3, [r4, #660]	@ 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 8002eda:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	@ 0x2ae
 8002ede:	f8c4 3298 	str.w	r3, [r4, #664]	@ 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 8002ee2:	f001 031f 	and.w	r3, r1, #31
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d008      	beq.n	8002efc <USBD_LL_SetupStage+0x3a>
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d00b      	beq.n	8002f06 <USBD_LL_SetupStage+0x44>
 8002eee:	b97b      	cbnz	r3, 8002f10 <USBD_LL_SetupStage+0x4e>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8002ef0:	4629      	mov	r1, r5
 8002ef2:	4620      	mov	r0, r4
 8002ef4:	f000 f8fa 	bl	80030ec <USBD_StdDevReq>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return USBD_OK;
}
 8002ef8:	2000      	movs	r0, #0
 8002efa:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 8002efc:	4629      	mov	r1, r5
 8002efe:	4620      	mov	r0, r4
 8002f00:	f000 fa1c 	bl	800333c <USBD_StdItfReq>
      break;
 8002f04:	e7f8      	b.n	8002ef8 <USBD_LL_SetupStage+0x36>
      USBD_StdEPReq(pdev, &pdev->request);
 8002f06:	4629      	mov	r1, r5
 8002f08:	4620      	mov	r0, r4
 8002f0a:	f000 fa3b 	bl	8003384 <USBD_StdEPReq>
      break;
 8002f0e:	e7f3      	b.n	8002ef8 <USBD_LL_SetupStage+0x36>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8002f10:	4620      	mov	r0, r4
 8002f12:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8002f16:	f000 fcd1 	bl	80038bc <USBD_LL_StallEP>
      break;
 8002f1a:	e7ed      	b.n	8002ef8 <USBD_LL_SetupStage+0x36>

08002f1c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8002f1c:	b570      	push	{r4, r5, r6, lr}
 8002f1e:	4604      	mov	r4, r0
 8002f20:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8002f22:	bb39      	cbnz	r1, 8002f74 <USBD_LL_DataOutStage+0x58>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8002f24:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 8002f28:	2a03      	cmp	r2, #3
 8002f2a:	d11c      	bne.n	8002f66 <USBD_LL_DataOutStage+0x4a>
    {
      if (pep->rem_length > pep->maxpacket)
 8002f2c:	e9d0 5258 	ldrd	r5, r2, [r0, #352]	@ 0x160
 8002f30:	4295      	cmp	r5, r2
 8002f32:	d90b      	bls.n	8002f4c <USBD_LL_DataOutStage+0x30>
      {
        pep->rem_length -= pep->maxpacket;
 8002f34:	1aad      	subs	r5, r5, r2

        USBD_CtlContinueRx(pdev, pdata,
 8002f36:	42aa      	cmp	r2, r5
 8002f38:	4631      	mov	r1, r6
        pep->rem_length -= pep->maxpacket;
 8002f3a:	f8c0 5160 	str.w	r5, [r0, #352]	@ 0x160
        USBD_CtlContinueRx(pdev, pdata,
 8002f3e:	bf8c      	ite	hi
 8002f40:	b2aa      	uxthhi	r2, r5
 8002f42:	b292      	uxthls	r2, r2
 8002f44:	f000 fafa 	bl	800353c <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8002f48:	2000      	movs	r0, #0
}
 8002f4a:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8002f4c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	b123      	cbz	r3, 8002f5e <USBD_LL_DataOutStage+0x42>
 8002f54:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8002f58:	2a03      	cmp	r2, #3
 8002f5a:	d100      	bne.n	8002f5e <USBD_LL_DataOutStage+0x42>
          pdev->pClass->EP0_RxReady(pdev);
 8002f5c:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8002f5e:	4620      	mov	r0, r4
 8002f60:	f000 faf4 	bl	800354c <USBD_CtlSendStatus>
 8002f64:	e7f0      	b.n	8002f48 <USBD_LL_DataOutStage+0x2c>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8002f66:	2a05      	cmp	r2, #5
 8002f68:	d1ee      	bne.n	8002f48 <USBD_LL_DataOutStage+0x2c>
        pdev->ep0_state = USBD_EP0_IDLE;
 8002f6a:	f8c4 1294 	str.w	r1, [r4, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8002f6e:	f000 fca5 	bl	80038bc <USBD_LL_StallEP>
 8002f72:	e7e9      	b.n	8002f48 <USBD_LL_DataOutStage+0x2c>
  else if ((pdev->pClass->DataOut != NULL) &&
 8002f74:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	b12b      	cbz	r3, 8002f88 <USBD_LL_DataOutStage+0x6c>
 8002f7c:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8002f80:	2a03      	cmp	r2, #3
 8002f82:	d101      	bne.n	8002f88 <USBD_LL_DataOutStage+0x6c>
    pdev->pClass->DataOut(pdev, epnum);
 8002f84:	4798      	blx	r3
 8002f86:	e7df      	b.n	8002f48 <USBD_LL_DataOutStage+0x2c>
    return USBD_FAIL;
 8002f88:	2002      	movs	r0, #2
 8002f8a:	e7de      	b.n	8002f4a <USBD_LL_DataOutStage+0x2e>

08002f8c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8002f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f8e:	4604      	mov	r4, r0
 8002f90:	4613      	mov	r3, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8002f92:	460f      	mov	r7, r1
 8002f94:	2900      	cmp	r1, #0
 8002f96:	d149      	bne.n	800302c <USBD_LL_DataInStage+0xa0>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8002f98:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 8002f9c:	2a02      	cmp	r2, #2
 8002f9e:	d13a      	bne.n	8003016 <USBD_LL_DataInStage+0x8a>
    {
      if (pep->rem_length > pep->maxpacket)
 8002fa0:	e9d0 5608 	ldrd	r5, r6, [r0, #32]
 8002fa4:	42b5      	cmp	r5, r6
 8002fa6:	d911      	bls.n	8002fcc <USBD_LL_DataInStage+0x40>
      {
        pep->rem_length -= pep->maxpacket;
 8002fa8:	1bad      	subs	r5, r5, r6

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8002faa:	4619      	mov	r1, r3
        pep->rem_length -= pep->maxpacket;
 8002fac:	6205      	str	r5, [r0, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8002fae:	b2aa      	uxth	r2, r5
 8002fb0:	f000 faaf 	bl	8003512 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8002fb4:	463b      	mov	r3, r7
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	4619      	mov	r1, r3
 8002fba:	4620      	mov	r0, r4
 8002fbc:	f000 fcb3 	bl	8003926 <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 8002fc0:	f894 32a0 	ldrb.w	r3, [r4, #672]	@ 0x2a0
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d02d      	beq.n	8003024 <USBD_LL_DataInStage+0x98>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8002fc8:	2000      	movs	r0, #0
}
 8002fca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8002fcc:	69c3      	ldr	r3, [r0, #28]
 8002fce:	fbb3 f5f6 	udiv	r5, r3, r6
 8002fd2:	fb06 3515 	mls	r5, r6, r5, r3
 8002fd6:	b965      	cbnz	r5, 8002ff2 <USBD_LL_DataInStage+0x66>
 8002fd8:	429e      	cmp	r6, r3
 8002fda:	d80a      	bhi.n	8002ff2 <USBD_LL_DataInStage+0x66>
            (pep->total_length >= pep->maxpacket) &&
 8002fdc:	f8d0 2298 	ldr.w	r2, [r0, #664]	@ 0x298
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d206      	bcs.n	8002ff2 <USBD_LL_DataInStage+0x66>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8002fe4:	462a      	mov	r2, r5
 8002fe6:	f000 fa94 	bl	8003512 <USBD_CtlContinueSendData>
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8002fea:	462b      	mov	r3, r5
          pdev->ep0_data_len = 0U;
 8002fec:	f8c4 5298 	str.w	r5, [r4, #664]	@ 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8002ff0:	e7e1      	b.n	8002fb6 <USBD_LL_DataInStage+0x2a>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8002ff2:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	b12b      	cbz	r3, 8003006 <USBD_LL_DataInStage+0x7a>
 8002ffa:	f894 229c 	ldrb.w	r2, [r4, #668]	@ 0x29c
 8002ffe:	2a03      	cmp	r2, #3
 8003000:	d101      	bne.n	8003006 <USBD_LL_DataInStage+0x7a>
            pdev->pClass->EP0_TxSent(pdev);
 8003002:	4620      	mov	r0, r4
 8003004:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 8003006:	2180      	movs	r1, #128	@ 0x80
 8003008:	4620      	mov	r0, r4
 800300a:	f000 fc57 	bl	80038bc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800300e:	4620      	mov	r0, r4
 8003010:	f000 faa7 	bl	8003562 <USBD_CtlReceiveStatus>
 8003014:	e7d4      	b.n	8002fc0 <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8003016:	f032 0304 	bics.w	r3, r2, #4
 800301a:	d1d1      	bne.n	8002fc0 <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 800301c:	2180      	movs	r1, #128	@ 0x80
 800301e:	f000 fc4d 	bl	80038bc <USBD_LL_StallEP>
 8003022:	e7cd      	b.n	8002fc0 <USBD_LL_DataInStage+0x34>
      pdev->dev_test_mode = 0U;
 8003024:	2300      	movs	r3, #0
 8003026:	f884 32a0 	strb.w	r3, [r4, #672]	@ 0x2a0
 800302a:	e7cd      	b.n	8002fc8 <USBD_LL_DataInStage+0x3c>
  else if ((pdev->pClass->DataIn != NULL) &&
 800302c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8003030:	695b      	ldr	r3, [r3, #20]
 8003032:	b12b      	cbz	r3, 8003040 <USBD_LL_DataInStage+0xb4>
 8003034:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8003038:	2a03      	cmp	r2, #3
 800303a:	d101      	bne.n	8003040 <USBD_LL_DataInStage+0xb4>
    pdev->pClass->DataIn(pdev, epnum);
 800303c:	4798      	blx	r3
 800303e:	e7c3      	b.n	8002fc8 <USBD_LL_DataInStage+0x3c>
    return USBD_FAIL;
 8003040:	2002      	movs	r0, #2
 8003042:	e7c2      	b.n	8002fca <USBD_LL_DataInStage+0x3e>

08003044 <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003044:	2200      	movs	r2, #0
{
 8003046:	b570      	push	{r4, r5, r6, lr}
 8003048:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800304a:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800304c:	2640      	movs	r6, #64	@ 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800304e:	4611      	mov	r1, r2
 8003050:	2340      	movs	r3, #64	@ 0x40
 8003052:	f000 fc1e 	bl	8003892 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003056:	4633      	mov	r3, r6
 8003058:	2180      	movs	r1, #128	@ 0x80
 800305a:	2200      	movs	r2, #0
 800305c:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800305e:	f8c4 5158 	str.w	r5, [r4, #344]	@ 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003062:	f8c4 6164 	str.w	r6, [r4, #356]	@ 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003066:	f000 fc14 	bl	8003892 <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 800306a:	2100      	movs	r1, #0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 800306c:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8003070:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8003072:	6266      	str	r6, [r4, #36]	@ 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003074:	f884 529c 	strb.w	r5, [r4, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8003078:	f8c4 1294 	str.w	r1, [r4, #660]	@ 0x294
  pdev->dev_config = 0U;
 800307c:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 800307e:	f8c4 12a4 	str.w	r1, [r4, #676]	@ 0x2a4
  if (pdev->pClassData)
 8003082:	b123      	cbz	r3, 800308e <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8003084:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 8003088:	4620      	mov	r0, r4
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	4798      	blx	r3
  }

  return USBD_OK;
}
 800308e:	2000      	movs	r0, #0
 8003090:	bd70      	pop	{r4, r5, r6, pc}

08003092 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8003092:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8003094:	2000      	movs	r0, #0
 8003096:	4770      	bx	lr

08003098 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8003098:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800309c:	f880 329d 	strb.w	r3, [r0, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80030a0:	2304      	movs	r3, #4
 80030a2:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c

  return USBD_OK;
}
 80030a6:	2000      	movs	r0, #0
 80030a8:	4770      	bx	lr

080030aa <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80030aa:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80030ae:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 80030b0:	bf04      	itt	eq
 80030b2:	f890 329d 	ldrbeq.w	r3, [r0, #669]	@ 0x29d
 80030b6:	f880 329c 	strbeq.w	r3, [r0, #668]	@ 0x29c
  }

  return USBD_OK;
}
 80030ba:	2000      	movs	r0, #0
 80030bc:	4770      	bx	lr

080030be <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80030be:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80030c0:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 80030c4:	2a03      	cmp	r2, #3
 80030c6:	d104      	bne.n	80030d2 <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 80030c8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80030cc:	69db      	ldr	r3, [r3, #28]
 80030ce:	b103      	cbz	r3, 80030d2 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 80030d0:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 80030d2:	2000      	movs	r0, #0
 80030d4:	bd08      	pop	{r3, pc}

080030d6 <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 80030d6:	b510      	push	{r4, lr}
 80030d8:	4604      	mov	r4, r0
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 80030da:	2180      	movs	r1, #128	@ 0x80
 80030dc:	f000 fbee 	bl	80038bc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80030e0:	4620      	mov	r0, r4
}
 80030e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 80030e6:	2100      	movs	r1, #0
 80030e8:	f000 bbe8 	b.w	80038bc <USBD_LL_StallEP>

080030ec <USBD_StdDevReq>:
{
 80030ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80030ee:	780b      	ldrb	r3, [r1, #0]
 80030f0:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80030f2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80030f6:	2b20      	cmp	r3, #32
{
 80030f8:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80030fa:	d012      	beq.n	8003122 <USBD_StdDevReq+0x36>
 80030fc:	2b40      	cmp	r3, #64	@ 0x40
 80030fe:	d010      	beq.n	8003122 <USBD_StdDevReq+0x36>
 8003100:	2b00      	cmp	r3, #0
 8003102:	d151      	bne.n	80031a8 <USBD_StdDevReq+0xbc>
      switch (req->bRequest)
 8003104:	784b      	ldrb	r3, [r1, #1]
 8003106:	2b09      	cmp	r3, #9
 8003108:	d84e      	bhi.n	80031a8 <USBD_StdDevReq+0xbc>
 800310a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800310e:	00ee      	.short	0x00ee
 8003110:	004d0109 	.word	0x004d0109
 8003114:	004d0102 	.word	0x004d0102
 8003118:	00130087 	.word	0x00130087
 800311c:	00d6004d 	.word	0x00d6004d
 8003120:	00a3      	.short	0x00a3
      pdev->pClass->Setup(pdev, req);
 8003122:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 8003126:	4629      	mov	r1, r5
 8003128:	4620      	mov	r0, r4
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	4798      	blx	r3
}
 800312e:	2000      	movs	r0, #0
 8003130:	b003      	add	sp, #12
 8003132:	bd30      	pop	{r4, r5, pc}
  uint16_t len = 0U;
 8003134:	2300      	movs	r3, #0
 8003136:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 800313a:	884b      	ldrh	r3, [r1, #2]
 800313c:	0a1a      	lsrs	r2, r3, #8
 800313e:	3a01      	subs	r2, #1
 8003140:	2a06      	cmp	r2, #6
 8003142:	d831      	bhi.n	80031a8 <USBD_StdDevReq+0xbc>
 8003144:	e8df f002 	tbb	[pc, r2]
 8003148:	30231604 	.word	0x30231604
 800314c:	4830      	.short	0x4830
 800314e:	52          	.byte	0x52
 800314f:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8003150:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8003154:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8003156:	7c20      	ldrb	r0, [r4, #16]
 8003158:	f10d 0106 	add.w	r1, sp, #6
 800315c:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 800315e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8003162:	88eb      	ldrh	r3, [r5, #6]
 8003164:	2a00      	cmp	r2, #0
 8003166:	d055      	beq.n	8003214 <USBD_StdDevReq+0x128>
 8003168:	2b00      	cmp	r3, #0
 800316a:	d14a      	bne.n	8003202 <USBD_StdDevReq+0x116>
        USBD_CtlSendStatus(pdev);
 800316c:	4620      	mov	r0, r4
 800316e:	f000 f9ed 	bl	800354c <USBD_CtlSendStatus>
 8003172:	e7dc      	b.n	800312e <USBD_StdDevReq+0x42>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003174:	7c02      	ldrb	r2, [r0, #16]
      pdev->pClass->Setup(pdev, req);
 8003176:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800317a:	b932      	cbnz	r2, 800318a <USBD_StdDevReq+0x9e>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800317c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800317e:	f10d 0006 	add.w	r0, sp, #6
 8003182:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8003184:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8003186:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8003188:	e7e9      	b.n	800315e <USBD_StdDevReq+0x72>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800318a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800318c:	e7f7      	b.n	800317e <USBD_StdDevReq+0x92>
      switch ((uint8_t)(req->wValue))
 800318e:	b2db      	uxtb	r3, r3
 8003190:	2b05      	cmp	r3, #5
 8003192:	d809      	bhi.n	80031a8 <USBD_StdDevReq+0xbc>
 8003194:	e8df f003 	tbb	[pc, r3]
 8003198:	14100c03 	.word	0x14100c03
 800319c:	1c18      	.short	0x1c18
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800319e:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 80031a2:	685b      	ldr	r3, [r3, #4]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d1d6      	bne.n	8003156 <USBD_StdDevReq+0x6a>
        USBD_CtlError(pdev, req);
 80031a8:	4620      	mov	r0, r4
 80031aa:	f7ff ff94 	bl	80030d6 <USBD_CtlError.constprop.0>
        break;
 80031ae:	e7be      	b.n	800312e <USBD_StdDevReq+0x42>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80031b0:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	e7f5      	b.n	80031a4 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80031b8:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	e7f1      	b.n	80031a4 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80031c0:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	e7ed      	b.n	80031a4 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80031c8:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	e7e9      	b.n	80031a4 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80031d0:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	e7e5      	b.n	80031a4 <USBD_StdDevReq+0xb8>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80031d8:	7c03      	ldrb	r3, [r0, #16]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d1e4      	bne.n	80031a8 <USBD_StdDevReq+0xbc>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80031de:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80031e2:	f10d 0006 	add.w	r0, sp, #6
 80031e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031e8:	4798      	blx	r3
  if (err != 0U)
 80031ea:	e7b8      	b.n	800315e <USBD_StdDevReq+0x72>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80031ec:	7c03      	ldrb	r3, [r0, #16]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d1da      	bne.n	80031a8 <USBD_StdDevReq+0xbc>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80031f2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80031f6:	f10d 0006 	add.w	r0, sp, #6
 80031fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031fc:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80031fe:	2307      	movs	r3, #7
 8003200:	e7c1      	b.n	8003186 <USBD_StdDevReq+0x9a>
      len = MIN(len, req->wLength);
 8003202:	429a      	cmp	r2, r3
 8003204:	bf28      	it	cs
 8003206:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8003208:	4601      	mov	r1, r0
 800320a:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 800320c:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8003210:	f000 f972 	bl	80034f8 <USBD_CtlSendData>
    if (req->wLength == 0U)
 8003214:	88eb      	ldrh	r3, [r5, #6]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d189      	bne.n	800312e <USBD_StdDevReq+0x42>
 800321a:	e7a7      	b.n	800316c <USBD_StdDevReq+0x80>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800321c:	888b      	ldrh	r3, [r1, #4]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d1c2      	bne.n	80031a8 <USBD_StdDevReq+0xbc>
 8003222:	88cb      	ldrh	r3, [r1, #6]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d1bf      	bne.n	80031a8 <USBD_StdDevReq+0xbc>
 8003228:	884d      	ldrh	r5, [r1, #2]
 800322a:	2d7f      	cmp	r5, #127	@ 0x7f
 800322c:	d8bc      	bhi.n	80031a8 <USBD_StdDevReq+0xbc>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800322e:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8003232:	2b03      	cmp	r3, #3
 8003234:	d0b8      	beq.n	80031a8 <USBD_StdDevReq+0xbc>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8003236:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 8003238:	f880 129e 	strb.w	r1, [r0, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800323c:	f000 fb61 	bl	8003902 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8003240:	4620      	mov	r0, r4
 8003242:	f000 f983 	bl	800354c <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8003246:	b11d      	cbz	r5, 8003250 <USBD_StdDevReq+0x164>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8003248:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 800324a:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 800324e:	e76e      	b.n	800312e <USBD_StdDevReq+0x42>
 8003250:	2301      	movs	r3, #1
 8003252:	e7fa      	b.n	800324a <USBD_StdDevReq+0x15e>
  cfgidx = (uint8_t)(req->wValue);
 8003254:	7889      	ldrb	r1, [r1, #2]
 8003256:	4d38      	ldr	r5, [pc, #224]	@ (8003338 <USBD_StdDevReq+0x24c>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8003258:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 800325a:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800325c:	d8a4      	bhi.n	80031a8 <USBD_StdDevReq+0xbc>
    switch (pdev->dev_state)
 800325e:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8003262:	2b02      	cmp	r3, #2
 8003264:	d008      	beq.n	8003278 <USBD_StdDevReq+0x18c>
 8003266:	2b03      	cmp	r3, #3
 8003268:	d015      	beq.n	8003296 <USBD_StdDevReq+0x1aa>
        USBD_CtlError(pdev, req);
 800326a:	f7ff ff34 	bl	80030d6 <USBD_CtlError.constprop.0>
        USBD_ClrClassConfig(pdev, cfgidx);
 800326e:	4620      	mov	r0, r4
 8003270:	7829      	ldrb	r1, [r5, #0]
 8003272:	f7ff fe1f 	bl	8002eb4 <USBD_ClrClassConfig>
        break;
 8003276:	e75a      	b.n	800312e <USBD_StdDevReq+0x42>
        if (cfgidx)
 8003278:	2900      	cmp	r1, #0
 800327a:	f43f af77 	beq.w	800316c <USBD_StdDevReq+0x80>
          pdev->dev_config = cfgidx;
 800327e:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8003280:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 8003282:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8003284:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8003288:	4620      	mov	r0, r4
 800328a:	f7ff fe06 	bl	8002e9a <USBD_SetClassConfig>
 800328e:	2802      	cmp	r0, #2
 8003290:	f47f af6c 	bne.w	800316c <USBD_StdDevReq+0x80>
 8003294:	e788      	b.n	80031a8 <USBD_StdDevReq+0xbc>
        if (cfgidx == 0U)
 8003296:	b931      	cbnz	r1, 80032a6 <USBD_StdDevReq+0x1ba>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8003298:	2302      	movs	r3, #2
          pdev->dev_config = cfgidx;
 800329a:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800329c:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
          USBD_ClrClassConfig(pdev, cfgidx);
 80032a0:	f7ff fe08 	bl	8002eb4 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80032a4:	e762      	b.n	800316c <USBD_StdDevReq+0x80>
        else if (cfgidx != pdev->dev_config)
 80032a6:	6841      	ldr	r1, [r0, #4]
 80032a8:	2901      	cmp	r1, #1
 80032aa:	f43f af5f 	beq.w	800316c <USBD_StdDevReq+0x80>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80032ae:	b2c9      	uxtb	r1, r1
 80032b0:	f7ff fe00 	bl	8002eb4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80032b4:	7829      	ldrb	r1, [r5, #0]
 80032b6:	6061      	str	r1, [r4, #4]
 80032b8:	e7e6      	b.n	8003288 <USBD_StdDevReq+0x19c>
  if (req->wLength != 1U)
 80032ba:	88ca      	ldrh	r2, [r1, #6]
 80032bc:	2a01      	cmp	r2, #1
 80032be:	f47f af73 	bne.w	80031a8 <USBD_StdDevReq+0xbc>
    switch (pdev->dev_state)
 80032c2:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d80a      	bhi.n	80032e0 <USBD_StdDevReq+0x1f4>
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	f43f af6c 	beq.w	80031a8 <USBD_StdDevReq+0xbc>
        pdev->dev_default_config = 0U;
 80032d0:	4601      	mov	r1, r0
 80032d2:	2300      	movs	r3, #0
 80032d4:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80032d8:	4620      	mov	r0, r4
 80032da:	f000 f90d 	bl	80034f8 <USBD_CtlSendData>
      break;
 80032de:	e726      	b.n	800312e <USBD_StdDevReq+0x42>
    switch (pdev->dev_state)
 80032e0:	2b03      	cmp	r3, #3
 80032e2:	f47f af61 	bne.w	80031a8 <USBD_StdDevReq+0xbc>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80032e6:	1d01      	adds	r1, r0, #4
 80032e8:	e7f6      	b.n	80032d8 <USBD_StdDevReq+0x1ec>
  switch (pdev->dev_state)
 80032ea:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80032ee:	3b01      	subs	r3, #1
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	f63f af59 	bhi.w	80031a8 <USBD_StdDevReq+0xbc>
      if (req->wLength != 0x2U)
 80032f6:	88ca      	ldrh	r2, [r1, #6]
 80032f8:	2a02      	cmp	r2, #2
 80032fa:	f47f af55 	bne.w	80031a8 <USBD_StdDevReq+0xbc>
      if (pdev->dev_remote_wakeup)
 80032fe:	f8d0 32a4 	ldr.w	r3, [r0, #676]	@ 0x2a4
 8003302:	4601      	mov	r1, r0
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8003304:	2b00      	cmp	r3, #0
 8003306:	bf0c      	ite	eq
 8003308:	2301      	moveq	r3, #1
 800330a:	2303      	movne	r3, #3
 800330c:	f841 3f0c 	str.w	r3, [r1, #12]!
 8003310:	e7e2      	b.n	80032d8 <USBD_StdDevReq+0x1ec>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8003312:	884b      	ldrh	r3, [r1, #2]
 8003314:	2b01      	cmp	r3, #1
 8003316:	f47f af0a 	bne.w	800312e <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 800331a:	f8c4 32a4 	str.w	r3, [r4, #676]	@ 0x2a4
 800331e:	e725      	b.n	800316c <USBD_StdDevReq+0x80>
  switch (pdev->dev_state)
 8003320:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8003324:	3b01      	subs	r3, #1
 8003326:	2b02      	cmp	r3, #2
 8003328:	f63f af3e 	bhi.w	80031a8 <USBD_StdDevReq+0xbc>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800332c:	884b      	ldrh	r3, [r1, #2]
 800332e:	2b01      	cmp	r3, #1
 8003330:	f47f aefd 	bne.w	800312e <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 8003334:	2300      	movs	r3, #0
 8003336:	e7f0      	b.n	800331a <USBD_StdDevReq+0x22e>
 8003338:	200003fc 	.word	0x200003fc

0800333c <USBD_StdItfReq>:
{
 800333c:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800333e:	780b      	ldrb	r3, [r1, #0]
{
 8003340:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003342:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8003346:	065b      	lsls	r3, r3, #25
{
 8003348:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800334a:	d501      	bpl.n	8003350 <USBD_StdItfReq+0x14>
 800334c:	2a40      	cmp	r2, #64	@ 0x40
 800334e:	d115      	bne.n	800337c <USBD_StdItfReq+0x40>
      switch (pdev->dev_state)
 8003350:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8003354:	3b01      	subs	r3, #1
 8003356:	2b02      	cmp	r3, #2
 8003358:	d810      	bhi.n	800337c <USBD_StdItfReq+0x40>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800335a:	792b      	ldrb	r3, [r5, #4]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d80d      	bhi.n	800337c <USBD_StdItfReq+0x40>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8003360:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 8003364:	4629      	mov	r1, r5
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	4620      	mov	r0, r4
 800336a:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800336c:	88eb      	ldrh	r3, [r5, #6]
 800336e:	b91b      	cbnz	r3, 8003378 <USBD_StdItfReq+0x3c>
 8003370:	b910      	cbnz	r0, 8003378 <USBD_StdItfReq+0x3c>
              USBD_CtlSendStatus(pdev);
 8003372:	4620      	mov	r0, r4
 8003374:	f000 f8ea 	bl	800354c <USBD_CtlSendStatus>
}
 8003378:	2000      	movs	r0, #0
 800337a:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 800337c:	4620      	mov	r0, r4
 800337e:	f7ff feaa 	bl	80030d6 <USBD_CtlError.constprop.0>
          break;
 8003382:	e7f9      	b.n	8003378 <USBD_StdItfReq+0x3c>

08003384 <USBD_StdEPReq>:
{
 8003384:	b538      	push	{r3, r4, r5, lr}
 8003386:	780a      	ldrb	r2, [r1, #0]
 8003388:	4604      	mov	r4, r0
  ep_addr  = LOBYTE(req->wIndex);
 800338a:	f002 0260 	and.w	r2, r2, #96	@ 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800338e:	2a20      	cmp	r2, #32
{
 8003390:	460b      	mov	r3, r1
  ep_addr  = LOBYTE(req->wIndex);
 8003392:	888d      	ldrh	r5, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003394:	d026      	beq.n	80033e4 <USBD_StdEPReq+0x60>
 8003396:	2a40      	cmp	r2, #64	@ 0x40
 8003398:	d024      	beq.n	80033e4 <USBD_StdEPReq+0x60>
 800339a:	bb8a      	cbnz	r2, 8003400 <USBD_StdEPReq+0x7c>
      switch (req->bRequest)
 800339c:	785a      	ldrb	r2, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 800339e:	b2e9      	uxtb	r1, r5
      switch (req->bRequest)
 80033a0:	2a01      	cmp	r2, #1
 80033a2:	d03d      	beq.n	8003420 <USBD_StdEPReq+0x9c>
 80033a4:	2a03      	cmp	r2, #3
 80033a6:	d025      	beq.n	80033f4 <USBD_StdEPReq+0x70>
 80033a8:	bb52      	cbnz	r2, 8003400 <USBD_StdEPReq+0x7c>
          switch (pdev->dev_state)
 80033aa:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d04d      	beq.n	800344e <USBD_StdEPReq+0xca>
 80033b2:	2b03      	cmp	r3, #3
 80033b4:	d124      	bne.n	8003400 <USBD_StdEPReq+0x7c>
              if ((ep_addr & 0x80U) == 0x80U)
 80033b6:	2214      	movs	r2, #20
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80033b8:	f001 030f 	and.w	r3, r1, #15
              if ((ep_addr & 0x80U) == 0x80U)
 80033bc:	f015 0f80 	tst.w	r5, #128	@ 0x80
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80033c0:	fb02 0303 	mla	r3, r2, r3, r0
              if ((ep_addr & 0x80U) == 0x80U)
 80033c4:	d053      	beq.n	800346e <USBD_StdEPReq+0xea>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80033c6:	699b      	ldr	r3, [r3, #24]
 80033c8:	b1d3      	cbz	r3, 8003400 <USBD_StdEPReq+0x7c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80033ca:	2514      	movs	r5, #20
 80033cc:	f001 037f 	and.w	r3, r1, #127	@ 0x7f
 80033d0:	fb03 5505 	mla	r5, r3, r5, r5
 80033d4:	4405      	add	r5, r0
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80033d6:	064b      	lsls	r3, r1, #25
 80033d8:	d155      	bne.n	8003486 <USBD_StdEPReq+0x102>
{
 80033da:	2300      	movs	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80033dc:	2202      	movs	r2, #2
 80033de:	4629      	mov	r1, r5
                pep->status = 0x0000U;
 80033e0:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80033e2:	e040      	b.n	8003466 <USBD_StdEPReq+0xe2>
      pdev->pClass->Setup(pdev, req);
 80033e4:	f8d4 22b4 	ldr.w	r2, [r4, #692]	@ 0x2b4
 80033e8:	4619      	mov	r1, r3
 80033ea:	4620      	mov	r0, r4
 80033ec:	6892      	ldr	r2, [r2, #8]
 80033ee:	4790      	blx	r2
}
 80033f0:	2000      	movs	r0, #0
 80033f2:	bd38      	pop	{r3, r4, r5, pc}
          switch (pdev->dev_state)
 80033f4:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 80033f8:	2a02      	cmp	r2, #2
 80033fa:	d01f      	beq.n	800343c <USBD_StdEPReq+0xb8>
 80033fc:	2a03      	cmp	r2, #3
 80033fe:	d003      	beq.n	8003408 <USBD_StdEPReq+0x84>
              USBD_CtlError(pdev, req);
 8003400:	4620      	mov	r0, r4
 8003402:	f7ff fe68 	bl	80030d6 <USBD_CtlError.constprop.0>
              break;
 8003406:	e7f3      	b.n	80033f0 <USBD_StdEPReq+0x6c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8003408:	885a      	ldrh	r2, [r3, #2]
 800340a:	b92a      	cbnz	r2, 8003418 <USBD_StdEPReq+0x94>
                if ((ep_addr != 0x00U) &&
 800340c:	064a      	lsls	r2, r1, #25
 800340e:	d003      	beq.n	8003418 <USBD_StdEPReq+0x94>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8003410:	88db      	ldrh	r3, [r3, #6]
 8003412:	b90b      	cbnz	r3, 8003418 <USBD_StdEPReq+0x94>
                  USBD_LL_StallEP(pdev, ep_addr);
 8003414:	f000 fa52 	bl	80038bc <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 8003418:	4620      	mov	r0, r4
 800341a:	f000 f897 	bl	800354c <USBD_CtlSendStatus>
              break;
 800341e:	e7e7      	b.n	80033f0 <USBD_StdEPReq+0x6c>
          switch (pdev->dev_state)
 8003420:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8003424:	2a02      	cmp	r2, #2
 8003426:	d009      	beq.n	800343c <USBD_StdEPReq+0xb8>
 8003428:	2a03      	cmp	r2, #3
 800342a:	d1e9      	bne.n	8003400 <USBD_StdEPReq+0x7c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800342c:	885b      	ldrh	r3, [r3, #2]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1de      	bne.n	80033f0 <USBD_StdEPReq+0x6c>
                if ((ep_addr & 0x7FU) != 0x00U)
 8003432:	064d      	lsls	r5, r1, #25
 8003434:	d0f0      	beq.n	8003418 <USBD_StdEPReq+0x94>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8003436:	f000 fa4a 	bl	80038ce <USBD_LL_ClearStallEP>
 800343a:	e7ed      	b.n	8003418 <USBD_StdEPReq+0x94>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800343c:	064b      	lsls	r3, r1, #25
 800343e:	d0df      	beq.n	8003400 <USBD_StdEPReq+0x7c>
                USBD_LL_StallEP(pdev, ep_addr);
 8003440:	f000 fa3c 	bl	80038bc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8003444:	2180      	movs	r1, #128	@ 0x80
 8003446:	4620      	mov	r0, r4
 8003448:	f000 fa38 	bl	80038bc <USBD_LL_StallEP>
 800344c:	e7d0      	b.n	80033f0 <USBD_StdEPReq+0x6c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800344e:	0649      	lsls	r1, r1, #25
 8003450:	d1d6      	bne.n	8003400 <USBD_StdEPReq+0x7c>
              pep->status = 0x0000U;
 8003452:	2300      	movs	r3, #0
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003454:	062a      	lsls	r2, r5, #24
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8003456:	f04f 0202 	mov.w	r2, #2
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800345a:	bf4c      	ite	mi
 800345c:	f100 0114 	addmi.w	r1, r0, #20
 8003460:	f500 71aa 	addpl.w	r1, r0, #340	@ 0x154
              pep->status = 0x0000U;
 8003464:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8003466:	4620      	mov	r0, r4
 8003468:	f000 f846 	bl	80034f8 <USBD_CtlSendData>
              break;
 800346c:	e7c0      	b.n	80033f0 <USBD_StdEPReq+0x6c>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800346e:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 8003472:	2b00      	cmp	r3, #0
 8003474:	d0c4      	beq.n	8003400 <USBD_StdEPReq+0x7c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003476:	2314      	movs	r3, #20
                    &pdev->ep_out[ep_addr & 0x7FU];
 8003478:	f001 057f 	and.w	r5, r1, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800347c:	fb03 0505 	mla	r5, r3, r5, r0
 8003480:	f505 75aa 	add.w	r5, r5, #340	@ 0x154
 8003484:	e7a7      	b.n	80033d6 <USBD_StdEPReq+0x52>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8003486:	4620      	mov	r0, r4
 8003488:	f000 fa2a 	bl	80038e0 <USBD_LL_IsStallEP>
 800348c:	2800      	cmp	r0, #0
 800348e:	d0a4      	beq.n	80033da <USBD_StdEPReq+0x56>
 8003490:	2301      	movs	r3, #1
 8003492:	e7a3      	b.n	80033dc <USBD_StdEPReq+0x58>

08003494 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 8003494:	780b      	ldrb	r3, [r1, #0]
 8003496:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8003498:	784b      	ldrb	r3, [r1, #1]
 800349a:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800349c:	884b      	ldrh	r3, [r1, #2]
 800349e:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80034a0:	888b      	ldrh	r3, [r1, #4]
 80034a2:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80034a4:	88cb      	ldrh	r3, [r1, #6]
 80034a6:	80c3      	strh	r3, [r0, #6]
}
 80034a8:	4770      	bx	lr

080034aa <USBD_CtlError>:
{
 80034aa:	b510      	push	{r4, lr}
 80034ac:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 80034ae:	2180      	movs	r1, #128	@ 0x80
 80034b0:	f000 fa04 	bl	80038bc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80034b4:	4620      	mov	r0, r4
}
 80034b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 80034ba:	2100      	movs	r1, #0
 80034bc:	f000 b9fe 	b.w	80038bc <USBD_LL_StallEP>

080034c0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80034c0:	b570      	push	{r4, r5, r6, lr}
 80034c2:	460d      	mov	r5, r1
 80034c4:	4616      	mov	r6, r2
  uint8_t idx = 0U;

  if (desc != NULL)
 80034c6:	4604      	mov	r4, r0
 80034c8:	b170      	cbz	r0, 80034e8 <USBD_GetString+0x28>
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 80034ca:	f7fc fe3f 	bl	800014c <strlen>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80034ce:	b2c3      	uxtb	r3, r0
 80034d0:	3301      	adds	r3, #1
 80034d2:	005b      	lsls	r3, r3, #1
 80034d4:	8033      	strh	r3, [r6, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80034d6:	702b      	strb	r3, [r5, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80034d8:	2303      	movs	r3, #3
      unicode[idx++] =  0U;
 80034da:	2000      	movs	r0, #0
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80034dc:	706b      	strb	r3, [r5, #1]
 80034de:	2302      	movs	r3, #2
 80034e0:	3c01      	subs	r4, #1
    while (*desc != '\0')
 80034e2:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80034e6:	b901      	cbnz	r1, 80034ea <USBD_GetString+0x2a>
}
 80034e8:	bd70      	pop	{r4, r5, r6, pc}
      unicode[idx++] = *desc++;
 80034ea:	1c5a      	adds	r2, r3, #1
 80034ec:	54e9      	strb	r1, [r5, r3]
 80034ee:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 80034f0:	3302      	adds	r3, #2
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	54a8      	strb	r0, [r5, r2]
 80034f6:	e7f4      	b.n	80034e2 <USBD_GetString+0x22>

080034f8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80034f8:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80034fa:	2202      	movs	r2, #2
{
 80034fc:	b510      	push	{r4, lr}
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 80034fe:	e9c0 3307 	strd	r3, r3, [r0, #28]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8003502:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8003506:	460a      	mov	r2, r1
 8003508:	2100      	movs	r1, #0
 800350a:	f000 fa03 	bl	8003914 <USBD_LL_Transmit>

  return USBD_OK;
}
 800350e:	2000      	movs	r0, #0
 8003510:	bd10      	pop	{r4, pc}

08003512 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8003512:	b508      	push	{r3, lr}
 8003514:	4613      	mov	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8003516:	460a      	mov	r2, r1
 8003518:	2100      	movs	r1, #0
 800351a:	f000 f9fb 	bl	8003914 <USBD_LL_Transmit>

  return USBD_OK;
}
 800351e:	2000      	movs	r0, #0
 8003520:	bd08      	pop	{r3, pc}

08003522 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8003522:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8003524:	2203      	movs	r2, #3
{
 8003526:	b510      	push	{r4, lr}
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;
 8003528:	e9c0 3357 	strd	r3, r3, [r0, #348]	@ 0x15c
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800352c:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8003530:	460a      	mov	r2, r1
 8003532:	2100      	movs	r1, #0
 8003534:	f000 f9f7 	bl	8003926 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8003538:	2000      	movs	r0, #0
 800353a:	bd10      	pop	{r4, pc}

0800353c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800353c:	b508      	push	{r3, lr}
 800353e:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8003540:	460a      	mov	r2, r1
 8003542:	2100      	movs	r1, #0
 8003544:	f000 f9ef 	bl	8003926 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8003548:	2000      	movs	r0, #0
 800354a:	bd08      	pop	{r3, pc}

0800354c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800354c:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800354e:	2304      	movs	r3, #4
 8003550:	f8c0 3294 	str.w	r3, [r0, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8003554:	2300      	movs	r3, #0
 8003556:	461a      	mov	r2, r3
 8003558:	4619      	mov	r1, r3
 800355a:	f000 f9db 	bl	8003914 <USBD_LL_Transmit>

  return USBD_OK;
}
 800355e:	2000      	movs	r0, #0
 8003560:	bd08      	pop	{r3, pc}

08003562 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8003562:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8003564:	2305      	movs	r3, #5
 8003566:	f8c0 3294 	str.w	r3, [r0, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800356a:	2300      	movs	r3, #0
 800356c:	461a      	mov	r2, r3
 800356e:	4619      	mov	r1, r3
 8003570:	f000 f9d9 	bl	8003926 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8003574:	2000      	movs	r0, #0
 8003576:	bd08      	pop	{r3, pc}

08003578 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8003578:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800357a:	2200      	movs	r2, #0
 800357c:	490e      	ldr	r1, [pc, #56]	@ (80035b8 <MX_USB_DEVICE_Init+0x40>)
 800357e:	480f      	ldr	r0, [pc, #60]	@ (80035bc <MX_USB_DEVICE_Init+0x44>)
 8003580:	f7ff fc6a 	bl	8002e58 <USBD_Init>
 8003584:	b108      	cbz	r0, 800358a <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 8003586:	f7fc fff3 	bl	8000570 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800358a:	490d      	ldr	r1, [pc, #52]	@ (80035c0 <MX_USB_DEVICE_Init+0x48>)
 800358c:	480b      	ldr	r0, [pc, #44]	@ (80035bc <MX_USB_DEVICE_Init+0x44>)
 800358e:	f7ff fc78 	bl	8002e82 <USBD_RegisterClass>
 8003592:	b108      	cbz	r0, 8003598 <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 8003594:	f7fc ffec 	bl	8000570 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8003598:	490a      	ldr	r1, [pc, #40]	@ (80035c4 <MX_USB_DEVICE_Init+0x4c>)
 800359a:	4808      	ldr	r0, [pc, #32]	@ (80035bc <MX_USB_DEVICE_Init+0x44>)
 800359c:	f7ff fc1b 	bl	8002dd6 <USBD_CDC_RegisterInterface>
 80035a0:	b108      	cbz	r0, 80035a6 <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 80035a2:	f7fc ffe5 	bl	8000570 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80035a6:	4805      	ldr	r0, [pc, #20]	@ (80035bc <MX_USB_DEVICE_Init+0x44>)
 80035a8:	f7ff fc72 	bl	8002e90 <USBD_Start>
 80035ac:	b118      	cbz	r0, 80035b6 <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80035ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80035b2:	f7fc bfdd 	b.w	8000570 <Error_Handler>
}
 80035b6:	bd08      	pop	{r3, pc}
 80035b8:	2000016c 	.word	0x2000016c
 80035bc:	20000400 	.word	0x20000400
 80035c0:	200000e4 	.word	0x200000e4
 80035c4:	20000128 	.word	0x20000128

080035c8 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 80035c8:	2000      	movs	r0, #0
 80035ca:	4770      	bx	lr

080035cc <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 80035cc:	2000      	movs	r0, #0
 80035ce:	4770      	bx	lr

080035d0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80035d0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80035d2:	4c05      	ldr	r4, [pc, #20]	@ (80035e8 <CDC_Receive_FS+0x18>)
{
 80035d4:	4601      	mov	r1, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80035d6:	4620      	mov	r0, r4
 80035d8:	f7ff fc0c 	bl	8002df4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80035dc:	4620      	mov	r0, r4
 80035de:	f7ff fc28 	bl	8002e32 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 80035e2:	2000      	movs	r0, #0
 80035e4:	bd10      	pop	{r4, pc}
 80035e6:	bf00      	nop
 80035e8:	20000400 	.word	0x20000400

080035ec <CDC_Init_FS>:
{
 80035ec:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80035ee:	4c06      	ldr	r4, [pc, #24]	@ (8003608 <CDC_Init_FS+0x1c>)
 80035f0:	2200      	movs	r2, #0
 80035f2:	4620      	mov	r0, r4
 80035f4:	4905      	ldr	r1, [pc, #20]	@ (800360c <CDC_Init_FS+0x20>)
 80035f6:	f7ff fbf5 	bl	8002de4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80035fa:	4620      	mov	r0, r4
 80035fc:	4904      	ldr	r1, [pc, #16]	@ (8003610 <CDC_Init_FS+0x24>)
 80035fe:	f7ff fbf9 	bl	8002df4 <USBD_CDC_SetRxBuffer>
}
 8003602:	2000      	movs	r0, #0
 8003604:	bd10      	pop	{r4, pc}
 8003606:	bf00      	nop
 8003608:	20000400 	.word	0x20000400
 800360c:	200006c4 	.word	0x200006c4
 8003610:	20000ac4 	.word	0x20000ac4

08003614 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8003614:	b510      	push	{r4, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8003616:	4c09      	ldr	r4, [pc, #36]	@ (800363c <CDC_Transmit_FS+0x28>)
{
 8003618:	460a      	mov	r2, r1
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800361a:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
  if (hcdc->TxState != 0){
 800361e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8003622:	b943      	cbnz	r3, 8003636 <CDC_Transmit_FS+0x22>
    return USBD_BUSY;
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8003624:	4601      	mov	r1, r0
 8003626:	4620      	mov	r0, r4
 8003628:	f7ff fbdc 	bl	8002de4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800362c:	4620      	mov	r0, r4
  /* USER CODE END 7 */
  return result;
}
 800362e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8003632:	f7ff bbe5 	b.w	8002e00 <USBD_CDC_TransmitPacket>
}
 8003636:	2001      	movs	r0, #1
 8003638:	bd10      	pop	{r4, pc}
 800363a:	bf00      	nop
 800363c:	20000400 	.word	0x20000400

08003640 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8003640:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8003642:	4801      	ldr	r0, [pc, #4]	@ (8003648 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8003644:	800b      	strh	r3, [r1, #0]
}
 8003646:	4770      	bx	lr
 8003648:	20000158 	.word	0x20000158

0800364c <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800364c:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 800364e:	4801      	ldr	r0, [pc, #4]	@ (8003654 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8003650:	800b      	strh	r3, [r1, #0]
}
 8003652:	4770      	bx	lr
 8003654:	20000154 	.word	0x20000154

08003658 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8003658:	2300      	movs	r3, #0
{
 800365a:	b570      	push	{r4, r5, r6, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 800365c:	461e      	mov	r6, r3
 800365e:	1c4d      	adds	r5, r1, #1
  for (idx = 0; idx < len; idx++)
 8003660:	b2dc      	uxtb	r4, r3
 8003662:	42a2      	cmp	r2, r4
 8003664:	d800      	bhi.n	8003668 <IntToUnicode+0x10>
  }
}
 8003666:	bd70      	pop	{r4, r5, r6, pc}
      pbuf[2 * idx] = (value >> 28) + '0';
 8003668:	0f04      	lsrs	r4, r0, #28
    if (((value >> 28)) < 0xA)
 800366a:	f1b0 4f20 	cmp.w	r0, #2684354560	@ 0xa0000000
      pbuf[2 * idx] = (value >> 28) + '0';
 800366e:	bf34      	ite	cc
 8003670:	3430      	addcc	r4, #48	@ 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8003672:	3437      	addcs	r4, #55	@ 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8003674:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    value = value << 4;
 8003678:	0100      	lsls	r0, r0, #4
    pbuf[2 * idx + 1] = 0;
 800367a:	f805 6013 	strb.w	r6, [r5, r3, lsl #1]
  for (idx = 0; idx < len; idx++)
 800367e:	3301      	adds	r3, #1
 8003680:	e7ee      	b.n	8003660 <IntToUnicode+0x8>
	...

08003684 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8003684:	231a      	movs	r3, #26
{
 8003686:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8003688:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800368a:	4b0a      	ldr	r3, [pc, #40]	@ (80036b4 <USBD_FS_SerialStrDescriptor+0x30>)
 800368c:	f8d3 07e8 	ldr.w	r0, [r3, #2024]	@ 0x7e8
  deviceserial0 += deviceserial2;
 8003690:	f8d3 27f0 	ldr.w	r2, [r3, #2032]	@ 0x7f0
  if (deviceserial0 != 0)
 8003694:	1880      	adds	r0, r0, r2
 8003696:	d00a      	beq.n	80036ae <USBD_FS_SerialStrDescriptor+0x2a>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8003698:	f8d3 47ec 	ldr.w	r4, [r3, #2028]	@ 0x7ec
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800369c:	4906      	ldr	r1, [pc, #24]	@ (80036b8 <USBD_FS_SerialStrDescriptor+0x34>)
 800369e:	2208      	movs	r2, #8
 80036a0:	f7ff ffda 	bl	8003658 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80036a4:	2204      	movs	r2, #4
 80036a6:	4620      	mov	r0, r4
 80036a8:	3110      	adds	r1, #16
 80036aa:	f7ff ffd5 	bl	8003658 <IntToUnicode>
}
 80036ae:	4803      	ldr	r0, [pc, #12]	@ (80036bc <USBD_FS_SerialStrDescriptor+0x38>)
 80036b0:	bd10      	pop	{r4, pc}
 80036b2:	bf00      	nop
 80036b4:	1ffff000 	.word	0x1ffff000
 80036b8:	2000013a 	.word	0x2000013a
 80036bc:	20000138 	.word	0x20000138

080036c0 <USBD_FS_ManufacturerStrDescriptor>:
{
 80036c0:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80036c2:	4c04      	ldr	r4, [pc, #16]	@ (80036d4 <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 80036c4:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80036c6:	4804      	ldr	r0, [pc, #16]	@ (80036d8 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 80036c8:	4621      	mov	r1, r4
 80036ca:	f7ff fef9 	bl	80034c0 <USBD_GetString>
}
 80036ce:	4620      	mov	r0, r4
 80036d0:	bd10      	pop	{r4, pc}
 80036d2:	bf00      	nop
 80036d4:	20000ec4 	.word	0x20000ec4
 80036d8:	0800433a 	.word	0x0800433a

080036dc <USBD_FS_ProductStrDescriptor>:
{
 80036dc:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80036de:	4c04      	ldr	r4, [pc, #16]	@ (80036f0 <USBD_FS_ProductStrDescriptor+0x14>)
{
 80036e0:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80036e2:	4804      	ldr	r0, [pc, #16]	@ (80036f4 <USBD_FS_ProductStrDescriptor+0x18>)
 80036e4:	4621      	mov	r1, r4
 80036e6:	f7ff feeb 	bl	80034c0 <USBD_GetString>
}
 80036ea:	4620      	mov	r0, r4
 80036ec:	bd10      	pop	{r4, pc}
 80036ee:	bf00      	nop
 80036f0:	20000ec4 	.word	0x20000ec4
 80036f4:	0800434d 	.word	0x0800434d

080036f8 <USBD_FS_ConfigStrDescriptor>:
{
 80036f8:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80036fa:	4c04      	ldr	r4, [pc, #16]	@ (800370c <USBD_FS_ConfigStrDescriptor+0x14>)
{
 80036fc:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80036fe:	4804      	ldr	r0, [pc, #16]	@ (8003710 <USBD_FS_ConfigStrDescriptor+0x18>)
 8003700:	4621      	mov	r1, r4
 8003702:	f7ff fedd 	bl	80034c0 <USBD_GetString>
}
 8003706:	4620      	mov	r0, r4
 8003708:	bd10      	pop	{r4, pc}
 800370a:	bf00      	nop
 800370c:	20000ec4 	.word	0x20000ec4
 8003710:	08004363 	.word	0x08004363

08003714 <USBD_FS_InterfaceStrDescriptor>:
{
 8003714:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8003716:	4c04      	ldr	r4, [pc, #16]	@ (8003728 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 8003718:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800371a:	4804      	ldr	r0, [pc, #16]	@ (800372c <USBD_FS_InterfaceStrDescriptor+0x18>)
 800371c:	4621      	mov	r1, r4
 800371e:	f7ff fecf 	bl	80034c0 <USBD_GetString>
}
 8003722:	4620      	mov	r0, r4
 8003724:	bd10      	pop	{r4, pc}
 8003726:	bf00      	nop
 8003728:	20000ec4 	.word	0x20000ec4
 800372c:	0800436e 	.word	0x0800436e

08003730 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8003730:	b118      	cbz	r0, 800373a <USBD_Get_USB_Status+0xa>
 8003732:	2802      	cmp	r0, #2
 8003734:	bf0c      	ite	eq
 8003736:	2001      	moveq	r0, #1
 8003738:	2002      	movne	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 800373a:	4770      	bx	lr

0800373c <HAL_PCD_MspInit>:
{
 800373c:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 800373e:	4b0e      	ldr	r3, [pc, #56]	@ (8003778 <HAL_PCD_MspInit+0x3c>)
 8003740:	6802      	ldr	r2, [r0, #0]
 8003742:	429a      	cmp	r2, r3
 8003744:	d115      	bne.n	8003772 <HAL_PCD_MspInit+0x36>
    __HAL_RCC_USB_CLK_ENABLE();
 8003746:	f503 33da 	add.w	r3, r3, #111616	@ 0x1b400
 800374a:	69da      	ldr	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800374c:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 800374e:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8003752:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8003754:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 8003756:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8003758:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 800375a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800375e:	9301      	str	r3, [sp, #4]
 8003760:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8003762:	f7fd f8c9 	bl	80008f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8003766:	2014      	movs	r0, #20
}
 8003768:	b003      	add	sp, #12
 800376a:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800376e:	f7fd b8f3 	b.w	8000958 <HAL_NVIC_EnableIRQ>
}
 8003772:	b003      	add	sp, #12
 8003774:	f85d fb04 	ldr.w	pc, [sp], #4
 8003778:	40005c00 	.word	0x40005c00

0800377c <HAL_PCD_SetupStageCallback>:
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800377c:	f500 7126 	add.w	r1, r0, #664	@ 0x298
 8003780:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 8003784:	f7ff bb9d 	b.w	8002ec2 <USBD_LL_SetupStage>

08003788 <HAL_PCD_DataOutStageCallback>:
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8003788:	2328      	movs	r3, #40	@ 0x28
 800378a:	fb03 0301 	mla	r3, r3, r1, r0
 800378e:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 8003792:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
 8003796:	f7ff bbc1 	b.w	8002f1c <USBD_LL_DataOutStage>

0800379a <HAL_PCD_DataInStageCallback>:
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800379a:	2328      	movs	r3, #40	@ 0x28
 800379c:	fb03 0301 	mla	r3, r3, r1, r0
 80037a0:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 80037a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80037a6:	f7ff bbf1 	b.w	8002f8c <USBD_LL_DataInStage>

080037aa <HAL_PCD_SOFCallback>:
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80037aa:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 80037ae:	f7ff bc86 	b.w	80030be <USBD_LL_SOF>

080037b2 <HAL_PCD_ResetCallback>:
{
 80037b2:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80037b4:	7983      	ldrb	r3, [r0, #6]
{
 80037b6:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d001      	beq.n	80037c0 <HAL_PCD_ResetCallback+0xe>
    Error_Handler();
 80037bc:	f7fc fed8 	bl	8000570 <Error_Handler>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80037c0:	f8d4 02d4 	ldr.w	r0, [r4, #724]	@ 0x2d4
 80037c4:	2101      	movs	r1, #1
 80037c6:	f7ff fc64 	bl	8003092 <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80037ca:	f8d4 02d4 	ldr.w	r0, [r4, #724]	@ 0x2d4
}
 80037ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80037d2:	f7ff bc37 	b.w	8003044 <USBD_LL_Reset>
	...

080037d8 <HAL_PCD_SuspendCallback>:
{
 80037d8:	b510      	push	{r4, lr}
 80037da:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80037dc:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 80037e0:	f7ff fc5a 	bl	8003098 <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 80037e4:	7aa3      	ldrb	r3, [r4, #10]
 80037e6:	b123      	cbz	r3, 80037f2 <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80037e8:	4a02      	ldr	r2, [pc, #8]	@ (80037f4 <HAL_PCD_SuspendCallback+0x1c>)
 80037ea:	6913      	ldr	r3, [r2, #16]
 80037ec:	f043 0306 	orr.w	r3, r3, #6
 80037f0:	6113      	str	r3, [r2, #16]
}
 80037f2:	bd10      	pop	{r4, pc}
 80037f4:	e000ed00 	.word	0xe000ed00

080037f8 <HAL_PCD_ResumeCallback>:
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80037f8:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 80037fc:	f7ff bc55 	b.w	80030aa <USBD_LL_Resume>

08003800 <USBD_LL_Init>:
{
 8003800:	b510      	push	{r4, lr}
  hpcd_USB_FS.Instance = USB;
 8003802:	4b1d      	ldr	r3, [pc, #116]	@ (8003878 <USBD_LL_Init+0x78>)
{
 8003804:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 8003806:	481d      	ldr	r0, [pc, #116]	@ (800387c <USBD_LL_Init+0x7c>)
  hpcd_USB_FS.Instance = USB;
 8003808:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800380a:	2308      	movs	r3, #8
 800380c:	7103      	strb	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800380e:	2302      	movs	r3, #2
 8003810:	7183      	strb	r3, [r0, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8003812:	2300      	movs	r3, #0
  hpcd_USB_FS.pData = pdev;
 8003814:	f8c0 42d4 	str.w	r4, [r0, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 8003818:	f8c4 02c0 	str.w	r0, [r4, #704]	@ 0x2c0
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800381c:	8143      	strh	r3, [r0, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800381e:	7303      	strb	r3, [r0, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8003820:	f7fd f9b2 	bl	8000b88 <HAL_PCD_Init>
 8003824:	b108      	cbz	r0, 800382a <USBD_LL_Init+0x2a>
    Error_Handler( );
 8003826:	f7fc fea3 	bl	8000570 <Error_Handler>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800382a:	2200      	movs	r2, #0
 800382c:	2318      	movs	r3, #24
 800382e:	4611      	mov	r1, r2
 8003830:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 8003834:	f7fe f833 	bl	800189e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8003838:	2358      	movs	r3, #88	@ 0x58
 800383a:	2200      	movs	r2, #0
 800383c:	2180      	movs	r1, #128	@ 0x80
 800383e:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 8003842:	f7fe f82c 	bl	800189e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8003846:	23c0      	movs	r3, #192	@ 0xc0
 8003848:	2200      	movs	r2, #0
 800384a:	2181      	movs	r1, #129	@ 0x81
 800384c:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 8003850:	f7fe f825 	bl	800189e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8003854:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8003858:	2200      	movs	r2, #0
 800385a:	2101      	movs	r1, #1
 800385c:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 8003860:	f7fe f81d 	bl	800189e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8003864:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003868:	2200      	movs	r2, #0
 800386a:	2182      	movs	r1, #130	@ 0x82
 800386c:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 8003870:	f7fe f815 	bl	800189e <HAL_PCDEx_PMAConfig>
}
 8003874:	2000      	movs	r0, #0
 8003876:	bd10      	pop	{r4, pc}
 8003878:	40005c00 	.word	0x40005c00
 800387c:	200012e4 	.word	0x200012e4

08003880 <USBD_LL_Start>:
{
 8003880:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8003882:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 8003886:	f7fd f9e2 	bl	8000c4e <HAL_PCD_Start>
}
 800388a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800388e:	f7ff bf4f 	b.w	8003730 <USBD_Get_USB_Status>

08003892 <USBD_LL_OpenEP>:
{
 8003892:	b510      	push	{r4, lr}
 8003894:	4614      	mov	r4, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8003896:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
{
 800389a:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800389c:	4623      	mov	r3, r4
 800389e:	f7fd ff07 	bl	80016b0 <HAL_PCD_EP_Open>
}
 80038a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 80038a6:	f7ff bf43 	b.w	8003730 <USBD_Get_USB_Status>

080038aa <USBD_LL_CloseEP>:
{
 80038aa:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80038ac:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 80038b0:	f7fd ff2e 	bl	8001710 <HAL_PCD_EP_Close>
}
 80038b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 80038b8:	f7ff bf3a 	b.w	8003730 <USBD_Get_USB_Status>

080038bc <USBD_LL_StallEP>:
{
 80038bc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80038be:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 80038c2:	f7fd ff84 	bl	80017ce <HAL_PCD_EP_SetStall>
}
 80038c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 80038ca:	f7ff bf31 	b.w	8003730 <USBD_Get_USB_Status>

080038ce <USBD_LL_ClearStallEP>:
{
 80038ce:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80038d0:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 80038d4:	f7fd ffb1 	bl	800183a <HAL_PCD_EP_ClrStall>
}
 80038d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 80038dc:	f7ff bf28 	b.w	8003730 <USBD_Get_USB_Status>

080038e0 <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80038e0:	2228      	movs	r2, #40	@ 0x28
  if((ep_addr & 0x80) == 0x80)
 80038e2:	f011 0f80 	tst.w	r1, #128	@ 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80038e6:	f8d0 32c0 	ldr.w	r3, [r0, #704]	@ 0x2c0
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80038ea:	bf1b      	ittet	ne
 80038ec:	f001 017f 	andne.w	r1, r1, #127	@ 0x7f
 80038f0:	fb02 3301 	mlane	r3, r2, r1, r3
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80038f4:	fb02 3301 	mlaeq	r3, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80038f8:	7c98      	ldrbne	r0, [r3, #18]
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80038fa:	bf08      	it	eq
 80038fc:	f893 0152 	ldrbeq.w	r0, [r3, #338]	@ 0x152
}
 8003900:	4770      	bx	lr

08003902 <USBD_LL_SetUSBAddress>:
{
 8003902:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8003904:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 8003908:	f7fd f9ba 	bl	8000c80 <HAL_PCD_SetAddress>
}
 800390c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003910:	f7ff bf0e 	b.w	8003730 <USBD_Get_USB_Status>

08003914 <USBD_LL_Transmit>:
{
 8003914:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8003916:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 800391a:	f7fd ff40 	bl	800179e <HAL_PCD_EP_Transmit>
}
 800391e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003922:	f7ff bf05 	b.w	8003730 <USBD_Get_USB_Status>

08003926 <USBD_LL_PrepareReceive>:
{
 8003926:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8003928:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 800392c:	f7fd ff18 	bl	8001760 <HAL_PCD_EP_Receive>
}
 8003930:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003934:	f7ff befc 	b.w	8003730 <USBD_Get_USB_Status>

08003938 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8003938:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 800393c:	f7fd bf27 	b.w	800178e <HAL_PCD_EP_GetRxCount>

08003940 <USBD_static_malloc>:
}
 8003940:	4800      	ldr	r0, [pc, #0]	@ (8003944 <USBD_static_malloc+0x4>)
 8003942:	4770      	bx	lr
 8003944:	200010c4 	.word	0x200010c4

08003948 <USBD_static_free>:
}
 8003948:	4770      	bx	lr

0800394a <HAL_PCDEx_SetConnectionState>:
}
 800394a:	4770      	bx	lr

0800394c <siprintf>:
 800394c:	b40e      	push	{r1, r2, r3}
 800394e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003952:	b500      	push	{lr}
 8003954:	b09c      	sub	sp, #112	@ 0x70
 8003956:	ab1d      	add	r3, sp, #116	@ 0x74
 8003958:	9002      	str	r0, [sp, #8]
 800395a:	9006      	str	r0, [sp, #24]
 800395c:	9107      	str	r1, [sp, #28]
 800395e:	9104      	str	r1, [sp, #16]
 8003960:	4808      	ldr	r0, [pc, #32]	@ (8003984 <siprintf+0x38>)
 8003962:	4909      	ldr	r1, [pc, #36]	@ (8003988 <siprintf+0x3c>)
 8003964:	f853 2b04 	ldr.w	r2, [r3], #4
 8003968:	9105      	str	r1, [sp, #20]
 800396a:	6800      	ldr	r0, [r0, #0]
 800396c:	a902      	add	r1, sp, #8
 800396e:	9301      	str	r3, [sp, #4]
 8003970:	f000 f992 	bl	8003c98 <_svfiprintf_r>
 8003974:	2200      	movs	r2, #0
 8003976:	9b02      	ldr	r3, [sp, #8]
 8003978:	701a      	strb	r2, [r3, #0]
 800397a:	b01c      	add	sp, #112	@ 0x70
 800397c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003980:	b003      	add	sp, #12
 8003982:	4770      	bx	lr
 8003984:	20000188 	.word	0x20000188
 8003988:	ffff0208 	.word	0xffff0208

0800398c <memset>:
 800398c:	4603      	mov	r3, r0
 800398e:	4402      	add	r2, r0
 8003990:	4293      	cmp	r3, r2
 8003992:	d100      	bne.n	8003996 <memset+0xa>
 8003994:	4770      	bx	lr
 8003996:	f803 1b01 	strb.w	r1, [r3], #1
 800399a:	e7f9      	b.n	8003990 <memset+0x4>

0800399c <__errno>:
 800399c:	4b01      	ldr	r3, [pc, #4]	@ (80039a4 <__errno+0x8>)
 800399e:	6818      	ldr	r0, [r3, #0]
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	20000188 	.word	0x20000188

080039a8 <__libc_init_array>:
 80039a8:	b570      	push	{r4, r5, r6, lr}
 80039aa:	2600      	movs	r6, #0
 80039ac:	4d0c      	ldr	r5, [pc, #48]	@ (80039e0 <__libc_init_array+0x38>)
 80039ae:	4c0d      	ldr	r4, [pc, #52]	@ (80039e4 <__libc_init_array+0x3c>)
 80039b0:	1b64      	subs	r4, r4, r5
 80039b2:	10a4      	asrs	r4, r4, #2
 80039b4:	42a6      	cmp	r6, r4
 80039b6:	d109      	bne.n	80039cc <__libc_init_array+0x24>
 80039b8:	f000 fc78 	bl	80042ac <_init>
 80039bc:	2600      	movs	r6, #0
 80039be:	4d0a      	ldr	r5, [pc, #40]	@ (80039e8 <__libc_init_array+0x40>)
 80039c0:	4c0a      	ldr	r4, [pc, #40]	@ (80039ec <__libc_init_array+0x44>)
 80039c2:	1b64      	subs	r4, r4, r5
 80039c4:	10a4      	asrs	r4, r4, #2
 80039c6:	42a6      	cmp	r6, r4
 80039c8:	d105      	bne.n	80039d6 <__libc_init_array+0x2e>
 80039ca:	bd70      	pop	{r4, r5, r6, pc}
 80039cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80039d0:	4798      	blx	r3
 80039d2:	3601      	adds	r6, #1
 80039d4:	e7ee      	b.n	80039b4 <__libc_init_array+0xc>
 80039d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80039da:	4798      	blx	r3
 80039dc:	3601      	adds	r6, #1
 80039de:	e7f2      	b.n	80039c6 <__libc_init_array+0x1e>
 80039e0:	080043b8 	.word	0x080043b8
 80039e4:	080043b8 	.word	0x080043b8
 80039e8:	080043b8 	.word	0x080043b8
 80039ec:	080043bc 	.word	0x080043bc

080039f0 <__retarget_lock_acquire_recursive>:
 80039f0:	4770      	bx	lr

080039f2 <__retarget_lock_release_recursive>:
 80039f2:	4770      	bx	lr

080039f4 <_free_r>:
 80039f4:	b538      	push	{r3, r4, r5, lr}
 80039f6:	4605      	mov	r5, r0
 80039f8:	2900      	cmp	r1, #0
 80039fa:	d040      	beq.n	8003a7e <_free_r+0x8a>
 80039fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a00:	1f0c      	subs	r4, r1, #4
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	bfb8      	it	lt
 8003a06:	18e4      	addlt	r4, r4, r3
 8003a08:	f000 f8de 	bl	8003bc8 <__malloc_lock>
 8003a0c:	4a1c      	ldr	r2, [pc, #112]	@ (8003a80 <_free_r+0x8c>)
 8003a0e:	6813      	ldr	r3, [r2, #0]
 8003a10:	b933      	cbnz	r3, 8003a20 <_free_r+0x2c>
 8003a12:	6063      	str	r3, [r4, #4]
 8003a14:	6014      	str	r4, [r2, #0]
 8003a16:	4628      	mov	r0, r5
 8003a18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a1c:	f000 b8da 	b.w	8003bd4 <__malloc_unlock>
 8003a20:	42a3      	cmp	r3, r4
 8003a22:	d908      	bls.n	8003a36 <_free_r+0x42>
 8003a24:	6820      	ldr	r0, [r4, #0]
 8003a26:	1821      	adds	r1, r4, r0
 8003a28:	428b      	cmp	r3, r1
 8003a2a:	bf01      	itttt	eq
 8003a2c:	6819      	ldreq	r1, [r3, #0]
 8003a2e:	685b      	ldreq	r3, [r3, #4]
 8003a30:	1809      	addeq	r1, r1, r0
 8003a32:	6021      	streq	r1, [r4, #0]
 8003a34:	e7ed      	b.n	8003a12 <_free_r+0x1e>
 8003a36:	461a      	mov	r2, r3
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	b10b      	cbz	r3, 8003a40 <_free_r+0x4c>
 8003a3c:	42a3      	cmp	r3, r4
 8003a3e:	d9fa      	bls.n	8003a36 <_free_r+0x42>
 8003a40:	6811      	ldr	r1, [r2, #0]
 8003a42:	1850      	adds	r0, r2, r1
 8003a44:	42a0      	cmp	r0, r4
 8003a46:	d10b      	bne.n	8003a60 <_free_r+0x6c>
 8003a48:	6820      	ldr	r0, [r4, #0]
 8003a4a:	4401      	add	r1, r0
 8003a4c:	1850      	adds	r0, r2, r1
 8003a4e:	4283      	cmp	r3, r0
 8003a50:	6011      	str	r1, [r2, #0]
 8003a52:	d1e0      	bne.n	8003a16 <_free_r+0x22>
 8003a54:	6818      	ldr	r0, [r3, #0]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	4408      	add	r0, r1
 8003a5a:	6010      	str	r0, [r2, #0]
 8003a5c:	6053      	str	r3, [r2, #4]
 8003a5e:	e7da      	b.n	8003a16 <_free_r+0x22>
 8003a60:	d902      	bls.n	8003a68 <_free_r+0x74>
 8003a62:	230c      	movs	r3, #12
 8003a64:	602b      	str	r3, [r5, #0]
 8003a66:	e7d6      	b.n	8003a16 <_free_r+0x22>
 8003a68:	6820      	ldr	r0, [r4, #0]
 8003a6a:	1821      	adds	r1, r4, r0
 8003a6c:	428b      	cmp	r3, r1
 8003a6e:	bf01      	itttt	eq
 8003a70:	6819      	ldreq	r1, [r3, #0]
 8003a72:	685b      	ldreq	r3, [r3, #4]
 8003a74:	1809      	addeq	r1, r1, r0
 8003a76:	6021      	streq	r1, [r4, #0]
 8003a78:	6063      	str	r3, [r4, #4]
 8003a7a:	6054      	str	r4, [r2, #4]
 8003a7c:	e7cb      	b.n	8003a16 <_free_r+0x22>
 8003a7e:	bd38      	pop	{r3, r4, r5, pc}
 8003a80:	20001700 	.word	0x20001700

08003a84 <sbrk_aligned>:
 8003a84:	b570      	push	{r4, r5, r6, lr}
 8003a86:	4e0f      	ldr	r6, [pc, #60]	@ (8003ac4 <sbrk_aligned+0x40>)
 8003a88:	460c      	mov	r4, r1
 8003a8a:	6831      	ldr	r1, [r6, #0]
 8003a8c:	4605      	mov	r5, r0
 8003a8e:	b911      	cbnz	r1, 8003a96 <sbrk_aligned+0x12>
 8003a90:	f000 fbaa 	bl	80041e8 <_sbrk_r>
 8003a94:	6030      	str	r0, [r6, #0]
 8003a96:	4621      	mov	r1, r4
 8003a98:	4628      	mov	r0, r5
 8003a9a:	f000 fba5 	bl	80041e8 <_sbrk_r>
 8003a9e:	1c43      	adds	r3, r0, #1
 8003aa0:	d103      	bne.n	8003aaa <sbrk_aligned+0x26>
 8003aa2:	f04f 34ff 	mov.w	r4, #4294967295
 8003aa6:	4620      	mov	r0, r4
 8003aa8:	bd70      	pop	{r4, r5, r6, pc}
 8003aaa:	1cc4      	adds	r4, r0, #3
 8003aac:	f024 0403 	bic.w	r4, r4, #3
 8003ab0:	42a0      	cmp	r0, r4
 8003ab2:	d0f8      	beq.n	8003aa6 <sbrk_aligned+0x22>
 8003ab4:	1a21      	subs	r1, r4, r0
 8003ab6:	4628      	mov	r0, r5
 8003ab8:	f000 fb96 	bl	80041e8 <_sbrk_r>
 8003abc:	3001      	adds	r0, #1
 8003abe:	d1f2      	bne.n	8003aa6 <sbrk_aligned+0x22>
 8003ac0:	e7ef      	b.n	8003aa2 <sbrk_aligned+0x1e>
 8003ac2:	bf00      	nop
 8003ac4:	200016fc 	.word	0x200016fc

08003ac8 <_malloc_r>:
 8003ac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003acc:	1ccd      	adds	r5, r1, #3
 8003ace:	f025 0503 	bic.w	r5, r5, #3
 8003ad2:	3508      	adds	r5, #8
 8003ad4:	2d0c      	cmp	r5, #12
 8003ad6:	bf38      	it	cc
 8003ad8:	250c      	movcc	r5, #12
 8003ada:	2d00      	cmp	r5, #0
 8003adc:	4606      	mov	r6, r0
 8003ade:	db01      	blt.n	8003ae4 <_malloc_r+0x1c>
 8003ae0:	42a9      	cmp	r1, r5
 8003ae2:	d904      	bls.n	8003aee <_malloc_r+0x26>
 8003ae4:	230c      	movs	r3, #12
 8003ae6:	6033      	str	r3, [r6, #0]
 8003ae8:	2000      	movs	r0, #0
 8003aea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003aee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003bc4 <_malloc_r+0xfc>
 8003af2:	f000 f869 	bl	8003bc8 <__malloc_lock>
 8003af6:	f8d8 3000 	ldr.w	r3, [r8]
 8003afa:	461c      	mov	r4, r3
 8003afc:	bb44      	cbnz	r4, 8003b50 <_malloc_r+0x88>
 8003afe:	4629      	mov	r1, r5
 8003b00:	4630      	mov	r0, r6
 8003b02:	f7ff ffbf 	bl	8003a84 <sbrk_aligned>
 8003b06:	1c43      	adds	r3, r0, #1
 8003b08:	4604      	mov	r4, r0
 8003b0a:	d158      	bne.n	8003bbe <_malloc_r+0xf6>
 8003b0c:	f8d8 4000 	ldr.w	r4, [r8]
 8003b10:	4627      	mov	r7, r4
 8003b12:	2f00      	cmp	r7, #0
 8003b14:	d143      	bne.n	8003b9e <_malloc_r+0xd6>
 8003b16:	2c00      	cmp	r4, #0
 8003b18:	d04b      	beq.n	8003bb2 <_malloc_r+0xea>
 8003b1a:	6823      	ldr	r3, [r4, #0]
 8003b1c:	4639      	mov	r1, r7
 8003b1e:	4630      	mov	r0, r6
 8003b20:	eb04 0903 	add.w	r9, r4, r3
 8003b24:	f000 fb60 	bl	80041e8 <_sbrk_r>
 8003b28:	4581      	cmp	r9, r0
 8003b2a:	d142      	bne.n	8003bb2 <_malloc_r+0xea>
 8003b2c:	6821      	ldr	r1, [r4, #0]
 8003b2e:	4630      	mov	r0, r6
 8003b30:	1a6d      	subs	r5, r5, r1
 8003b32:	4629      	mov	r1, r5
 8003b34:	f7ff ffa6 	bl	8003a84 <sbrk_aligned>
 8003b38:	3001      	adds	r0, #1
 8003b3a:	d03a      	beq.n	8003bb2 <_malloc_r+0xea>
 8003b3c:	6823      	ldr	r3, [r4, #0]
 8003b3e:	442b      	add	r3, r5
 8003b40:	6023      	str	r3, [r4, #0]
 8003b42:	f8d8 3000 	ldr.w	r3, [r8]
 8003b46:	685a      	ldr	r2, [r3, #4]
 8003b48:	bb62      	cbnz	r2, 8003ba4 <_malloc_r+0xdc>
 8003b4a:	f8c8 7000 	str.w	r7, [r8]
 8003b4e:	e00f      	b.n	8003b70 <_malloc_r+0xa8>
 8003b50:	6822      	ldr	r2, [r4, #0]
 8003b52:	1b52      	subs	r2, r2, r5
 8003b54:	d420      	bmi.n	8003b98 <_malloc_r+0xd0>
 8003b56:	2a0b      	cmp	r2, #11
 8003b58:	d917      	bls.n	8003b8a <_malloc_r+0xc2>
 8003b5a:	1961      	adds	r1, r4, r5
 8003b5c:	42a3      	cmp	r3, r4
 8003b5e:	6025      	str	r5, [r4, #0]
 8003b60:	bf18      	it	ne
 8003b62:	6059      	strne	r1, [r3, #4]
 8003b64:	6863      	ldr	r3, [r4, #4]
 8003b66:	bf08      	it	eq
 8003b68:	f8c8 1000 	streq.w	r1, [r8]
 8003b6c:	5162      	str	r2, [r4, r5]
 8003b6e:	604b      	str	r3, [r1, #4]
 8003b70:	4630      	mov	r0, r6
 8003b72:	f000 f82f 	bl	8003bd4 <__malloc_unlock>
 8003b76:	f104 000b 	add.w	r0, r4, #11
 8003b7a:	1d23      	adds	r3, r4, #4
 8003b7c:	f020 0007 	bic.w	r0, r0, #7
 8003b80:	1ac2      	subs	r2, r0, r3
 8003b82:	bf1c      	itt	ne
 8003b84:	1a1b      	subne	r3, r3, r0
 8003b86:	50a3      	strne	r3, [r4, r2]
 8003b88:	e7af      	b.n	8003aea <_malloc_r+0x22>
 8003b8a:	6862      	ldr	r2, [r4, #4]
 8003b8c:	42a3      	cmp	r3, r4
 8003b8e:	bf0c      	ite	eq
 8003b90:	f8c8 2000 	streq.w	r2, [r8]
 8003b94:	605a      	strne	r2, [r3, #4]
 8003b96:	e7eb      	b.n	8003b70 <_malloc_r+0xa8>
 8003b98:	4623      	mov	r3, r4
 8003b9a:	6864      	ldr	r4, [r4, #4]
 8003b9c:	e7ae      	b.n	8003afc <_malloc_r+0x34>
 8003b9e:	463c      	mov	r4, r7
 8003ba0:	687f      	ldr	r7, [r7, #4]
 8003ba2:	e7b6      	b.n	8003b12 <_malloc_r+0x4a>
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	42a3      	cmp	r3, r4
 8003baa:	d1fb      	bne.n	8003ba4 <_malloc_r+0xdc>
 8003bac:	2300      	movs	r3, #0
 8003bae:	6053      	str	r3, [r2, #4]
 8003bb0:	e7de      	b.n	8003b70 <_malloc_r+0xa8>
 8003bb2:	230c      	movs	r3, #12
 8003bb4:	4630      	mov	r0, r6
 8003bb6:	6033      	str	r3, [r6, #0]
 8003bb8:	f000 f80c 	bl	8003bd4 <__malloc_unlock>
 8003bbc:	e794      	b.n	8003ae8 <_malloc_r+0x20>
 8003bbe:	6005      	str	r5, [r0, #0]
 8003bc0:	e7d6      	b.n	8003b70 <_malloc_r+0xa8>
 8003bc2:	bf00      	nop
 8003bc4:	20001700 	.word	0x20001700

08003bc8 <__malloc_lock>:
 8003bc8:	4801      	ldr	r0, [pc, #4]	@ (8003bd0 <__malloc_lock+0x8>)
 8003bca:	f7ff bf11 	b.w	80039f0 <__retarget_lock_acquire_recursive>
 8003bce:	bf00      	nop
 8003bd0:	200016f8 	.word	0x200016f8

08003bd4 <__malloc_unlock>:
 8003bd4:	4801      	ldr	r0, [pc, #4]	@ (8003bdc <__malloc_unlock+0x8>)
 8003bd6:	f7ff bf0c 	b.w	80039f2 <__retarget_lock_release_recursive>
 8003bda:	bf00      	nop
 8003bdc:	200016f8 	.word	0x200016f8

08003be0 <__ssputs_r>:
 8003be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003be4:	461f      	mov	r7, r3
 8003be6:	688e      	ldr	r6, [r1, #8]
 8003be8:	4682      	mov	sl, r0
 8003bea:	42be      	cmp	r6, r7
 8003bec:	460c      	mov	r4, r1
 8003bee:	4690      	mov	r8, r2
 8003bf0:	680b      	ldr	r3, [r1, #0]
 8003bf2:	d82d      	bhi.n	8003c50 <__ssputs_r+0x70>
 8003bf4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003bf8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003bfc:	d026      	beq.n	8003c4c <__ssputs_r+0x6c>
 8003bfe:	6965      	ldr	r5, [r4, #20]
 8003c00:	6909      	ldr	r1, [r1, #16]
 8003c02:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003c06:	eba3 0901 	sub.w	r9, r3, r1
 8003c0a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003c0e:	1c7b      	adds	r3, r7, #1
 8003c10:	444b      	add	r3, r9
 8003c12:	106d      	asrs	r5, r5, #1
 8003c14:	429d      	cmp	r5, r3
 8003c16:	bf38      	it	cc
 8003c18:	461d      	movcc	r5, r3
 8003c1a:	0553      	lsls	r3, r2, #21
 8003c1c:	d527      	bpl.n	8003c6e <__ssputs_r+0x8e>
 8003c1e:	4629      	mov	r1, r5
 8003c20:	f7ff ff52 	bl	8003ac8 <_malloc_r>
 8003c24:	4606      	mov	r6, r0
 8003c26:	b360      	cbz	r0, 8003c82 <__ssputs_r+0xa2>
 8003c28:	464a      	mov	r2, r9
 8003c2a:	6921      	ldr	r1, [r4, #16]
 8003c2c:	f000 fafa 	bl	8004224 <memcpy>
 8003c30:	89a3      	ldrh	r3, [r4, #12]
 8003c32:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003c36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c3a:	81a3      	strh	r3, [r4, #12]
 8003c3c:	6126      	str	r6, [r4, #16]
 8003c3e:	444e      	add	r6, r9
 8003c40:	6026      	str	r6, [r4, #0]
 8003c42:	463e      	mov	r6, r7
 8003c44:	6165      	str	r5, [r4, #20]
 8003c46:	eba5 0509 	sub.w	r5, r5, r9
 8003c4a:	60a5      	str	r5, [r4, #8]
 8003c4c:	42be      	cmp	r6, r7
 8003c4e:	d900      	bls.n	8003c52 <__ssputs_r+0x72>
 8003c50:	463e      	mov	r6, r7
 8003c52:	4632      	mov	r2, r6
 8003c54:	4641      	mov	r1, r8
 8003c56:	6820      	ldr	r0, [r4, #0]
 8003c58:	f000 faac 	bl	80041b4 <memmove>
 8003c5c:	2000      	movs	r0, #0
 8003c5e:	68a3      	ldr	r3, [r4, #8]
 8003c60:	1b9b      	subs	r3, r3, r6
 8003c62:	60a3      	str	r3, [r4, #8]
 8003c64:	6823      	ldr	r3, [r4, #0]
 8003c66:	4433      	add	r3, r6
 8003c68:	6023      	str	r3, [r4, #0]
 8003c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c6e:	462a      	mov	r2, r5
 8003c70:	f000 fae6 	bl	8004240 <_realloc_r>
 8003c74:	4606      	mov	r6, r0
 8003c76:	2800      	cmp	r0, #0
 8003c78:	d1e0      	bne.n	8003c3c <__ssputs_r+0x5c>
 8003c7a:	4650      	mov	r0, sl
 8003c7c:	6921      	ldr	r1, [r4, #16]
 8003c7e:	f7ff feb9 	bl	80039f4 <_free_r>
 8003c82:	230c      	movs	r3, #12
 8003c84:	f8ca 3000 	str.w	r3, [sl]
 8003c88:	89a3      	ldrh	r3, [r4, #12]
 8003c8a:	f04f 30ff 	mov.w	r0, #4294967295
 8003c8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c92:	81a3      	strh	r3, [r4, #12]
 8003c94:	e7e9      	b.n	8003c6a <__ssputs_r+0x8a>
	...

08003c98 <_svfiprintf_r>:
 8003c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c9c:	4698      	mov	r8, r3
 8003c9e:	898b      	ldrh	r3, [r1, #12]
 8003ca0:	4607      	mov	r7, r0
 8003ca2:	061b      	lsls	r3, r3, #24
 8003ca4:	460d      	mov	r5, r1
 8003ca6:	4614      	mov	r4, r2
 8003ca8:	b09d      	sub	sp, #116	@ 0x74
 8003caa:	d510      	bpl.n	8003cce <_svfiprintf_r+0x36>
 8003cac:	690b      	ldr	r3, [r1, #16]
 8003cae:	b973      	cbnz	r3, 8003cce <_svfiprintf_r+0x36>
 8003cb0:	2140      	movs	r1, #64	@ 0x40
 8003cb2:	f7ff ff09 	bl	8003ac8 <_malloc_r>
 8003cb6:	6028      	str	r0, [r5, #0]
 8003cb8:	6128      	str	r0, [r5, #16]
 8003cba:	b930      	cbnz	r0, 8003cca <_svfiprintf_r+0x32>
 8003cbc:	230c      	movs	r3, #12
 8003cbe:	603b      	str	r3, [r7, #0]
 8003cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8003cc4:	b01d      	add	sp, #116	@ 0x74
 8003cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cca:	2340      	movs	r3, #64	@ 0x40
 8003ccc:	616b      	str	r3, [r5, #20]
 8003cce:	2300      	movs	r3, #0
 8003cd0:	9309      	str	r3, [sp, #36]	@ 0x24
 8003cd2:	2320      	movs	r3, #32
 8003cd4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003cd8:	2330      	movs	r3, #48	@ 0x30
 8003cda:	f04f 0901 	mov.w	r9, #1
 8003cde:	f8cd 800c 	str.w	r8, [sp, #12]
 8003ce2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003e7c <_svfiprintf_r+0x1e4>
 8003ce6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003cea:	4623      	mov	r3, r4
 8003cec:	469a      	mov	sl, r3
 8003cee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003cf2:	b10a      	cbz	r2, 8003cf8 <_svfiprintf_r+0x60>
 8003cf4:	2a25      	cmp	r2, #37	@ 0x25
 8003cf6:	d1f9      	bne.n	8003cec <_svfiprintf_r+0x54>
 8003cf8:	ebba 0b04 	subs.w	fp, sl, r4
 8003cfc:	d00b      	beq.n	8003d16 <_svfiprintf_r+0x7e>
 8003cfe:	465b      	mov	r3, fp
 8003d00:	4622      	mov	r2, r4
 8003d02:	4629      	mov	r1, r5
 8003d04:	4638      	mov	r0, r7
 8003d06:	f7ff ff6b 	bl	8003be0 <__ssputs_r>
 8003d0a:	3001      	adds	r0, #1
 8003d0c:	f000 80a7 	beq.w	8003e5e <_svfiprintf_r+0x1c6>
 8003d10:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003d12:	445a      	add	r2, fp
 8003d14:	9209      	str	r2, [sp, #36]	@ 0x24
 8003d16:	f89a 3000 	ldrb.w	r3, [sl]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	f000 809f 	beq.w	8003e5e <_svfiprintf_r+0x1c6>
 8003d20:	2300      	movs	r3, #0
 8003d22:	f04f 32ff 	mov.w	r2, #4294967295
 8003d26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d2a:	f10a 0a01 	add.w	sl, sl, #1
 8003d2e:	9304      	str	r3, [sp, #16]
 8003d30:	9307      	str	r3, [sp, #28]
 8003d32:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003d36:	931a      	str	r3, [sp, #104]	@ 0x68
 8003d38:	4654      	mov	r4, sl
 8003d3a:	2205      	movs	r2, #5
 8003d3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d40:	484e      	ldr	r0, [pc, #312]	@ (8003e7c <_svfiprintf_r+0x1e4>)
 8003d42:	f000 fa61 	bl	8004208 <memchr>
 8003d46:	9a04      	ldr	r2, [sp, #16]
 8003d48:	b9d8      	cbnz	r0, 8003d82 <_svfiprintf_r+0xea>
 8003d4a:	06d0      	lsls	r0, r2, #27
 8003d4c:	bf44      	itt	mi
 8003d4e:	2320      	movmi	r3, #32
 8003d50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003d54:	0711      	lsls	r1, r2, #28
 8003d56:	bf44      	itt	mi
 8003d58:	232b      	movmi	r3, #43	@ 0x2b
 8003d5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003d5e:	f89a 3000 	ldrb.w	r3, [sl]
 8003d62:	2b2a      	cmp	r3, #42	@ 0x2a
 8003d64:	d015      	beq.n	8003d92 <_svfiprintf_r+0xfa>
 8003d66:	4654      	mov	r4, sl
 8003d68:	2000      	movs	r0, #0
 8003d6a:	f04f 0c0a 	mov.w	ip, #10
 8003d6e:	9a07      	ldr	r2, [sp, #28]
 8003d70:	4621      	mov	r1, r4
 8003d72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d76:	3b30      	subs	r3, #48	@ 0x30
 8003d78:	2b09      	cmp	r3, #9
 8003d7a:	d94b      	bls.n	8003e14 <_svfiprintf_r+0x17c>
 8003d7c:	b1b0      	cbz	r0, 8003dac <_svfiprintf_r+0x114>
 8003d7e:	9207      	str	r2, [sp, #28]
 8003d80:	e014      	b.n	8003dac <_svfiprintf_r+0x114>
 8003d82:	eba0 0308 	sub.w	r3, r0, r8
 8003d86:	fa09 f303 	lsl.w	r3, r9, r3
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	46a2      	mov	sl, r4
 8003d8e:	9304      	str	r3, [sp, #16]
 8003d90:	e7d2      	b.n	8003d38 <_svfiprintf_r+0xa0>
 8003d92:	9b03      	ldr	r3, [sp, #12]
 8003d94:	1d19      	adds	r1, r3, #4
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	9103      	str	r1, [sp, #12]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	bfbb      	ittet	lt
 8003d9e:	425b      	neglt	r3, r3
 8003da0:	f042 0202 	orrlt.w	r2, r2, #2
 8003da4:	9307      	strge	r3, [sp, #28]
 8003da6:	9307      	strlt	r3, [sp, #28]
 8003da8:	bfb8      	it	lt
 8003daa:	9204      	strlt	r2, [sp, #16]
 8003dac:	7823      	ldrb	r3, [r4, #0]
 8003dae:	2b2e      	cmp	r3, #46	@ 0x2e
 8003db0:	d10a      	bne.n	8003dc8 <_svfiprintf_r+0x130>
 8003db2:	7863      	ldrb	r3, [r4, #1]
 8003db4:	2b2a      	cmp	r3, #42	@ 0x2a
 8003db6:	d132      	bne.n	8003e1e <_svfiprintf_r+0x186>
 8003db8:	9b03      	ldr	r3, [sp, #12]
 8003dba:	3402      	adds	r4, #2
 8003dbc:	1d1a      	adds	r2, r3, #4
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	9203      	str	r2, [sp, #12]
 8003dc2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003dc6:	9305      	str	r3, [sp, #20]
 8003dc8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003e80 <_svfiprintf_r+0x1e8>
 8003dcc:	2203      	movs	r2, #3
 8003dce:	4650      	mov	r0, sl
 8003dd0:	7821      	ldrb	r1, [r4, #0]
 8003dd2:	f000 fa19 	bl	8004208 <memchr>
 8003dd6:	b138      	cbz	r0, 8003de8 <_svfiprintf_r+0x150>
 8003dd8:	2240      	movs	r2, #64	@ 0x40
 8003dda:	9b04      	ldr	r3, [sp, #16]
 8003ddc:	eba0 000a 	sub.w	r0, r0, sl
 8003de0:	4082      	lsls	r2, r0
 8003de2:	4313      	orrs	r3, r2
 8003de4:	3401      	adds	r4, #1
 8003de6:	9304      	str	r3, [sp, #16]
 8003de8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003dec:	2206      	movs	r2, #6
 8003dee:	4825      	ldr	r0, [pc, #148]	@ (8003e84 <_svfiprintf_r+0x1ec>)
 8003df0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003df4:	f000 fa08 	bl	8004208 <memchr>
 8003df8:	2800      	cmp	r0, #0
 8003dfa:	d036      	beq.n	8003e6a <_svfiprintf_r+0x1d2>
 8003dfc:	4b22      	ldr	r3, [pc, #136]	@ (8003e88 <_svfiprintf_r+0x1f0>)
 8003dfe:	bb1b      	cbnz	r3, 8003e48 <_svfiprintf_r+0x1b0>
 8003e00:	9b03      	ldr	r3, [sp, #12]
 8003e02:	3307      	adds	r3, #7
 8003e04:	f023 0307 	bic.w	r3, r3, #7
 8003e08:	3308      	adds	r3, #8
 8003e0a:	9303      	str	r3, [sp, #12]
 8003e0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003e0e:	4433      	add	r3, r6
 8003e10:	9309      	str	r3, [sp, #36]	@ 0x24
 8003e12:	e76a      	b.n	8003cea <_svfiprintf_r+0x52>
 8003e14:	460c      	mov	r4, r1
 8003e16:	2001      	movs	r0, #1
 8003e18:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e1c:	e7a8      	b.n	8003d70 <_svfiprintf_r+0xd8>
 8003e1e:	2300      	movs	r3, #0
 8003e20:	f04f 0c0a 	mov.w	ip, #10
 8003e24:	4619      	mov	r1, r3
 8003e26:	3401      	adds	r4, #1
 8003e28:	9305      	str	r3, [sp, #20]
 8003e2a:	4620      	mov	r0, r4
 8003e2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e30:	3a30      	subs	r2, #48	@ 0x30
 8003e32:	2a09      	cmp	r2, #9
 8003e34:	d903      	bls.n	8003e3e <_svfiprintf_r+0x1a6>
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d0c6      	beq.n	8003dc8 <_svfiprintf_r+0x130>
 8003e3a:	9105      	str	r1, [sp, #20]
 8003e3c:	e7c4      	b.n	8003dc8 <_svfiprintf_r+0x130>
 8003e3e:	4604      	mov	r4, r0
 8003e40:	2301      	movs	r3, #1
 8003e42:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e46:	e7f0      	b.n	8003e2a <_svfiprintf_r+0x192>
 8003e48:	ab03      	add	r3, sp, #12
 8003e4a:	9300      	str	r3, [sp, #0]
 8003e4c:	462a      	mov	r2, r5
 8003e4e:	4638      	mov	r0, r7
 8003e50:	4b0e      	ldr	r3, [pc, #56]	@ (8003e8c <_svfiprintf_r+0x1f4>)
 8003e52:	a904      	add	r1, sp, #16
 8003e54:	f3af 8000 	nop.w
 8003e58:	1c42      	adds	r2, r0, #1
 8003e5a:	4606      	mov	r6, r0
 8003e5c:	d1d6      	bne.n	8003e0c <_svfiprintf_r+0x174>
 8003e5e:	89ab      	ldrh	r3, [r5, #12]
 8003e60:	065b      	lsls	r3, r3, #25
 8003e62:	f53f af2d 	bmi.w	8003cc0 <_svfiprintf_r+0x28>
 8003e66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003e68:	e72c      	b.n	8003cc4 <_svfiprintf_r+0x2c>
 8003e6a:	ab03      	add	r3, sp, #12
 8003e6c:	9300      	str	r3, [sp, #0]
 8003e6e:	462a      	mov	r2, r5
 8003e70:	4638      	mov	r0, r7
 8003e72:	4b06      	ldr	r3, [pc, #24]	@ (8003e8c <_svfiprintf_r+0x1f4>)
 8003e74:	a904      	add	r1, sp, #16
 8003e76:	f000 f87d 	bl	8003f74 <_printf_i>
 8003e7a:	e7ed      	b.n	8003e58 <_svfiprintf_r+0x1c0>
 8003e7c:	0800437c 	.word	0x0800437c
 8003e80:	08004382 	.word	0x08004382
 8003e84:	08004386 	.word	0x08004386
 8003e88:	00000000 	.word	0x00000000
 8003e8c:	08003be1 	.word	0x08003be1

08003e90 <_printf_common>:
 8003e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e94:	4616      	mov	r6, r2
 8003e96:	4698      	mov	r8, r3
 8003e98:	688a      	ldr	r2, [r1, #8]
 8003e9a:	690b      	ldr	r3, [r1, #16]
 8003e9c:	4607      	mov	r7, r0
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	bfb8      	it	lt
 8003ea2:	4613      	movlt	r3, r2
 8003ea4:	6033      	str	r3, [r6, #0]
 8003ea6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003eaa:	460c      	mov	r4, r1
 8003eac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003eb0:	b10a      	cbz	r2, 8003eb6 <_printf_common+0x26>
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	6033      	str	r3, [r6, #0]
 8003eb6:	6823      	ldr	r3, [r4, #0]
 8003eb8:	0699      	lsls	r1, r3, #26
 8003eba:	bf42      	ittt	mi
 8003ebc:	6833      	ldrmi	r3, [r6, #0]
 8003ebe:	3302      	addmi	r3, #2
 8003ec0:	6033      	strmi	r3, [r6, #0]
 8003ec2:	6825      	ldr	r5, [r4, #0]
 8003ec4:	f015 0506 	ands.w	r5, r5, #6
 8003ec8:	d106      	bne.n	8003ed8 <_printf_common+0x48>
 8003eca:	f104 0a19 	add.w	sl, r4, #25
 8003ece:	68e3      	ldr	r3, [r4, #12]
 8003ed0:	6832      	ldr	r2, [r6, #0]
 8003ed2:	1a9b      	subs	r3, r3, r2
 8003ed4:	42ab      	cmp	r3, r5
 8003ed6:	dc2b      	bgt.n	8003f30 <_printf_common+0xa0>
 8003ed8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003edc:	6822      	ldr	r2, [r4, #0]
 8003ede:	3b00      	subs	r3, #0
 8003ee0:	bf18      	it	ne
 8003ee2:	2301      	movne	r3, #1
 8003ee4:	0692      	lsls	r2, r2, #26
 8003ee6:	d430      	bmi.n	8003f4a <_printf_common+0xba>
 8003ee8:	4641      	mov	r1, r8
 8003eea:	4638      	mov	r0, r7
 8003eec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003ef0:	47c8      	blx	r9
 8003ef2:	3001      	adds	r0, #1
 8003ef4:	d023      	beq.n	8003f3e <_printf_common+0xae>
 8003ef6:	6823      	ldr	r3, [r4, #0]
 8003ef8:	6922      	ldr	r2, [r4, #16]
 8003efa:	f003 0306 	and.w	r3, r3, #6
 8003efe:	2b04      	cmp	r3, #4
 8003f00:	bf14      	ite	ne
 8003f02:	2500      	movne	r5, #0
 8003f04:	6833      	ldreq	r3, [r6, #0]
 8003f06:	f04f 0600 	mov.w	r6, #0
 8003f0a:	bf08      	it	eq
 8003f0c:	68e5      	ldreq	r5, [r4, #12]
 8003f0e:	f104 041a 	add.w	r4, r4, #26
 8003f12:	bf08      	it	eq
 8003f14:	1aed      	subeq	r5, r5, r3
 8003f16:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003f1a:	bf08      	it	eq
 8003f1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f20:	4293      	cmp	r3, r2
 8003f22:	bfc4      	itt	gt
 8003f24:	1a9b      	subgt	r3, r3, r2
 8003f26:	18ed      	addgt	r5, r5, r3
 8003f28:	42b5      	cmp	r5, r6
 8003f2a:	d11a      	bne.n	8003f62 <_printf_common+0xd2>
 8003f2c:	2000      	movs	r0, #0
 8003f2e:	e008      	b.n	8003f42 <_printf_common+0xb2>
 8003f30:	2301      	movs	r3, #1
 8003f32:	4652      	mov	r2, sl
 8003f34:	4641      	mov	r1, r8
 8003f36:	4638      	mov	r0, r7
 8003f38:	47c8      	blx	r9
 8003f3a:	3001      	adds	r0, #1
 8003f3c:	d103      	bne.n	8003f46 <_printf_common+0xb6>
 8003f3e:	f04f 30ff 	mov.w	r0, #4294967295
 8003f42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f46:	3501      	adds	r5, #1
 8003f48:	e7c1      	b.n	8003ece <_printf_common+0x3e>
 8003f4a:	2030      	movs	r0, #48	@ 0x30
 8003f4c:	18e1      	adds	r1, r4, r3
 8003f4e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003f52:	1c5a      	adds	r2, r3, #1
 8003f54:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003f58:	4422      	add	r2, r4
 8003f5a:	3302      	adds	r3, #2
 8003f5c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003f60:	e7c2      	b.n	8003ee8 <_printf_common+0x58>
 8003f62:	2301      	movs	r3, #1
 8003f64:	4622      	mov	r2, r4
 8003f66:	4641      	mov	r1, r8
 8003f68:	4638      	mov	r0, r7
 8003f6a:	47c8      	blx	r9
 8003f6c:	3001      	adds	r0, #1
 8003f6e:	d0e6      	beq.n	8003f3e <_printf_common+0xae>
 8003f70:	3601      	adds	r6, #1
 8003f72:	e7d9      	b.n	8003f28 <_printf_common+0x98>

08003f74 <_printf_i>:
 8003f74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f78:	7e0f      	ldrb	r7, [r1, #24]
 8003f7a:	4691      	mov	r9, r2
 8003f7c:	2f78      	cmp	r7, #120	@ 0x78
 8003f7e:	4680      	mov	r8, r0
 8003f80:	460c      	mov	r4, r1
 8003f82:	469a      	mov	sl, r3
 8003f84:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003f86:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003f8a:	d807      	bhi.n	8003f9c <_printf_i+0x28>
 8003f8c:	2f62      	cmp	r7, #98	@ 0x62
 8003f8e:	d80a      	bhi.n	8003fa6 <_printf_i+0x32>
 8003f90:	2f00      	cmp	r7, #0
 8003f92:	f000 80d3 	beq.w	800413c <_printf_i+0x1c8>
 8003f96:	2f58      	cmp	r7, #88	@ 0x58
 8003f98:	f000 80ba 	beq.w	8004110 <_printf_i+0x19c>
 8003f9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003fa0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003fa4:	e03a      	b.n	800401c <_printf_i+0xa8>
 8003fa6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003faa:	2b15      	cmp	r3, #21
 8003fac:	d8f6      	bhi.n	8003f9c <_printf_i+0x28>
 8003fae:	a101      	add	r1, pc, #4	@ (adr r1, 8003fb4 <_printf_i+0x40>)
 8003fb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003fb4:	0800400d 	.word	0x0800400d
 8003fb8:	08004021 	.word	0x08004021
 8003fbc:	08003f9d 	.word	0x08003f9d
 8003fc0:	08003f9d 	.word	0x08003f9d
 8003fc4:	08003f9d 	.word	0x08003f9d
 8003fc8:	08003f9d 	.word	0x08003f9d
 8003fcc:	08004021 	.word	0x08004021
 8003fd0:	08003f9d 	.word	0x08003f9d
 8003fd4:	08003f9d 	.word	0x08003f9d
 8003fd8:	08003f9d 	.word	0x08003f9d
 8003fdc:	08003f9d 	.word	0x08003f9d
 8003fe0:	08004123 	.word	0x08004123
 8003fe4:	0800404b 	.word	0x0800404b
 8003fe8:	080040dd 	.word	0x080040dd
 8003fec:	08003f9d 	.word	0x08003f9d
 8003ff0:	08003f9d 	.word	0x08003f9d
 8003ff4:	08004145 	.word	0x08004145
 8003ff8:	08003f9d 	.word	0x08003f9d
 8003ffc:	0800404b 	.word	0x0800404b
 8004000:	08003f9d 	.word	0x08003f9d
 8004004:	08003f9d 	.word	0x08003f9d
 8004008:	080040e5 	.word	0x080040e5
 800400c:	6833      	ldr	r3, [r6, #0]
 800400e:	1d1a      	adds	r2, r3, #4
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	6032      	str	r2, [r6, #0]
 8004014:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004018:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800401c:	2301      	movs	r3, #1
 800401e:	e09e      	b.n	800415e <_printf_i+0x1ea>
 8004020:	6833      	ldr	r3, [r6, #0]
 8004022:	6820      	ldr	r0, [r4, #0]
 8004024:	1d19      	adds	r1, r3, #4
 8004026:	6031      	str	r1, [r6, #0]
 8004028:	0606      	lsls	r6, r0, #24
 800402a:	d501      	bpl.n	8004030 <_printf_i+0xbc>
 800402c:	681d      	ldr	r5, [r3, #0]
 800402e:	e003      	b.n	8004038 <_printf_i+0xc4>
 8004030:	0645      	lsls	r5, r0, #25
 8004032:	d5fb      	bpl.n	800402c <_printf_i+0xb8>
 8004034:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004038:	2d00      	cmp	r5, #0
 800403a:	da03      	bge.n	8004044 <_printf_i+0xd0>
 800403c:	232d      	movs	r3, #45	@ 0x2d
 800403e:	426d      	negs	r5, r5
 8004040:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004044:	230a      	movs	r3, #10
 8004046:	4859      	ldr	r0, [pc, #356]	@ (80041ac <_printf_i+0x238>)
 8004048:	e011      	b.n	800406e <_printf_i+0xfa>
 800404a:	6821      	ldr	r1, [r4, #0]
 800404c:	6833      	ldr	r3, [r6, #0]
 800404e:	0608      	lsls	r0, r1, #24
 8004050:	f853 5b04 	ldr.w	r5, [r3], #4
 8004054:	d402      	bmi.n	800405c <_printf_i+0xe8>
 8004056:	0649      	lsls	r1, r1, #25
 8004058:	bf48      	it	mi
 800405a:	b2ad      	uxthmi	r5, r5
 800405c:	2f6f      	cmp	r7, #111	@ 0x6f
 800405e:	6033      	str	r3, [r6, #0]
 8004060:	bf14      	ite	ne
 8004062:	230a      	movne	r3, #10
 8004064:	2308      	moveq	r3, #8
 8004066:	4851      	ldr	r0, [pc, #324]	@ (80041ac <_printf_i+0x238>)
 8004068:	2100      	movs	r1, #0
 800406a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800406e:	6866      	ldr	r6, [r4, #4]
 8004070:	2e00      	cmp	r6, #0
 8004072:	bfa8      	it	ge
 8004074:	6821      	ldrge	r1, [r4, #0]
 8004076:	60a6      	str	r6, [r4, #8]
 8004078:	bfa4      	itt	ge
 800407a:	f021 0104 	bicge.w	r1, r1, #4
 800407e:	6021      	strge	r1, [r4, #0]
 8004080:	b90d      	cbnz	r5, 8004086 <_printf_i+0x112>
 8004082:	2e00      	cmp	r6, #0
 8004084:	d04b      	beq.n	800411e <_printf_i+0x1aa>
 8004086:	4616      	mov	r6, r2
 8004088:	fbb5 f1f3 	udiv	r1, r5, r3
 800408c:	fb03 5711 	mls	r7, r3, r1, r5
 8004090:	5dc7      	ldrb	r7, [r0, r7]
 8004092:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004096:	462f      	mov	r7, r5
 8004098:	42bb      	cmp	r3, r7
 800409a:	460d      	mov	r5, r1
 800409c:	d9f4      	bls.n	8004088 <_printf_i+0x114>
 800409e:	2b08      	cmp	r3, #8
 80040a0:	d10b      	bne.n	80040ba <_printf_i+0x146>
 80040a2:	6823      	ldr	r3, [r4, #0]
 80040a4:	07df      	lsls	r7, r3, #31
 80040a6:	d508      	bpl.n	80040ba <_printf_i+0x146>
 80040a8:	6923      	ldr	r3, [r4, #16]
 80040aa:	6861      	ldr	r1, [r4, #4]
 80040ac:	4299      	cmp	r1, r3
 80040ae:	bfde      	ittt	le
 80040b0:	2330      	movle	r3, #48	@ 0x30
 80040b2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80040b6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80040ba:	1b92      	subs	r2, r2, r6
 80040bc:	6122      	str	r2, [r4, #16]
 80040be:	464b      	mov	r3, r9
 80040c0:	4621      	mov	r1, r4
 80040c2:	4640      	mov	r0, r8
 80040c4:	f8cd a000 	str.w	sl, [sp]
 80040c8:	aa03      	add	r2, sp, #12
 80040ca:	f7ff fee1 	bl	8003e90 <_printf_common>
 80040ce:	3001      	adds	r0, #1
 80040d0:	d14a      	bne.n	8004168 <_printf_i+0x1f4>
 80040d2:	f04f 30ff 	mov.w	r0, #4294967295
 80040d6:	b004      	add	sp, #16
 80040d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040dc:	6823      	ldr	r3, [r4, #0]
 80040de:	f043 0320 	orr.w	r3, r3, #32
 80040e2:	6023      	str	r3, [r4, #0]
 80040e4:	2778      	movs	r7, #120	@ 0x78
 80040e6:	4832      	ldr	r0, [pc, #200]	@ (80041b0 <_printf_i+0x23c>)
 80040e8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80040ec:	6823      	ldr	r3, [r4, #0]
 80040ee:	6831      	ldr	r1, [r6, #0]
 80040f0:	061f      	lsls	r7, r3, #24
 80040f2:	f851 5b04 	ldr.w	r5, [r1], #4
 80040f6:	d402      	bmi.n	80040fe <_printf_i+0x18a>
 80040f8:	065f      	lsls	r7, r3, #25
 80040fa:	bf48      	it	mi
 80040fc:	b2ad      	uxthmi	r5, r5
 80040fe:	6031      	str	r1, [r6, #0]
 8004100:	07d9      	lsls	r1, r3, #31
 8004102:	bf44      	itt	mi
 8004104:	f043 0320 	orrmi.w	r3, r3, #32
 8004108:	6023      	strmi	r3, [r4, #0]
 800410a:	b11d      	cbz	r5, 8004114 <_printf_i+0x1a0>
 800410c:	2310      	movs	r3, #16
 800410e:	e7ab      	b.n	8004068 <_printf_i+0xf4>
 8004110:	4826      	ldr	r0, [pc, #152]	@ (80041ac <_printf_i+0x238>)
 8004112:	e7e9      	b.n	80040e8 <_printf_i+0x174>
 8004114:	6823      	ldr	r3, [r4, #0]
 8004116:	f023 0320 	bic.w	r3, r3, #32
 800411a:	6023      	str	r3, [r4, #0]
 800411c:	e7f6      	b.n	800410c <_printf_i+0x198>
 800411e:	4616      	mov	r6, r2
 8004120:	e7bd      	b.n	800409e <_printf_i+0x12a>
 8004122:	6833      	ldr	r3, [r6, #0]
 8004124:	6825      	ldr	r5, [r4, #0]
 8004126:	1d18      	adds	r0, r3, #4
 8004128:	6961      	ldr	r1, [r4, #20]
 800412a:	6030      	str	r0, [r6, #0]
 800412c:	062e      	lsls	r6, r5, #24
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	d501      	bpl.n	8004136 <_printf_i+0x1c2>
 8004132:	6019      	str	r1, [r3, #0]
 8004134:	e002      	b.n	800413c <_printf_i+0x1c8>
 8004136:	0668      	lsls	r0, r5, #25
 8004138:	d5fb      	bpl.n	8004132 <_printf_i+0x1be>
 800413a:	8019      	strh	r1, [r3, #0]
 800413c:	2300      	movs	r3, #0
 800413e:	4616      	mov	r6, r2
 8004140:	6123      	str	r3, [r4, #16]
 8004142:	e7bc      	b.n	80040be <_printf_i+0x14a>
 8004144:	6833      	ldr	r3, [r6, #0]
 8004146:	2100      	movs	r1, #0
 8004148:	1d1a      	adds	r2, r3, #4
 800414a:	6032      	str	r2, [r6, #0]
 800414c:	681e      	ldr	r6, [r3, #0]
 800414e:	6862      	ldr	r2, [r4, #4]
 8004150:	4630      	mov	r0, r6
 8004152:	f000 f859 	bl	8004208 <memchr>
 8004156:	b108      	cbz	r0, 800415c <_printf_i+0x1e8>
 8004158:	1b80      	subs	r0, r0, r6
 800415a:	6060      	str	r0, [r4, #4]
 800415c:	6863      	ldr	r3, [r4, #4]
 800415e:	6123      	str	r3, [r4, #16]
 8004160:	2300      	movs	r3, #0
 8004162:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004166:	e7aa      	b.n	80040be <_printf_i+0x14a>
 8004168:	4632      	mov	r2, r6
 800416a:	4649      	mov	r1, r9
 800416c:	4640      	mov	r0, r8
 800416e:	6923      	ldr	r3, [r4, #16]
 8004170:	47d0      	blx	sl
 8004172:	3001      	adds	r0, #1
 8004174:	d0ad      	beq.n	80040d2 <_printf_i+0x15e>
 8004176:	6823      	ldr	r3, [r4, #0]
 8004178:	079b      	lsls	r3, r3, #30
 800417a:	d413      	bmi.n	80041a4 <_printf_i+0x230>
 800417c:	68e0      	ldr	r0, [r4, #12]
 800417e:	9b03      	ldr	r3, [sp, #12]
 8004180:	4298      	cmp	r0, r3
 8004182:	bfb8      	it	lt
 8004184:	4618      	movlt	r0, r3
 8004186:	e7a6      	b.n	80040d6 <_printf_i+0x162>
 8004188:	2301      	movs	r3, #1
 800418a:	4632      	mov	r2, r6
 800418c:	4649      	mov	r1, r9
 800418e:	4640      	mov	r0, r8
 8004190:	47d0      	blx	sl
 8004192:	3001      	adds	r0, #1
 8004194:	d09d      	beq.n	80040d2 <_printf_i+0x15e>
 8004196:	3501      	adds	r5, #1
 8004198:	68e3      	ldr	r3, [r4, #12]
 800419a:	9903      	ldr	r1, [sp, #12]
 800419c:	1a5b      	subs	r3, r3, r1
 800419e:	42ab      	cmp	r3, r5
 80041a0:	dcf2      	bgt.n	8004188 <_printf_i+0x214>
 80041a2:	e7eb      	b.n	800417c <_printf_i+0x208>
 80041a4:	2500      	movs	r5, #0
 80041a6:	f104 0619 	add.w	r6, r4, #25
 80041aa:	e7f5      	b.n	8004198 <_printf_i+0x224>
 80041ac:	0800438d 	.word	0x0800438d
 80041b0:	0800439e 	.word	0x0800439e

080041b4 <memmove>:
 80041b4:	4288      	cmp	r0, r1
 80041b6:	b510      	push	{r4, lr}
 80041b8:	eb01 0402 	add.w	r4, r1, r2
 80041bc:	d902      	bls.n	80041c4 <memmove+0x10>
 80041be:	4284      	cmp	r4, r0
 80041c0:	4623      	mov	r3, r4
 80041c2:	d807      	bhi.n	80041d4 <memmove+0x20>
 80041c4:	1e43      	subs	r3, r0, #1
 80041c6:	42a1      	cmp	r1, r4
 80041c8:	d008      	beq.n	80041dc <memmove+0x28>
 80041ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80041ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80041d2:	e7f8      	b.n	80041c6 <memmove+0x12>
 80041d4:	4601      	mov	r1, r0
 80041d6:	4402      	add	r2, r0
 80041d8:	428a      	cmp	r2, r1
 80041da:	d100      	bne.n	80041de <memmove+0x2a>
 80041dc:	bd10      	pop	{r4, pc}
 80041de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80041e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80041e6:	e7f7      	b.n	80041d8 <memmove+0x24>

080041e8 <_sbrk_r>:
 80041e8:	b538      	push	{r3, r4, r5, lr}
 80041ea:	2300      	movs	r3, #0
 80041ec:	4d05      	ldr	r5, [pc, #20]	@ (8004204 <_sbrk_r+0x1c>)
 80041ee:	4604      	mov	r4, r0
 80041f0:	4608      	mov	r0, r1
 80041f2:	602b      	str	r3, [r5, #0]
 80041f4:	f7fc facc 	bl	8000790 <_sbrk>
 80041f8:	1c43      	adds	r3, r0, #1
 80041fa:	d102      	bne.n	8004202 <_sbrk_r+0x1a>
 80041fc:	682b      	ldr	r3, [r5, #0]
 80041fe:	b103      	cbz	r3, 8004202 <_sbrk_r+0x1a>
 8004200:	6023      	str	r3, [r4, #0]
 8004202:	bd38      	pop	{r3, r4, r5, pc}
 8004204:	200016f4 	.word	0x200016f4

08004208 <memchr>:
 8004208:	4603      	mov	r3, r0
 800420a:	b510      	push	{r4, lr}
 800420c:	b2c9      	uxtb	r1, r1
 800420e:	4402      	add	r2, r0
 8004210:	4293      	cmp	r3, r2
 8004212:	4618      	mov	r0, r3
 8004214:	d101      	bne.n	800421a <memchr+0x12>
 8004216:	2000      	movs	r0, #0
 8004218:	e003      	b.n	8004222 <memchr+0x1a>
 800421a:	7804      	ldrb	r4, [r0, #0]
 800421c:	3301      	adds	r3, #1
 800421e:	428c      	cmp	r4, r1
 8004220:	d1f6      	bne.n	8004210 <memchr+0x8>
 8004222:	bd10      	pop	{r4, pc}

08004224 <memcpy>:
 8004224:	440a      	add	r2, r1
 8004226:	4291      	cmp	r1, r2
 8004228:	f100 33ff 	add.w	r3, r0, #4294967295
 800422c:	d100      	bne.n	8004230 <memcpy+0xc>
 800422e:	4770      	bx	lr
 8004230:	b510      	push	{r4, lr}
 8004232:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004236:	4291      	cmp	r1, r2
 8004238:	f803 4f01 	strb.w	r4, [r3, #1]!
 800423c:	d1f9      	bne.n	8004232 <memcpy+0xe>
 800423e:	bd10      	pop	{r4, pc}

08004240 <_realloc_r>:
 8004240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004244:	4680      	mov	r8, r0
 8004246:	4615      	mov	r5, r2
 8004248:	460c      	mov	r4, r1
 800424a:	b921      	cbnz	r1, 8004256 <_realloc_r+0x16>
 800424c:	4611      	mov	r1, r2
 800424e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004252:	f7ff bc39 	b.w	8003ac8 <_malloc_r>
 8004256:	b92a      	cbnz	r2, 8004264 <_realloc_r+0x24>
 8004258:	f7ff fbcc 	bl	80039f4 <_free_r>
 800425c:	2400      	movs	r4, #0
 800425e:	4620      	mov	r0, r4
 8004260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004264:	f000 f81a 	bl	800429c <_malloc_usable_size_r>
 8004268:	4285      	cmp	r5, r0
 800426a:	4606      	mov	r6, r0
 800426c:	d802      	bhi.n	8004274 <_realloc_r+0x34>
 800426e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004272:	d8f4      	bhi.n	800425e <_realloc_r+0x1e>
 8004274:	4629      	mov	r1, r5
 8004276:	4640      	mov	r0, r8
 8004278:	f7ff fc26 	bl	8003ac8 <_malloc_r>
 800427c:	4607      	mov	r7, r0
 800427e:	2800      	cmp	r0, #0
 8004280:	d0ec      	beq.n	800425c <_realloc_r+0x1c>
 8004282:	42b5      	cmp	r5, r6
 8004284:	462a      	mov	r2, r5
 8004286:	4621      	mov	r1, r4
 8004288:	bf28      	it	cs
 800428a:	4632      	movcs	r2, r6
 800428c:	f7ff ffca 	bl	8004224 <memcpy>
 8004290:	4621      	mov	r1, r4
 8004292:	4640      	mov	r0, r8
 8004294:	f7ff fbae 	bl	80039f4 <_free_r>
 8004298:	463c      	mov	r4, r7
 800429a:	e7e0      	b.n	800425e <_realloc_r+0x1e>

0800429c <_malloc_usable_size_r>:
 800429c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042a0:	1f18      	subs	r0, r3, #4
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	bfbc      	itt	lt
 80042a6:	580b      	ldrlt	r3, [r1, r0]
 80042a8:	18c0      	addlt	r0, r0, r3
 80042aa:	4770      	bx	lr

080042ac <_init>:
 80042ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ae:	bf00      	nop
 80042b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042b2:	bc08      	pop	{r3}
 80042b4:	469e      	mov	lr, r3
 80042b6:	4770      	bx	lr

080042b8 <_fini>:
 80042b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ba:	bf00      	nop
 80042bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042be:	bc08      	pop	{r3}
 80042c0:	469e      	mov	lr, r3
 80042c2:	4770      	bx	lr
