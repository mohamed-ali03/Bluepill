
IR-Receiver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f70  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  0800407c  0800407c  0000507c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004168  08004168  000061e0  2**0
                  CONTENTS
  4 .ARM          00000008  08004168  08004168  00005168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004170  08004170  000061e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004170  08004170  00005170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004174  08004174  00005174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  08004178  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001508  200001e0  08004358  000061e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200016e8  08004358  000066e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000061e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014c8d  00000000  00000000  00006209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b72  00000000  00000000  0001ae96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00007b6d  00000000  00000000  0001ea08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ef0  00000000  00000000  00026578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001055  00000000  00000000  00027468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019e05  00000000  00000000  000284bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016c36  00000000  00000000  000422c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008aceb  00000000  00000000  00058ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000e3be3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002938  00000000  00000000  000e3c28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004f  00000000  00000000  000e6560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001e0 	.word	0x200001e0
 8000128:	00000000 	.word	0x00000000
 800012c:	08004064 	.word	0x08004064

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001e4 	.word	0x200001e4
 8000148:	08004064 	.word	0x08004064

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HAL_GPIO_EXTI_Callback>:
  }
  /* USER CODE END 3 */
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
	if (GPIO_Pin == GPIO_PIN_5)  // Assuming PA0
 800015c:	2820      	cmp	r0, #32
 800015e:	d10d      	bne.n	800017c <HAL_GPIO_EXTI_Callback+0x20>
	{
		pulse_timings[ir_index++] = __HAL_TIM_GET_COUNTER(&htim2);
 8000160:	4907      	ldr	r1, [pc, #28]	@ (8000180 <HAL_GPIO_EXTI_Callback+0x24>)
 8000162:	4b08      	ldr	r3, [pc, #32]	@ (8000184 <HAL_GPIO_EXTI_Callback+0x28>)
 8000164:	681a      	ldr	r2, [r3, #0]
 8000166:	780b      	ldrb	r3, [r1, #0]
 8000168:	b2d8      	uxtb	r0, r3
 800016a:	3301      	adds	r3, #1
 800016c:	b2db      	uxtb	r3, r3
 800016e:	700b      	strb	r3, [r1, #0]
 8000170:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 8000172:	4b05      	ldr	r3, [pc, #20]	@ (8000188 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000174:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
		__HAL_TIM_SET_COUNTER(&htim2, 0);
 8000178:	2300      	movs	r3, #0
 800017a:	6253      	str	r3, [r2, #36]	@ 0x24
	}
}
 800017c:	4770      	bx	lr
 800017e:	bf00      	nop
 8000180:	200001fc 	.word	0x200001fc
 8000184:	20000390 	.word	0x20000390
 8000188:	20000200 	.word	0x20000200

0800018c <decode_nec>:

/* NEC Decoding --------------------------------------------------------------*/
uint32_t decode_nec()
{
 800018c:	b510      	push	{r4, lr}
 800018e:	2303      	movs	r3, #3
  uint32_t result = 0;
 8000190:	2000      	movs	r0, #0
  for (uint8_t i = 3; i < 34; i++)
  {
    uint32_t duration = pulse_timings[i];
    result <<= 1;
    if (duration > 1600 && duration < 2400)
 8000192:	f240 341e 	movw	r4, #798	@ 0x31e
    uint32_t duration = pulse_timings[i];
 8000196:	4908      	ldr	r1, [pc, #32]	@ (80001b8 <decode_nec+0x2c>)
    if (duration > 1600 && duration < 2400)
 8000198:	f46f 6cc8 	mvn.w	ip, #1600	@ 0x640
    uint32_t duration = pulse_timings[i];
 800019c:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    result <<= 1;
 80001a0:	0040      	lsls	r0, r0, #1
    if (duration > 1600 && duration < 2400)
 80001a2:	4462      	add	r2, ip
 80001a4:	42a2      	cmp	r2, r4
  for (uint8_t i = 3; i < 34; i++)
 80001a6:	f103 0301 	add.w	r3, r3, #1
      result |= 1;
 80001aa:	bf98      	it	ls
 80001ac:	f040 0001 	orrls.w	r0, r0, #1
  for (uint8_t i = 3; i < 34; i++)
 80001b0:	2b22      	cmp	r3, #34	@ 0x22
 80001b2:	d1f1      	bne.n	8000198 <decode_nec+0xc>
    else if (duration > 400 && duration < 1200)
      result |= 0;
  }
  return result;
}
 80001b4:	bd10      	pop	{r4, pc}
 80001b6:	bf00      	nop
 80001b8:	20000200 	.word	0x20000200

080001bc <process_ir_signal>:
/* IR Command Processing -----------------------------------------------------*/
uint32_t process_ir_signal()
{
 80001bc:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 80001be:	2017      	movs	r0, #23
{
 80001c0:	b097      	sub	sp, #92	@ 0x5c
  HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 80001c2:	f000 fab3 	bl	800072c <HAL_NVIC_DisableIRQ>
  uint32_t code = decode_nec();
 80001c6:	f7ff ffe1 	bl	800018c <decode_nec>
  char msg[20] = {0};
 80001ca:	2400      	movs	r4, #0
  uint32_t code = decode_nec();
 80001cc:	4605      	mov	r5, r0
  char msg[20] = {0};
 80001ce:	2210      	movs	r2, #16
 80001d0:	4621      	mov	r1, r4
 80001d2:	a803      	add	r0, sp, #12
 80001d4:	9402      	str	r4, [sp, #8]
 80001d6:	f003 fab5 	bl	8003744 <memset>
  sprintf(msg, "0x%08lX\r\n", code);
 80001da:	462a      	mov	r2, r5
 80001dc:	4931      	ldr	r1, [pc, #196]	@ (80002a4 <process_ir_signal+0xe8>)
 80001de:	a802      	add	r0, sp, #8
 80001e0:	f003 fa90 	bl	8003704 <siprintf>
  CDC_Transmit_FS((uint8_t *)msg, strlen(msg));
 80001e4:	a802      	add	r0, sp, #8
 80001e6:	f7ff ffb1 	bl	800014c <strlen>
 80001ea:	b281      	uxth	r1, r0
 80001ec:	a802      	add	r0, sp, #8
 80001ee:	f003 f8ed 	bl	80033cc <CDC_Transmit_FS>

  for(int i = 0 ; i < 34 ; i++){

	  char msg[30] = {0};
 80001f2:	4627      	mov	r7, r4
	  int x = 2;
	  if (pulse_timings[i] > 1600 && pulse_timings[i] < 2400)
 80001f4:	4e2c      	ldr	r6, [pc, #176]	@ (80002a8 <process_ir_signal+0xec>)
	  char msg[30] = {0};
 80001f6:	221a      	movs	r2, #26
 80001f8:	2100      	movs	r1, #0
 80001fa:	a808      	add	r0, sp, #32
 80001fc:	9707      	str	r7, [sp, #28]
 80001fe:	f003 faa1 	bl	8003744 <memset>
	  if (pulse_timings[i] > 1600 && pulse_timings[i] < 2400)
 8000202:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 8000206:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800020a:	d904      	bls.n	8000216 <process_ir_signal+0x5a>
 800020c:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 8000210:	f5b3 6f16 	cmp.w	r3, #2400	@ 0x960
 8000214:	d341      	bcc.n	800029a <process_ir_signal+0xde>
		  x = 1;
	  else if (pulse_timings[i] > 400 && pulse_timings[i] < 1200)
 8000216:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 800021a:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 800021e:	d93e      	bls.n	800029e <process_ir_signal+0xe2>
 8000220:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 8000224:	f5b1 6f96 	cmp.w	r1, #1200	@ 0x4b0
 8000228:	bf34      	ite	cc
 800022a:	2100      	movcc	r1, #0
 800022c:	2101      	movcs	r1, #1
 800022e:	0049      	lsls	r1, r1, #1
		  x = 0;
	  sprintf(msg, "%d : %d --> %d\r\n",i,(int)pulse_timings[i],x);
 8000230:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 8000234:	4622      	mov	r2, r4
 8000236:	9100      	str	r1, [sp, #0]
 8000238:	a807      	add	r0, sp, #28
 800023a:	491c      	ldr	r1, [pc, #112]	@ (80002ac <process_ir_signal+0xf0>)
 800023c:	f003 fa62 	bl	8003704 <siprintf>
	  CDC_Transmit_FS((uint8_t *)msg, strlen(msg));
 8000240:	a807      	add	r0, sp, #28
 8000242:	f7ff ff83 	bl	800014c <strlen>
 8000246:	b281      	uxth	r1, r0
 8000248:	a807      	add	r0, sp, #28
 800024a:	f003 f8bf 	bl	80033cc <CDC_Transmit_FS>
	  HAL_Delay(10);
 800024e:	200a      	movs	r0, #10
 8000250:	f000 fa0a 	bl	8000668 <HAL_Delay>
	  pulse_timings[i] = 0;
 8000254:	f846 7024 	str.w	r7, [r6, r4, lsl #2]
  for(int i = 0 ; i < 34 ; i++){
 8000258:	3401      	adds	r4, #1
 800025a:	2c22      	cmp	r4, #34	@ 0x22
 800025c:	d1cb      	bne.n	80001f6 <process_ir_signal+0x3a>
  }
  char separate[]="------------------------------------------------------\r\n";
 800025e:	4b14      	ldr	r3, [pc, #80]	@ (80002b0 <process_ir_signal+0xf4>)
 8000260:	aa07      	add	r2, sp, #28
 8000262:	f103 0638 	add.w	r6, r3, #56	@ 0x38
 8000266:	4614      	mov	r4, r2
 8000268:	6818      	ldr	r0, [r3, #0]
 800026a:	6859      	ldr	r1, [r3, #4]
 800026c:	3308      	adds	r3, #8
 800026e:	c403      	stmia	r4!, {r0, r1}
 8000270:	42b3      	cmp	r3, r6
 8000272:	4622      	mov	r2, r4
 8000274:	d1f7      	bne.n	8000266 <process_ir_signal+0xaa>
 8000276:	781b      	ldrb	r3, [r3, #0]
  CDC_Transmit_FS((uint8_t *)separate, strlen(separate));
 8000278:	a807      	add	r0, sp, #28
  char separate[]="------------------------------------------------------\r\n";
 800027a:	7023      	strb	r3, [r4, #0]
  CDC_Transmit_FS((uint8_t *)separate, strlen(separate));
 800027c:	f7ff ff66 	bl	800014c <strlen>
 8000280:	b281      	uxth	r1, r0
 8000282:	a807      	add	r0, sp, #28
 8000284:	f003 f8a2 	bl	80033cc <CDC_Transmit_FS>
  ir_index = 0;
 8000288:	2200      	movs	r2, #0
 800028a:	4b0a      	ldr	r3, [pc, #40]	@ (80002b4 <process_ir_signal+0xf8>)
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800028c:	2017      	movs	r0, #23
  ir_index = 0;
 800028e:	701a      	strb	r2, [r3, #0]
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000290:	f000 fa3e 	bl	8000710 <HAL_NVIC_EnableIRQ>
  return code ;
}
 8000294:	4628      	mov	r0, r5
 8000296:	b017      	add	sp, #92	@ 0x5c
 8000298:	bdf0      	pop	{r4, r5, r6, r7, pc}
		  x = 1;
 800029a:	2101      	movs	r1, #1
 800029c:	e7c8      	b.n	8000230 <process_ir_signal+0x74>
	  int x = 2;
 800029e:	2102      	movs	r1, #2
 80002a0:	e7c6      	b.n	8000230 <process_ir_signal+0x74>
 80002a2:	bf00      	nop
 80002a4:	0800407c 	.word	0x0800407c
 80002a8:	20000200 	.word	0x20000200
 80002ac:	08004086 	.word	0x08004086
 80002b0:	08004097 	.word	0x08004097
 80002b4:	200001fc 	.word	0x200001fc

080002b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b8:	b530      	push	{r4, r5, lr}
 80002ba:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002bc:	2214      	movs	r2, #20
 80002be:	2100      	movs	r1, #0
 80002c0:	a80c      	add	r0, sp, #48	@ 0x30
 80002c2:	f003 fa3f 	bl	8003744 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002c6:	2214      	movs	r2, #20
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002c8:	2510      	movs	r5, #16
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ca:	2100      	movs	r1, #0
 80002cc:	eb0d 0002 	add.w	r0, sp, r2
 80002d0:	f003 fa38 	bl	8003744 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002d4:	462a      	mov	r2, r5
 80002d6:	2100      	movs	r1, #0
 80002d8:	a801      	add	r0, sp, #4
 80002da:	f003 fa33 	bl	8003744 <memset>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002de:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002e4:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002e6:	e9cd 4311 	strd	r4, r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002ea:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002ee:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f2:	a80a      	add	r0, sp, #40	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002f4:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002f6:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f8:	f001 f9c6 	bl	8001688 <HAL_RCC_OscConfig>
 80002fc:	b108      	cbz	r0, 8000302 <SystemClock_Config+0x4a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002fe:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000300:	e7fe      	b.n	8000300 <SystemClock_Config+0x48>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000302:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000304:	e9cd 3405 	strd	r3, r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000308:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800030c:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800030e:	e9cd 3008 	strd	r3, r0, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000312:	4621      	mov	r1, r4
 8000314:	a805      	add	r0, sp, #20
 8000316:	f001 fb79 	bl	8001a0c <HAL_RCC_ClockConfig>
 800031a:	b108      	cbz	r0, 8000320 <SystemClock_Config+0x68>
 800031c:	b672      	cpsid	i
  while (1)
 800031e:	e7fe      	b.n	800031e <SystemClock_Config+0x66>
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000320:	9004      	str	r0, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000322:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000324:	9501      	str	r5, [sp, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000326:	f001 fc0d 	bl	8001b44 <HAL_RCCEx_PeriphCLKConfig>
 800032a:	b108      	cbz	r0, 8000330 <SystemClock_Config+0x78>
 800032c:	b672      	cpsid	i
  while (1)
 800032e:	e7fe      	b.n	800032e <SystemClock_Config+0x76>
}
 8000330:	b015      	add	sp, #84	@ 0x54
 8000332:	bd30      	pop	{r4, r5, pc}

08000334 <main>:
{
 8000334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000338:	b08a      	sub	sp, #40	@ 0x28
  HAL_Init();
 800033a:	f000 f971 	bl	8000620 <HAL_Init>
  SystemClock_Config();
 800033e:	f7ff ffbb 	bl	80002b8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000342:	2210      	movs	r2, #16
 8000344:	2100      	movs	r1, #0
 8000346:	a806      	add	r0, sp, #24
 8000348:	f003 f9fc 	bl	8003744 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800034c:	4b4e      	ldr	r3, [pc, #312]	@ (8000488 <main+0x154>)
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800034e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000352:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000354:	484d      	ldr	r0, [pc, #308]	@ (800048c <main+0x158>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000356:	f042 0210 	orr.w	r2, r2, #16
 800035a:	619a      	str	r2, [r3, #24]
 800035c:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800035e:	2500      	movs	r5, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000360:	f002 0210 	and.w	r2, r2, #16
 8000364:	9201      	str	r2, [sp, #4]
 8000366:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000368:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800036a:	f44f 5700 	mov.w	r7, #8192	@ 0x2000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800036e:	f042 0220 	orr.w	r2, r2, #32
 8000372:	619a      	str	r2, [r3, #24]
 8000374:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000376:	f04f 0801 	mov.w	r8, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800037a:	f002 0220 	and.w	r2, r2, #32
 800037e:	9202      	str	r2, [sp, #8]
 8000380:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000382:	699a      	ldr	r2, [r3, #24]
  htim2.Instance = TIM2;
 8000384:	4c42      	ldr	r4, [pc, #264]	@ (8000490 <main+0x15c>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000386:	f042 0204 	orr.w	r2, r2, #4
 800038a:	619a      	str	r2, [r3, #24]
 800038c:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800038e:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000390:	f003 0304 	and.w	r3, r3, #4
 8000394:	9303      	str	r3, [sp, #12]
 8000396:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000398:	f000 fac0 	bl	800091c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800039c:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800039e:	483b      	ldr	r0, [pc, #236]	@ (800048c <main+0x158>)
 80003a0:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003a2:	e9cd 5308 	strd	r5, r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003a6:	e9cd 7806 	strd	r7, r8, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003aa:	f000 f9e5 	bl	8000778 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80003ae:	2220      	movs	r2, #32
 80003b0:	4b38      	ldr	r3, [pc, #224]	@ (8000494 <main+0x160>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003b2:	4839      	ldr	r0, [pc, #228]	@ (8000498 <main+0x164>)
 80003b4:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80003b6:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ba:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003bc:	f000 f9dc 	bl	8000778 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80003c0:	462a      	mov	r2, r5
 80003c2:	4629      	mov	r1, r5
 80003c4:	2017      	movs	r0, #23
 80003c6:	f000 f973 	bl	80006b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80003ca:	2017      	movs	r0, #23
 80003cc:	f000 f9a0 	bl	8000710 <HAL_NVIC_EnableIRQ>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003d0:	4629      	mov	r1, r5
 80003d2:	2210      	movs	r2, #16
 80003d4:	a806      	add	r0, sp, #24
 80003d6:	f003 f9b5 	bl	8003744 <memset>
  htim2.Init.Prescaler = 71;
 80003da:	2347      	movs	r3, #71	@ 0x47
 80003dc:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80003e0:	e9c4 1300 	strd	r1, r3, [r4]
  htim2.Init.Period = 65535;
 80003e4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003e8:	e9c4 3503 	strd	r3, r5, [r4, #12]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80003ec:	2380      	movs	r3, #128	@ 0x80
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80003ee:	4620      	mov	r0, r4
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003f0:	e9cd 5504 	strd	r5, r5, [sp, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003f4:	60a5      	str	r5, [r4, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80003f6:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80003f8:	f001 fc78 	bl	8001cec <HAL_TIM_Base_Init>
 80003fc:	b108      	cbz	r0, 8000402 <main+0xce>
 80003fe:	b672      	cpsid	i
  while (1)
 8000400:	e7fe      	b.n	8000400 <main+0xcc>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000402:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000406:	4620      	mov	r0, r4
 8000408:	a906      	add	r1, sp, #24
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800040a:	9306      	str	r3, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800040c:	f001 fca4 	bl	8001d58 <HAL_TIM_ConfigClockSource>
 8000410:	b108      	cbz	r0, 8000416 <main+0xe2>
 8000412:	b672      	cpsid	i
  while (1)
 8000414:	e7fe      	b.n	8000414 <main+0xe0>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000416:	e9cd 0004 	strd	r0, r0, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800041a:	a904      	add	r1, sp, #16
 800041c:	4620      	mov	r0, r4
 800041e:	f001 fd35 	bl	8001e8c <HAL_TIMEx_MasterConfigSynchronization>
 8000422:	b108      	cbz	r0, 8000428 <main+0xf4>
 8000424:	b672      	cpsid	i
  while (1)
 8000426:	e7fe      	b.n	8000426 <main+0xf2>
  MX_USB_DEVICE_Init();
 8000428:	f002 ff82 	bl	8003330 <MX_USB_DEVICE_Init>
  HAL_TIM_Base_Start(&htim2);
 800042c:	4620      	mov	r0, r4
 800042e:	f001 fc03 	bl	8001c38 <HAL_TIM_Base_Start>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13,1);
 8000432:	4639      	mov	r1, r7
 8000434:	4642      	mov	r2, r8
 8000436:	4815      	ldr	r0, [pc, #84]	@ (800048c <main+0x158>)
 8000438:	f000 fa70 	bl	800091c <HAL_GPIO_WritePin>
	  if(ir_index >= 34){
 800043c:	4d17      	ldr	r5, [pc, #92]	@ (800049c <main+0x168>)
	  if (sig == forward || sig == right){
 800043e:	4f18      	ldr	r7, [pc, #96]	@ (80004a0 <main+0x16c>)
	  	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13,0);
 8000440:	4c12      	ldr	r4, [pc, #72]	@ (800048c <main+0x158>)
	  if(ir_index >= 34){
 8000442:	782b      	ldrb	r3, [r5, #0]
 8000444:	2b21      	cmp	r3, #33	@ 0x21
 8000446:	d902      	bls.n	800044e <main+0x11a>
		  sig = process_ir_signal();
 8000448:	f7ff feb8 	bl	80001bc <process_ir_signal>
 800044c:	4606      	mov	r6, r0
	  if (sig == forward || sig == right){
 800044e:	683b      	ldr	r3, [r7, #0]
 8000450:	42b3      	cmp	r3, r6
 8000452:	d003      	beq.n	800045c <main+0x128>
 8000454:	4b13      	ldr	r3, [pc, #76]	@ (80004a4 <main+0x170>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	42b3      	cmp	r3, r6
 800045a:	d106      	bne.n	800046a <main+0x136>
	  	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13,0);
 800045c:	2200      	movs	r2, #0
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13,1);
 800045e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000462:	4620      	mov	r0, r4
 8000464:	f000 fa5a 	bl	800091c <HAL_GPIO_WritePin>
 8000468:	e7eb      	b.n	8000442 <main+0x10e>
	  else if (sig == backward || sig == left || sig == stop){
 800046a:	4b0f      	ldr	r3, [pc, #60]	@ (80004a8 <main+0x174>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	42b3      	cmp	r3, r6
 8000470:	d007      	beq.n	8000482 <main+0x14e>
 8000472:	4b0e      	ldr	r3, [pc, #56]	@ (80004ac <main+0x178>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	42b3      	cmp	r3, r6
 8000478:	d003      	beq.n	8000482 <main+0x14e>
 800047a:	4b0d      	ldr	r3, [pc, #52]	@ (80004b0 <main+0x17c>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	42b3      	cmp	r3, r6
 8000480:	d1df      	bne.n	8000442 <main+0x10e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13,1);
 8000482:	2201      	movs	r2, #1
 8000484:	e7eb      	b.n	800045e <main+0x12a>
 8000486:	bf00      	nop
 8000488:	40021000 	.word	0x40021000
 800048c:	40011000 	.word	0x40011000
 8000490:	20000390 	.word	0x20000390
 8000494:	10210000 	.word	0x10210000
 8000498:	40010800 	.word	0x40010800
 800049c:	200001fc 	.word	0x200001fc
 80004a0:	20000010 	.word	0x20000010
 80004a4:	20000008 	.word	0x20000008
 80004a8:	2000000c 	.word	0x2000000c
 80004ac:	20000004 	.word	0x20000004
 80004b0:	20000000 	.word	0x20000000

080004b4 <Error_Handler>:
 80004b4:	b672      	cpsid	i
  while (1)
 80004b6:	e7fe      	b.n	80004b6 <Error_Handler+0x2>

080004b8 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004b8:	4b0e      	ldr	r3, [pc, #56]	@ (80004f4 <HAL_MspInit+0x3c>)
{
 80004ba:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 80004bc:	699a      	ldr	r2, [r3, #24]
 80004be:	f042 0201 	orr.w	r2, r2, #1
 80004c2:	619a      	str	r2, [r3, #24]
 80004c4:	699a      	ldr	r2, [r3, #24]
 80004c6:	f002 0201 	and.w	r2, r2, #1
 80004ca:	9200      	str	r2, [sp, #0]
 80004cc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ce:	69da      	ldr	r2, [r3, #28]
 80004d0:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80004d4:	61da      	str	r2, [r3, #28]
 80004d6:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004d8:	4a07      	ldr	r2, [pc, #28]	@ (80004f8 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80004da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004de:	9301      	str	r3, [sp, #4]
 80004e0:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004e2:	6853      	ldr	r3, [r2, #4]
 80004e4:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80004e8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80004ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ee:	b002      	add	sp, #8
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop
 80004f4:	40021000 	.word	0x40021000
 80004f8:	40010000 	.word	0x40010000

080004fc <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 80004fc:	6803      	ldr	r3, [r0, #0]
{
 80004fe:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM2)
 8000500:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000504:	d10a      	bne.n	800051c <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000506:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 800050a:	69da      	ldr	r2, [r3, #28]
 800050c:	f042 0201 	orr.w	r2, r2, #1
 8000510:	61da      	str	r2, [r3, #28]
 8000512:	69db      	ldr	r3, [r3, #28]
 8000514:	f003 0301 	and.w	r3, r3, #1
 8000518:	9301      	str	r3, [sp, #4]
 800051a:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800051c:	b002      	add	sp, #8
 800051e:	4770      	bx	lr

08000520 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000520:	e7fe      	b.n	8000520 <NMI_Handler>

08000522 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000522:	e7fe      	b.n	8000522 <HardFault_Handler>

08000524 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000524:	e7fe      	b.n	8000524 <MemManage_Handler>

08000526 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000526:	e7fe      	b.n	8000526 <BusFault_Handler>

08000528 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000528:	e7fe      	b.n	8000528 <UsageFault_Handler>

0800052a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800052a:	4770      	bx	lr

0800052c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 800052c:	4770      	bx	lr

0800052e <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 800052e:	4770      	bx	lr

08000530 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000530:	f000 b888 	b.w	8000644 <HAL_IncTick>

08000534 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000534:	4801      	ldr	r0, [pc, #4]	@ (800053c <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 8000536:	f000 ba93 	b.w	8000a60 <HAL_PCD_IRQHandler>
 800053a:	bf00      	nop
 800053c:	200012c8 	.word	0x200012c8

08000540 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000540:	2020      	movs	r0, #32
 8000542:	f000 b9f1 	b.w	8000928 <HAL_GPIO_EXTI_IRQHandler>
	...

08000548 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000548:	4a0b      	ldr	r2, [pc, #44]	@ (8000578 <_sbrk+0x30>)
{
 800054a:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 800054c:	6811      	ldr	r1, [r2, #0]
{
 800054e:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8000550:	b909      	cbnz	r1, 8000556 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8000552:	490a      	ldr	r1, [pc, #40]	@ (800057c <_sbrk+0x34>)
 8000554:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000556:	6810      	ldr	r0, [r2, #0]
 8000558:	4909      	ldr	r1, [pc, #36]	@ (8000580 <_sbrk+0x38>)
 800055a:	4c0a      	ldr	r4, [pc, #40]	@ (8000584 <_sbrk+0x3c>)
 800055c:	4403      	add	r3, r0
 800055e:	1b09      	subs	r1, r1, r4
 8000560:	428b      	cmp	r3, r1
 8000562:	d906      	bls.n	8000572 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8000564:	f003 f8f6 	bl	8003754 <__errno>
 8000568:	230c      	movs	r3, #12
 800056a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800056c:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8000570:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8000572:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8000574:	e7fc      	b.n	8000570 <_sbrk+0x28>
 8000576:	bf00      	nop
 8000578:	200003d8 	.word	0x200003d8
 800057c:	200016e8 	.word	0x200016e8
 8000580:	20002800 	.word	0x20002800
 8000584:	00000400 	.word	0x00000400

08000588 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000588:	4770      	bx	lr
	...

0800058c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800058c:	f7ff fffc 	bl	8000588 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000590:	480b      	ldr	r0, [pc, #44]	@ (80005c0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000592:	490c      	ldr	r1, [pc, #48]	@ (80005c4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000594:	4a0c      	ldr	r2, [pc, #48]	@ (80005c8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000596:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000598:	e002      	b.n	80005a0 <LoopCopyDataInit>

0800059a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800059a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800059c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800059e:	3304      	adds	r3, #4

080005a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005a4:	d3f9      	bcc.n	800059a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005a6:	4a09      	ldr	r2, [pc, #36]	@ (80005cc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80005a8:	4c09      	ldr	r4, [pc, #36]	@ (80005d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80005aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005ac:	e001      	b.n	80005b2 <LoopFillZerobss>

080005ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005b0:	3204      	adds	r2, #4

080005b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005b4:	d3fb      	bcc.n	80005ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005b6:	f003 f8d3 	bl	8003760 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005ba:	f7ff febb 	bl	8000334 <main>
  bx lr
 80005be:	4770      	bx	lr
  ldr r0, =_sdata
 80005c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005c4:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80005c8:	08004178 	.word	0x08004178
  ldr r2, =_sbss
 80005cc:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80005d0:	200016e8 	.word	0x200016e8

080005d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005d4:	e7fe      	b.n	80005d4 <ADC1_2_IRQHandler>
	...

080005d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005d8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005da:	4b0e      	ldr	r3, [pc, #56]	@ (8000614 <HAL_InitTick+0x3c>)
{
 80005dc:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005de:	781a      	ldrb	r2, [r3, #0]
 80005e0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80005e8:	4a0b      	ldr	r2, [pc, #44]	@ (8000618 <HAL_InitTick+0x40>)
 80005ea:	6810      	ldr	r0, [r2, #0]
 80005ec:	fbb0 f0f3 	udiv	r0, r0, r3
 80005f0:	f000 f8ae 	bl	8000750 <HAL_SYSTICK_Config>
 80005f4:	4604      	mov	r4, r0
 80005f6:	b958      	cbnz	r0, 8000610 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005f8:	2d0f      	cmp	r5, #15
 80005fa:	d809      	bhi.n	8000610 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005fc:	4602      	mov	r2, r0
 80005fe:	4629      	mov	r1, r5
 8000600:	f04f 30ff 	mov.w	r0, #4294967295
 8000604:	f000 f854 	bl	80006b0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000608:	4620      	mov	r0, r4
 800060a:	4b04      	ldr	r3, [pc, #16]	@ (800061c <HAL_InitTick+0x44>)
 800060c:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800060e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000610:	2001      	movs	r0, #1
 8000612:	e7fc      	b.n	800060e <HAL_InitTick+0x36>
 8000614:	20000018 	.word	0x20000018
 8000618:	20000014 	.word	0x20000014
 800061c:	2000001c 	.word	0x2000001c

08000620 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000620:	4a07      	ldr	r2, [pc, #28]	@ (8000640 <HAL_Init+0x20>)
{
 8000622:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000624:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000626:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000628:	f043 0310 	orr.w	r3, r3, #16
 800062c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800062e:	f000 f82d 	bl	800068c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000632:	200f      	movs	r0, #15
 8000634:	f7ff ffd0 	bl	80005d8 <HAL_InitTick>
  HAL_MspInit();
 8000638:	f7ff ff3e 	bl	80004b8 <HAL_MspInit>
}
 800063c:	2000      	movs	r0, #0
 800063e:	bd08      	pop	{r3, pc}
 8000640:	40022000 	.word	0x40022000

08000644 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000644:	4a03      	ldr	r2, [pc, #12]	@ (8000654 <HAL_IncTick+0x10>)
 8000646:	4b04      	ldr	r3, [pc, #16]	@ (8000658 <HAL_IncTick+0x14>)
 8000648:	6811      	ldr	r1, [r2, #0]
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	440b      	add	r3, r1
 800064e:	6013      	str	r3, [r2, #0]
}
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	200003dc 	.word	0x200003dc
 8000658:	20000018 	.word	0x20000018

0800065c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800065c:	4b01      	ldr	r3, [pc, #4]	@ (8000664 <HAL_GetTick+0x8>)
 800065e:	6818      	ldr	r0, [r3, #0]
}
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	200003dc 	.word	0x200003dc

08000668 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000668:	b538      	push	{r3, r4, r5, lr}
 800066a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800066c:	f7ff fff6 	bl	800065c <HAL_GetTick>
 8000670:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000672:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000674:	bf1e      	ittt	ne
 8000676:	4b04      	ldrne	r3, [pc, #16]	@ (8000688 <HAL_Delay+0x20>)
 8000678:	781b      	ldrbne	r3, [r3, #0]
 800067a:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800067c:	f7ff ffee 	bl	800065c <HAL_GetTick>
 8000680:	1b43      	subs	r3, r0, r5
 8000682:	42a3      	cmp	r3, r4
 8000684:	d3fa      	bcc.n	800067c <HAL_Delay+0x14>
  {
  }
}
 8000686:	bd38      	pop	{r3, r4, r5, pc}
 8000688:	20000018 	.word	0x20000018

0800068c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800068c:	4907      	ldr	r1, [pc, #28]	@ (80006ac <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800068e:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000690:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000692:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000696:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800069a:	0412      	lsls	r2, r2, #16
 800069c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800069e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80006a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80006a8:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80006aa:	4770      	bx	lr
 80006ac:	e000ed00 	.word	0xe000ed00

080006b0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006b0:	4b15      	ldr	r3, [pc, #84]	@ (8000708 <HAL_NVIC_SetPriority+0x58>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006b2:	b530      	push	{r4, r5, lr}
 80006b4:	68dc      	ldr	r4, [r3, #12]
 80006b6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006ba:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006be:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006c0:	2b04      	cmp	r3, #4
 80006c2:	bf28      	it	cs
 80006c4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006c6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006c8:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006cc:	bf94      	ite	ls
 80006ce:	2400      	movls	r4, #0
 80006d0:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d2:	fa05 f303 	lsl.w	r3, r5, r3
 80006d6:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006da:	40a5      	lsls	r5, r4
 80006dc:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006e0:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 80006e2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006e4:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e8:	bfac      	ite	ge
 80006ea:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ee:	4a07      	ldrlt	r2, [pc, #28]	@ (800070c <HAL_NVIC_SetPriority+0x5c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	bfab      	itete	ge
 80006f8:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006fc:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000700:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000704:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000706:	bd30      	pop	{r4, r5, pc}
 8000708:	e000ed00 	.word	0xe000ed00
 800070c:	e000ed14 	.word	0xe000ed14

08000710 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000710:	2800      	cmp	r0, #0
 8000712:	db07      	blt.n	8000724 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000714:	2301      	movs	r3, #1
 8000716:	0941      	lsrs	r1, r0, #5
 8000718:	4a03      	ldr	r2, [pc, #12]	@ (8000728 <HAL_NVIC_EnableIRQ+0x18>)
 800071a:	f000 001f 	and.w	r0, r0, #31
 800071e:	4083      	lsls	r3, r0
 8000720:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	e000e100 	.word	0xe000e100

0800072c <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800072c:	2800      	cmp	r0, #0
 800072e:	db0c      	blt.n	800074a <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000730:	2201      	movs	r2, #1
 8000732:	4906      	ldr	r1, [pc, #24]	@ (800074c <HAL_NVIC_DisableIRQ+0x20>)
 8000734:	0943      	lsrs	r3, r0, #5
 8000736:	f000 001f 	and.w	r0, r0, #31
 800073a:	4082      	lsls	r2, r0
 800073c:	3320      	adds	r3, #32
 800073e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000742:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000746:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800074a:	4770      	bx	lr
 800074c:	e000e100 	.word	0xe000e100

08000750 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000750:	3801      	subs	r0, #1
 8000752:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000756:	d20b      	bcs.n	8000770 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000758:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800075c:	21f0      	movs	r1, #240	@ 0xf0
 800075e:	4a05      	ldr	r2, [pc, #20]	@ (8000774 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000760:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000762:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000766:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000768:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800076a:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800076c:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800076e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000770:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000772:	4770      	bx	lr
 8000774:	e000ed00 	.word	0xe000ed00

08000778 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000778:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800077c:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 800077e:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000780:	f8df c17c 	ldr.w	ip, [pc, #380]	@ 8000900 <HAL_GPIO_Init+0x188>
 8000784:	4b5f      	ldr	r3, [pc, #380]	@ (8000904 <HAL_GPIO_Init+0x18c>)
      switch (GPIO_Init->Mode)
 8000786:	f8df e180 	ldr.w	lr, [pc, #384]	@ 8000908 <HAL_GPIO_Init+0x190>
 800078a:	f8df 8180 	ldr.w	r8, [pc, #384]	@ 800090c <HAL_GPIO_Init+0x194>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800078e:	680d      	ldr	r5, [r1, #0]
 8000790:	fa35 f406 	lsrs.w	r4, r5, r6
 8000794:	d102      	bne.n	800079c <HAL_GPIO_Init+0x24>
      }
    }

	position++;
  }
}
 8000796:	b003      	add	sp, #12
 8000798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 800079c:	2701      	movs	r7, #1
 800079e:	40b7      	lsls	r7, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007a0:	ea05 0407 	and.w	r4, r5, r7
    if (iocurrent == ioposition)
 80007a4:	ea37 0505 	bics.w	r5, r7, r5
 80007a8:	d175      	bne.n	8000896 <HAL_GPIO_Init+0x11e>
      switch (GPIO_Init->Mode)
 80007aa:	684d      	ldr	r5, [r1, #4]
 80007ac:	2d03      	cmp	r5, #3
 80007ae:	d806      	bhi.n	80007be <HAL_GPIO_Init+0x46>
 80007b0:	3d01      	subs	r5, #1
 80007b2:	2d02      	cmp	r5, #2
 80007b4:	d87e      	bhi.n	80008b4 <HAL_GPIO_Init+0x13c>
 80007b6:	e8df f005 	tbb	[pc, r5]
 80007ba:	948f      	.short	0x948f
 80007bc:	9a          	.byte	0x9a
 80007bd:	00          	.byte	0x00
 80007be:	2d12      	cmp	r5, #18
 80007c0:	f000 8092 	beq.w	80008e8 <HAL_GPIO_Init+0x170>
 80007c4:	d869      	bhi.n	800089a <HAL_GPIO_Init+0x122>
 80007c6:	2d11      	cmp	r5, #17
 80007c8:	f000 8088 	beq.w	80008dc <HAL_GPIO_Init+0x164>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80007cc:	2cff      	cmp	r4, #255	@ 0xff
 80007ce:	bf98      	it	ls
 80007d0:	4681      	movls	r9, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80007d2:	f04f 0b0f 	mov.w	fp, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80007d6:	bf88      	it	hi
 80007d8:	f100 0904 	addhi.w	r9, r0, #4
 80007dc:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80007e0:	f8d9 7000 	ldr.w	r7, [r9]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80007e4:	bf88      	it	hi
 80007e6:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80007e8:	fa0b fa05 	lsl.w	sl, fp, r5
 80007ec:	ea27 070a 	bic.w	r7, r7, sl
 80007f0:	fa02 f505 	lsl.w	r5, r2, r5
 80007f4:	432f      	orrs	r7, r5
 80007f6:	f8c9 7000 	str.w	r7, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80007fa:	f8d1 9004 	ldr.w	r9, [r1, #4]
 80007fe:	f019 5f80 	tst.w	r9, #268435456	@ 0x10000000
 8000802:	d048      	beq.n	8000896 <HAL_GPIO_Init+0x11e>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000804:	f8dc 5018 	ldr.w	r5, [ip, #24]
 8000808:	f026 0703 	bic.w	r7, r6, #3
 800080c:	f045 0501 	orr.w	r5, r5, #1
 8000810:	f8cc 5018 	str.w	r5, [ip, #24]
 8000814:	f8dc 5018 	ldr.w	r5, [ip, #24]
 8000818:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 800081c:	f005 0501 	and.w	r5, r5, #1
 8000820:	9501      	str	r5, [sp, #4]
 8000822:	f507 3780 	add.w	r7, r7, #65536	@ 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000826:	f006 0a03 	and.w	sl, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800082a:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800082c:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8000830:	68bd      	ldr	r5, [r7, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000832:	fa0b fb0a 	lsl.w	fp, fp, sl
 8000836:	ea25 0b0b 	bic.w	fp, r5, fp
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800083a:	4d35      	ldr	r5, [pc, #212]	@ (8000910 <HAL_GPIO_Init+0x198>)
 800083c:	42a8      	cmp	r0, r5
 800083e:	d05a      	beq.n	80008f6 <HAL_GPIO_Init+0x17e>
 8000840:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8000844:	42a8      	cmp	r0, r5
 8000846:	d058      	beq.n	80008fa <HAL_GPIO_Init+0x182>
 8000848:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800084c:	42a8      	cmp	r0, r5
 800084e:	bf14      	ite	ne
 8000850:	2503      	movne	r5, #3
 8000852:	2502      	moveq	r5, #2
 8000854:	fa05 f50a 	lsl.w	r5, r5, sl
 8000858:	ea45 050b 	orr.w	r5, r5, fp
        AFIO->EXTICR[position >> 2u] = temp;
 800085c:	60bd      	str	r5, [r7, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 800085e:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000860:	f419 1f80 	tst.w	r9, #1048576	@ 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000864:	bf14      	ite	ne
 8000866:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000868:	43a5      	biceq	r5, r4
 800086a:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 800086c:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800086e:	f419 1f00 	tst.w	r9, #2097152	@ 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000872:	bf14      	ite	ne
 8000874:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000876:	43a5      	biceq	r5, r4
 8000878:	60dd      	str	r5, [r3, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 800087a:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800087c:	f419 3f00 	tst.w	r9, #131072	@ 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000880:	bf14      	ite	ne
 8000882:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000884:	43a5      	biceq	r5, r4
 8000886:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 8000888:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800088a:	f419 3f80 	tst.w	r9, #65536	@ 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 800088e:	bf14      	ite	ne
 8000890:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000892:	43a5      	biceq	r5, r4
 8000894:	601d      	str	r5, [r3, #0]
	position++;
 8000896:	3601      	adds	r6, #1
 8000898:	e779      	b.n	800078e <HAL_GPIO_Init+0x16>
      switch (GPIO_Init->Mode)
 800089a:	f8df 9078 	ldr.w	r9, [pc, #120]	@ 8000914 <HAL_GPIO_Init+0x19c>
 800089e:	454d      	cmp	r5, r9
 80008a0:	d008      	beq.n	80008b4 <HAL_GPIO_Init+0x13c>
 80008a2:	d811      	bhi.n	80008c8 <HAL_GPIO_Init+0x150>
 80008a4:	f5a9 1980 	sub.w	r9, r9, #1048576	@ 0x100000
 80008a8:	454d      	cmp	r5, r9
 80008aa:	d003      	beq.n	80008b4 <HAL_GPIO_Init+0x13c>
 80008ac:	4575      	cmp	r5, lr
 80008ae:	d001      	beq.n	80008b4 <HAL_GPIO_Init+0x13c>
 80008b0:	4545      	cmp	r5, r8
 80008b2:	d18b      	bne.n	80007cc <HAL_GPIO_Init+0x54>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80008b4:	688a      	ldr	r2, [r1, #8]
 80008b6:	b1e2      	cbz	r2, 80008f2 <HAL_GPIO_Init+0x17a>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80008b8:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 80008ba:	bf08      	it	eq
 80008bc:	6107      	streq	r7, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80008be:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 80008c2:	bf18      	it	ne
 80008c4:	6147      	strne	r7, [r0, #20]
 80008c6:	e781      	b.n	80007cc <HAL_GPIO_Init+0x54>
      switch (GPIO_Init->Mode)
 80008c8:	f8df 904c 	ldr.w	r9, [pc, #76]	@ 8000918 <HAL_GPIO_Init+0x1a0>
 80008cc:	454d      	cmp	r5, r9
 80008ce:	d0f1      	beq.n	80008b4 <HAL_GPIO_Init+0x13c>
 80008d0:	f509 3980 	add.w	r9, r9, #65536	@ 0x10000
 80008d4:	454d      	cmp	r5, r9
 80008d6:	e7ec      	b.n	80008b2 <HAL_GPIO_Init+0x13a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80008d8:	68ca      	ldr	r2, [r1, #12]
          break;
 80008da:	e777      	b.n	80007cc <HAL_GPIO_Init+0x54>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80008dc:	68ca      	ldr	r2, [r1, #12]
 80008de:	3204      	adds	r2, #4
          break;
 80008e0:	e774      	b.n	80007cc <HAL_GPIO_Init+0x54>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80008e2:	68ca      	ldr	r2, [r1, #12]
 80008e4:	3208      	adds	r2, #8
          break;
 80008e6:	e771      	b.n	80007cc <HAL_GPIO_Init+0x54>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80008e8:	68ca      	ldr	r2, [r1, #12]
 80008ea:	320c      	adds	r2, #12
          break;
 80008ec:	e76e      	b.n	80007cc <HAL_GPIO_Init+0x54>
      switch (GPIO_Init->Mode)
 80008ee:	2200      	movs	r2, #0
 80008f0:	e76c      	b.n	80007cc <HAL_GPIO_Init+0x54>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80008f2:	2204      	movs	r2, #4
 80008f4:	e76a      	b.n	80007cc <HAL_GPIO_Init+0x54>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80008f6:	2500      	movs	r5, #0
 80008f8:	e7ac      	b.n	8000854 <HAL_GPIO_Init+0xdc>
 80008fa:	2501      	movs	r5, #1
 80008fc:	e7aa      	b.n	8000854 <HAL_GPIO_Init+0xdc>
 80008fe:	bf00      	nop
 8000900:	40021000 	.word	0x40021000
 8000904:	40010400 	.word	0x40010400
 8000908:	10210000 	.word	0x10210000
 800090c:	10110000 	.word	0x10110000
 8000910:	40010800 	.word	0x40010800
 8000914:	10220000 	.word	0x10220000
 8000918:	10310000 	.word	0x10310000

0800091c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800091c:	b10a      	cbz	r2, 8000922 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800091e:	6101      	str	r1, [r0, #16]
  }
}
 8000920:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000922:	0409      	lsls	r1, r1, #16
 8000924:	e7fb      	b.n	800091e <HAL_GPIO_WritePin+0x2>
	...

08000928 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000928:	4a04      	ldr	r2, [pc, #16]	@ (800093c <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 800092a:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800092c:	6951      	ldr	r1, [r2, #20]
 800092e:	4201      	tst	r1, r0
 8000930:	d002      	beq.n	8000938 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000932:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000934:	f7ff fc12 	bl	800015c <HAL_GPIO_EXTI_Callback>
  }
}
 8000938:	bd08      	pop	{r3, pc}
 800093a:	bf00      	nop
 800093c:	40010400 	.word	0x40010400

08000940 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000942:	4604      	mov	r4, r0
 8000944:	b1e0      	cbz	r0, 8000980 <HAL_PCD_Init+0x40>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000946:	f890 3291 	ldrb.w	r3, [r0, #657]	@ 0x291
 800094a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800094e:	b91b      	cbnz	r3, 8000958 <HAL_PCD_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000950:	f880 2290 	strb.w	r2, [r0, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000954:	f002 fdce 	bl	80034f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000958:	2303      	movs	r3, #3
 800095a:	f884 3291 	strb.w	r3, [r4, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 800095e:	2300      	movs	r3, #0

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000960:	4625      	mov	r5, r4
  hpcd->Init.dma_enable = 0U;
 8000962:	7163      	strb	r3, [r4, #5]
  __HAL_PCD_DISABLE(hpcd);
 8000964:	f855 0b04 	ldr.w	r0, [r5], #4
 8000968:	f001 faca 	bl	8001f00 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800096c:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8000970:	6820      	ldr	r0, [r4, #0]
 8000972:	f001 fab5 	bl	8001ee0 <USB_CoreInit>
 8000976:	4601      	mov	r1, r0
 8000978:	b128      	cbz	r0, 8000986 <HAL_PCD_Init+0x46>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800097a:	2302      	movs	r3, #2
 800097c:	f884 3291 	strb.w	r3, [r4, #657]	@ 0x291
    return HAL_ERROR;
 8000980:	2501      	movs	r5, #1
  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8000982:	4628      	mov	r0, r5
 8000984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8000986:	6820      	ldr	r0, [r4, #0]
 8000988:	f001 fac4 	bl	8001f14 <USB_SetCurrentMode>
 800098c:	2800      	cmp	r0, #0
 800098e:	d1f4      	bne.n	800097a <HAL_PCD_Init+0x3a>
 8000990:	4602      	mov	r2, r0
    hpcd->IN_ep[i].is_in = 1U;
 8000992:	2701      	movs	r7, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000994:	7926      	ldrb	r6, [r4, #4]
 8000996:	f104 0310 	add.w	r3, r4, #16
 800099a:	b2c1      	uxtb	r1, r0
 800099c:	428e      	cmp	r6, r1
 800099e:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 80009a2:	d818      	bhi.n	80009d6 <HAL_PCD_Init+0x96>
 80009a4:	2100      	movs	r1, #0
    hpcd->OUT_ep[i].is_in = 0U;
 80009a6:	460a      	mov	r2, r1
 80009a8:	f504 73a8 	add.w	r3, r4, #336	@ 0x150
 80009ac:	b2c8      	uxtb	r0, r1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80009ae:	4286      	cmp	r6, r0
 80009b0:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 80009b4:	d81b      	bhi.n	80009ee <HAL_PCD_Init+0xae>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80009b6:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80009ba:	6820      	ldr	r0, [r4, #0]
 80009bc:	f001 faac 	bl	8001f18 <USB_DevInit>
 80009c0:	4605      	mov	r5, r0
 80009c2:	2800      	cmp	r0, #0
 80009c4:	d1d9      	bne.n	800097a <HAL_PCD_Init+0x3a>
  hpcd->State = HAL_PCD_STATE_READY;
 80009c6:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 80009c8:	7360      	strb	r0, [r4, #13]
  (void)USB_DevDisconnect(hpcd->Instance);
 80009ca:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_READY;
 80009cc:	f884 3291 	strb.w	r3, [r4, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 80009d0:	f001 fd58 	bl	8002484 <USB_DevDisconnect>
  return HAL_OK;
 80009d4:	e7d5      	b.n	8000982 <HAL_PCD_Init+0x42>
    hpcd->IN_ep[i].xfer_buff = 0U;
 80009d6:	e943 2206 	strd	r2, r2, [r3, #-24]
    hpcd->IN_ep[i].is_in = 1U;
 80009da:	f803 7c27 	strb.w	r7, [r3, #-39]
    hpcd->IN_ep[i].num = i;
 80009de:	f803 1c28 	strb.w	r1, [r3, #-40]
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80009e2:	f803 2c25 	strb.w	r2, [r3, #-37]
    hpcd->IN_ep[i].xfer_len = 0U;
 80009e6:	f843 2c10 	str.w	r2, [r3, #-16]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80009ea:	3001      	adds	r0, #1
 80009ec:	e7d5      	b.n	800099a <HAL_PCD_Init+0x5a>
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80009ee:	e943 2206 	strd	r2, r2, [r3, #-24]
    hpcd->OUT_ep[i].is_in = 0U;
 80009f2:	f803 2c27 	strb.w	r2, [r3, #-39]
    hpcd->OUT_ep[i].num = i;
 80009f6:	f803 0c28 	strb.w	r0, [r3, #-40]
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80009fa:	f803 2c25 	strb.w	r2, [r3, #-37]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80009fe:	f843 2c10 	str.w	r2, [r3, #-16]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000a02:	3101      	adds	r1, #1
 8000a04:	e7d2      	b.n	80009ac <HAL_PCD_Init+0x6c>

08000a06 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000a06:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 8000a08:	f890 3290 	ldrb.w	r3, [r0, #656]	@ 0x290
{
 8000a0c:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000a0e:	2b01      	cmp	r3, #1
 8000a10:	d010      	beq.n	8000a34 <HAL_PCD_Start+0x2e>
 8000a12:	2501      	movs	r5, #1
 8000a14:	f880 5290 	strb.w	r5, [r0, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8000a18:	6800      	ldr	r0, [r0, #0]
 8000a1a:	f001 fa68 	bl	8001eee <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000a1e:	4629      	mov	r1, r5
 8000a20:	4620      	mov	r0, r4
 8000a22:	f002 fe6e 	bl	8003702 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8000a26:	6820      	ldr	r0, [r4, #0]
 8000a28:	f001 fd2a 	bl	8002480 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000a2c:	2000      	movs	r0, #0
 8000a2e:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290

  return HAL_OK;
}
 8000a32:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8000a34:	2002      	movs	r0, #2
 8000a36:	e7fc      	b.n	8000a32 <HAL_PCD_Start+0x2c>

08000a38 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000a38:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8000a3a:	f890 2290 	ldrb.w	r2, [r0, #656]	@ 0x290
{
 8000a3e:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000a40:	2a01      	cmp	r2, #1
 8000a42:	d00a      	beq.n	8000a5a <HAL_PCD_SetAddress+0x22>
 8000a44:	2201      	movs	r2, #1
  hpcd->USB_Address = address;
 8000a46:	7341      	strb	r1, [r0, #13]
  __HAL_LOCK(hpcd);
 8000a48:	f880 2290 	strb.w	r2, [r0, #656]	@ 0x290
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000a4c:	6800      	ldr	r0, [r0, #0]
 8000a4e:	f001 fd11 	bl	8002474 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000a52:	2000      	movs	r0, #0
 8000a54:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290

  return HAL_OK;
}
 8000a58:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000a5a:	2002      	movs	r0, #2
 8000a5c:	e7fc      	b.n	8000a58 <HAL_PCD_SetAddress+0x20>
	...

08000a60 <HAL_PCD_IRQHandler>:
{
 8000a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a64:	4604      	mov	r4, r0
 8000a66:	b085      	sub	sp, #20
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8000a68:	6800      	ldr	r0, [r0, #0]
 8000a6a:	f001 fd0d 	bl	8002488 <USB_ReadInterrupts>
  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8000a6e:	f410 4500 	ands.w	r5, r0, #32768	@ 0x8000
 8000a72:	f000 844f 	beq.w	8001314 <HAL_PCD_IRQHandler+0x8b4>
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);

        if (ep->type == EP_TYPE_ISOC)
 8000a76:	2528      	movs	r5, #40	@ 0x28
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000a78:	4ec6      	ldr	r6, [pc, #792]	@ (8000d94 <HAL_PCD_IRQHandler+0x334>)
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8000a7a:	6820      	ldr	r0, [r4, #0]
 8000a7c:	f8b0 3044 	ldrh.w	r3, [r0, #68]	@ 0x44
 8000a80:	041f      	lsls	r7, r3, #16
 8000a82:	d402      	bmi.n	8000a8a <HAL_PCD_IRQHandler+0x2a>
}
 8000a84:	b005      	add	sp, #20
 8000a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wIstr = hpcd->Instance->ISTR;
 8000a8a:	f8b0 3044 	ldrh.w	r3, [r0, #68]	@ 0x44
    if (epindex == 0U)
 8000a8e:	f013 070f 	ands.w	r7, r3, #15
    wIstr = hpcd->Instance->ISTR;
 8000a92:	b299      	uxth	r1, r3
    if (epindex == 0U)
 8000a94:	f040 80c0 	bne.w	8000c18 <HAL_PCD_IRQHandler+0x1b8>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8000a98:	f011 0110 	ands.w	r1, r1, #16
 8000a9c:	d126      	bne.n	8000aec <HAL_PCD_IRQHandler+0x8c>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000a9e:	8803      	ldrh	r3, [r0, #0]
 8000aa0:	b29b      	uxth	r3, r3
 8000aa2:	4033      	ands	r3, r6
 8000aa4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000aa8:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000aaa:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8000aae:	7c22      	ldrb	r2, [r4, #16]
 8000ab0:	b29b      	uxth	r3, r3
 8000ab2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000ab6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000aba:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	@ 0x404
        ep->xfer_buff += ep->xfer_count;
 8000abe:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000ac0:	f3c3 0309 	ubfx	r3, r3, #0, #10
        ep->xfer_buff += ep->xfer_count;
 8000ac4:	441a      	add	r2, r3
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000ac6:	62e3      	str	r3, [r4, #44]	@ 0x2c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8000ac8:	4620      	mov	r0, r4
        ep->xfer_buff += ep->xfer_count;
 8000aca:	6262      	str	r2, [r4, #36]	@ 0x24
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8000acc:	f002 fd41 	bl	8003552 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8000ad0:	7b63      	ldrb	r3, [r4, #13]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d0d1      	beq.n	8000a7a <HAL_PCD_IRQHandler+0x1a>
 8000ad6:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8000ad8:	6821      	ldr	r1, [r4, #0]
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8000ada:	2a00      	cmp	r2, #0
 8000adc:	d1cd      	bne.n	8000a7a <HAL_PCD_IRQHandler+0x1a>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8000ade:	7b63      	ldrb	r3, [r4, #13]
 8000ae0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ae4:	f8a1 304c 	strh.w	r3, [r1, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8000ae8:	7362      	strb	r2, [r4, #13]
 8000aea:	e7c6      	b.n	8000a7a <HAL_PCD_IRQHandler+0x1a>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8000aec:	8807      	ldrh	r7, [r0, #0]
 8000aee:	b2bb      	uxth	r3, r7
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8000af0:	f417 6700 	ands.w	r7, r7, #2048	@ 0x800
 8000af4:	d021      	beq.n	8000b3a <HAL_PCD_IRQHandler+0xda>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000af6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8000afa:	f894 2150 	ldrb.w	r2, [r4, #336]	@ 0x150
 8000afe:	b29b      	uxth	r3, r3
 8000b00:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000b04:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000b08:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	@ 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8000b0c:	f8b4 2156 	ldrh.w	r2, [r4, #342]	@ 0x156
 8000b10:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000b14:	f8c4 316c 	str.w	r3, [r4, #364]	@ 0x16c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8000b18:	f504 7126 	add.w	r1, r4, #664	@ 0x298
 8000b1c:	f001 feff 	bl	800291e <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000b20:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8000b22:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000b24:	8813      	ldrh	r3, [r2, #0]
 8000b26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000b2a:	051b      	lsls	r3, r3, #20
 8000b2c:	0d1b      	lsrs	r3, r3, #20
 8000b2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b32:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8000b34:	f002 fcfe 	bl	8003534 <HAL_PCD_SetupStageCallback>
 8000b38:	e79f      	b.n	8000a7a <HAL_PCD_IRQHandler+0x1a>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000b3a:	0419      	lsls	r1, r3, #16
 8000b3c:	d59d      	bpl.n	8000a7a <HAL_PCD_IRQHandler+0x1a>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000b3e:	8803      	ldrh	r3, [r0, #0]
 8000b40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000b44:	051b      	lsls	r3, r3, #20
 8000b46:	0d1b      	lsrs	r3, r3, #20
 8000b48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b4c:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000b4e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8000b52:	f894 2150 	ldrb.w	r2, [r4, #336]	@ 0x150
 8000b56:	b29b      	uxth	r3, r3
 8000b58:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000b5c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000b60:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	@ 0x40c
 8000b64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000b68:	f8c4 316c 	str.w	r3, [r4, #364]	@ 0x16c
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8000b6c:	b18b      	cbz	r3, 8000b92 <HAL_PCD_IRQHandler+0x132>
 8000b6e:	f8d4 1164 	ldr.w	r1, [r4, #356]	@ 0x164
 8000b72:	b171      	cbz	r1, 8000b92 <HAL_PCD_IRQHandler+0x132>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8000b74:	f8b4 2156 	ldrh.w	r2, [r4, #342]	@ 0x156
 8000b78:	f001 fed1 	bl	800291e <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8000b7c:	f8d4 3164 	ldr.w	r3, [r4, #356]	@ 0x164
 8000b80:	f8d4 216c 	ldr.w	r2, [r4, #364]	@ 0x16c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8000b84:	4639      	mov	r1, r7
            ep->xfer_buff += ep->xfer_count;
 8000b86:	4413      	add	r3, r2
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8000b88:	4620      	mov	r0, r4
            ep->xfer_buff += ep->xfer_count;
 8000b8a:	f8c4 3164 	str.w	r3, [r4, #356]	@ 0x164
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8000b8e:	f002 fcd7 	bl	8003540 <HAL_PCD_DataOutStageCallback>
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8000b92:	6821      	ldr	r1, [r4, #0]
 8000b94:	880a      	ldrh	r2, [r1, #0]
 8000b96:	b293      	uxth	r3, r2
          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8000b98:	0512      	lsls	r2, r2, #20
 8000b9a:	f53f af6e 	bmi.w	8000a7a <HAL_PCD_IRQHandler+0x1a>
 8000b9e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8000ba2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8000ba6:	f43f af68 	beq.w	8000a7a <HAL_PCD_IRQHandler+0x1a>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000baa:	f8b1 2050 	ldrh.w	r2, [r1, #80]	@ 0x50
 8000bae:	f201 400c 	addw	r0, r1, #1036	@ 0x40c
 8000bb2:	b292      	uxth	r2, r2
 8000bb4:	5a83      	ldrh	r3, [r0, r2]
 8000bb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000bba:	5283      	strh	r3, [r0, r2]
 8000bbc:	f8d4 3160 	ldr.w	r3, [r4, #352]	@ 0x160
 8000bc0:	2b3e      	cmp	r3, #62	@ 0x3e
 8000bc2:	d91d      	bls.n	8000c00 <HAL_PCD_IRQHandler+0x1a0>
 8000bc4:	095f      	lsrs	r7, r3, #5
 8000bc6:	06db      	lsls	r3, r3, #27
 8000bc8:	5a83      	ldrh	r3, [r0, r2]
 8000bca:	bf08      	it	eq
 8000bcc:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8000bd0:	b29b      	uxth	r3, r3
 8000bd2:	ea43 2387 	orr.w	r3, r3, r7, lsl #10
 8000bd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000bda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000bde:	b29b      	uxth	r3, r3
 8000be0:	5283      	strh	r3, [r0, r2]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8000be2:	880b      	ldrh	r3, [r1, #0]
 8000be4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000be8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000bec:	041b      	lsls	r3, r3, #16
 8000bee:	0c1b      	lsrs	r3, r3, #16
 8000bf0:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 8000bf4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000bf8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bfc:	800b      	strh	r3, [r1, #0]
 8000bfe:	e73c      	b.n	8000a7a <HAL_PCD_IRQHandler+0x1a>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000c00:	b90b      	cbnz	r3, 8000c06 <HAL_PCD_IRQHandler+0x1a6>
 8000c02:	5a83      	ldrh	r3, [r0, r2]
 8000c04:	e7e7      	b.n	8000bd6 <HAL_PCD_IRQHandler+0x176>
 8000c06:	085f      	lsrs	r7, r3, #1
 8000c08:	07db      	lsls	r3, r3, #31
 8000c0a:	5a83      	ldrh	r3, [r0, r2]
 8000c0c:	bf48      	it	mi
 8000c0e:	3701      	addmi	r7, #1
 8000c10:	b29b      	uxth	r3, r3
 8000c12:	ea43 2387 	orr.w	r3, r3, r7, lsl #10
 8000c16:	e7e2      	b.n	8000bde <HAL_PCD_IRQHandler+0x17e>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8000c18:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000c1c:	0419      	lsls	r1, r3, #16
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8000c1e:	fa1f f883 	uxth.w	r8, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000c22:	f140 80f6 	bpl.w	8000e12 <HAL_PCD_IRQHandler+0x3b2>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8000c26:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
        if (ep->doublebuffer == 0U)
 8000c2a:	fb05 4107 	mla	r1, r5, r7, r4
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8000c2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000c32:	051b      	lsls	r3, r3, #20
 8000c34:	0d1b      	lsrs	r3, r3, #20
 8000c36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c3a:	f820 3027 	strh.w	r3, [r0, r7, lsl #2]
        if (ep->doublebuffer == 0U)
 8000c3e:	f891 315c 	ldrb.w	r3, [r1, #348]	@ 0x15c
 8000c42:	f500 6e80 	add.w	lr, r0, #1024	@ 0x400
 8000c46:	b9bb      	cbnz	r3, 8000c78 <HAL_PCD_IRQHandler+0x218>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000c48:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8000c4c:	f891 2150 	ldrb.w	r2, [r1, #336]	@ 0x150
 8000c50:	b29b      	uxth	r3, r3
 8000c52:	3306      	adds	r3, #6
 8000c54:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000c58:	f83e 9013 	ldrh.w	r9, [lr, r3, lsl #1]
 8000c5c:	f3c9 0909 	ubfx	r9, r9, #0, #10
          if (count != 0U)
 8000c60:	f1b9 0f00 	cmp.w	r9, #0
 8000c64:	f000 80ba 	beq.w	8000ddc <HAL_PCD_IRQHandler+0x37c>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8000c68:	464b      	mov	r3, r9
 8000c6a:	f8b1 2156 	ldrh.w	r2, [r1, #342]	@ 0x156
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000c6e:	f8d1 1164 	ldr.w	r1, [r1, #356]	@ 0x164
 8000c72:	f001 fe54 	bl	800291e <USB_ReadPMA>
 8000c76:	e0b1      	b.n	8000ddc <HAL_PCD_IRQHandler+0x37c>
          if (ep->type == EP_TYPE_BULK)
 8000c78:	f891 3153 	ldrb.w	r3, [r1, #339]	@ 0x153

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000c7c:	f891 2150 	ldrb.w	r2, [r1, #336]	@ 0x150
          if (ep->type == EP_TYPE_BULK)
 8000c80:	2b02      	cmp	r3, #2
 8000c82:	f040 8089 	bne.w	8000d98 <HAL_PCD_IRQHandler+0x338>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000c86:	f8b0 9050 	ldrh.w	r9, [r0, #80]	@ 0x50
 8000c8a:	ea4f 0bc2 	mov.w	fp, r2, lsl #3
 8000c8e:	fa1f f989 	uxth.w	r9, r9
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8000c92:	f418 4a80 	ands.w	sl, r8, #16384	@ 0x4000

    if (ep->xfer_len >= count)
 8000c96:	f8d1 3168 	ldr.w	r3, [r1, #360]	@ 0x168
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000c9a:	44d9      	add	r9, fp
 8000c9c:	f008 0c40 	and.w	ip, r8, #64	@ 0x40
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8000ca0:	d03c      	beq.n	8000d1c <HAL_PCD_IRQHandler+0x2bc>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000ca2:	f109 0902 	add.w	r9, r9, #2
 8000ca6:	f83e 9019 	ldrh.w	r9, [lr, r9, lsl #1]
 8000caa:	f3c9 0909 	ubfx	r9, r9, #0, #10
    if (ep->xfer_len >= count)
 8000cae:	4599      	cmp	r9, r3
 8000cb0:	d913      	bls.n	8000cda <HAL_PCD_IRQHandler+0x27a>
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	f8c1 3168 	str.w	r3, [r1, #360]	@ 0x168
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8000cb8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8000cbc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000cc0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000cc4:	041b      	lsls	r3, r3, #16
 8000cc6:	0c1b      	lsrs	r3, r3, #16
 8000cc8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8000ccc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000cd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cd4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8000cd8:	e005      	b.n	8000ce6 <HAL_PCD_IRQHandler+0x286>
      ep->xfer_len -= count;
 8000cda:	eba3 0309 	sub.w	r3, r3, r9
 8000cde:	f8c1 3168 	str.w	r3, [r1, #360]	@ 0x168
    if (ep->xfer_len == 0U)
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d0e8      	beq.n	8000cb8 <HAL_PCD_IRQHandler+0x258>
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8000ce6:	f1bc 0f00 	cmp.w	ip, #0
 8000cea:	d00d      	beq.n	8000d08 <HAL_PCD_IRQHandler+0x2a8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8000cec:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8000cf0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8000cf4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000cf8:	041b      	lsls	r3, r3, #16
 8000cfa:	0c1b      	lsrs	r3, r3, #16
 8000cfc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d00:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000d04:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    if (count != 0U)
 8000d08:	f1b9 0f00 	cmp.w	r9, #0
 8000d0c:	d066      	beq.n	8000ddc <HAL_PCD_IRQHandler+0x37c>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8000d0e:	2128      	movs	r1, #40	@ 0x28
 8000d10:	fb01 4107 	mla	r1, r1, r7, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8000d14:	464b      	mov	r3, r9
 8000d16:	f8b1 2158 	ldrh.w	r2, [r1, #344]	@ 0x158
 8000d1a:	e7a8      	b.n	8000c6e <HAL_PCD_IRQHandler+0x20e>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8000d1c:	f109 0906 	add.w	r9, r9, #6
 8000d20:	f83e 9019 	ldrh.w	r9, [lr, r9, lsl #1]
 8000d24:	f3c9 0909 	ubfx	r9, r9, #0, #10

    if (ep->xfer_len >= count)
 8000d28:	4599      	cmp	r9, r3
 8000d2a:	d912      	bls.n	8000d52 <HAL_PCD_IRQHandler+0x2f2>
 8000d2c:	f8c1 a168 	str.w	sl, [r1, #360]	@ 0x168
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8000d30:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8000d34:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000d38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000d3c:	041b      	lsls	r3, r3, #16
 8000d3e:	0c1b      	lsrs	r3, r3, #16
 8000d40:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8000d44:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d4c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8000d50:	e005      	b.n	8000d5e <HAL_PCD_IRQHandler+0x2fe>
      ep->xfer_len -= count;
 8000d52:	eba3 0309 	sub.w	r3, r3, r9
 8000d56:	f8c1 3168 	str.w	r3, [r1, #360]	@ 0x168
    if (ep->xfer_len == 0U)
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d0e8      	beq.n	8000d30 <HAL_PCD_IRQHandler+0x2d0>
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8000d5e:	f1bc 0f00 	cmp.w	ip, #0
 8000d62:	d10d      	bne.n	8000d80 <HAL_PCD_IRQHandler+0x320>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8000d64:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8000d68:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8000d6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000d70:	041b      	lsls	r3, r3, #16
 8000d72:	0c1b      	lsrs	r3, r3, #16
 8000d74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d78:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000d7c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    if (count != 0U)
 8000d80:	f1b9 0f00 	cmp.w	r9, #0
 8000d84:	d02a      	beq.n	8000ddc <HAL_PCD_IRQHandler+0x37c>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000d86:	2128      	movs	r1, #40	@ 0x28
 8000d88:	fb01 4107 	mla	r1, r1, r7, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000d8c:	464b      	mov	r3, r9
 8000d8e:	f8b1 215a 	ldrh.w	r2, [r1, #346]	@ 0x15a
 8000d92:	e76c      	b.n	8000c6e <HAL_PCD_IRQHandler+0x20e>
 8000d94:	ffff8f0f 	.word	0xffff8f0f
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8000d98:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8000d9c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8000da0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000da4:	041b      	lsls	r3, r3, #16
 8000da6:	0c1b      	lsrs	r3, r3, #16
 8000da8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000dac:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000db0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8000db4:	f891 3150 	ldrb.w	r3, [r1, #336]	@ 0x150
 8000db8:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8000dbc:	00db      	lsls	r3, r3, #3
 8000dbe:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000dc2:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8000dc6:	b292      	uxth	r2, r2
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8000dc8:	d054      	beq.n	8000e74 <HAL_PCD_IRQHandler+0x414>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000dca:	3202      	adds	r2, #2
 8000dcc:	4413      	add	r3, r2
 8000dce:	f83e 9013 	ldrh.w	r9, [lr, r3, lsl #1]
 8000dd2:	f3c9 0909 	ubfx	r9, r9, #0, #10
              if (count != 0U)
 8000dd6:	f1b9 0f00 	cmp.w	r9, #0
 8000dda:	d19b      	bne.n	8000d14 <HAL_PCD_IRQHandler+0x2b4>
        ep->xfer_count += count;
 8000ddc:	fb05 f107 	mul.w	r1, r5, r7
 8000de0:	1863      	adds	r3, r4, r1
 8000de2:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
 8000de6:	444a      	add	r2, r9
 8000de8:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
        ep->xfer_buff += count;
 8000dec:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
 8000df0:	444a      	add	r2, r9
 8000df2:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8000df6:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
 8000dfa:	b11a      	cbz	r2, 8000e04 <HAL_PCD_IRQHandler+0x3a4>
 8000dfc:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8000e00:	4599      	cmp	r9, r3
 8000e02:	d241      	bcs.n	8000e88 <HAL_PCD_IRQHandler+0x428>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8000e04:	fb05 4307 	mla	r3, r5, r7, r4
 8000e08:	4620      	mov	r0, r4
 8000e0a:	f893 1150 	ldrb.w	r1, [r3, #336]	@ 0x150
 8000e0e:	f002 fb97 	bl	8003540 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8000e12:	f018 0f80 	tst.w	r8, #128	@ 0x80
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000e16:	6820      	ldr	r0, [r4, #0]
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8000e18:	f43f ae2f 	beq.w	8000a7a <HAL_PCD_IRQHandler+0x1a>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000e1c:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
        if (ep->type == EP_TYPE_ISOC)
 8000e20:	fb05 fc07 	mul.w	ip, r5, r7
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000e24:	b29b      	uxth	r3, r3
 8000e26:	4033      	ands	r3, r6
 8000e28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000e2c:	f820 3027 	strh.w	r3, [r0, r7, lsl #2]
        if (ep->type == EP_TYPE_ISOC)
 8000e30:	eb04 030c 	add.w	r3, r4, ip
 8000e34:	7cda      	ldrb	r2, [r3, #19]
 8000e36:	2a01      	cmp	r2, #1
 8000e38:	d156      	bne.n	8000ee8 <HAL_PCD_IRQHandler+0x488>
          ep->xfer_len = 0U;
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	fb07 5205 	mla	r2, r7, r5, r5
 8000e40:	50a1      	str	r1, [r4, r2]
          if (ep->doublebuffer != 0U)
 8000e42:	7f1a      	ldrb	r2, [r3, #28]
 8000e44:	b392      	cbz	r2, 8000eac <HAL_PCD_IRQHandler+0x44c>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8000e46:	f018 0840 	ands.w	r8, r8, #64	@ 0x40
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8000e4a:	7c5a      	ldrb	r2, [r3, #17]
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8000e4c:	d036      	beq.n	8000ebc <HAL_PCD_IRQHandler+0x45c>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8000e4e:	bb12      	cbnz	r2, 8000e96 <HAL_PCD_IRQHandler+0x436>
 8000e50:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8000e54:	7c1b      	ldrb	r3, [r3, #16]
 8000e56:	b292      	uxth	r2, r2
 8000e58:	011b      	lsls	r3, r3, #4
 8000e5a:	f200 4004 	addw	r0, r0, #1028	@ 0x404
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8000e5e:	4410      	add	r0, r2
 8000e60:	5a1a      	ldrh	r2, [r3, r0]
 8000e62:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8000e66:	521a      	strh	r2, [r3, r0]
 8000e68:	5a1a      	ldrh	r2, [r3, r0]
 8000e6a:	b292      	uxth	r2, r2
 8000e6c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000e70:	521a      	strh	r2, [r3, r0]
 8000e72:	e01b      	b.n	8000eac <HAL_PCD_IRQHandler+0x44c>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8000e74:	3206      	adds	r2, #6
 8000e76:	4413      	add	r3, r2
 8000e78:	f83e 9013 	ldrh.w	r9, [lr, r3, lsl #1]
 8000e7c:	f3c9 0909 	ubfx	r9, r9, #0, #10
              if (count != 0U)
 8000e80:	f1b9 0f00 	cmp.w	r9, #0
 8000e84:	d0aa      	beq.n	8000ddc <HAL_PCD_IRQHandler+0x37c>
 8000e86:	e781      	b.n	8000d8c <HAL_PCD_IRQHandler+0x32c>
        ep = &hpcd->OUT_ep[epindex];
 8000e88:	f501 71a8 	add.w	r1, r1, #336	@ 0x150
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000e8c:	6820      	ldr	r0, [r4, #0]
 8000e8e:	4421      	add	r1, r4
 8000e90:	f001 fb10 	bl	80024b4 <USB_EPStartXfer>
 8000e94:	e7bd      	b.n	8000e12 <HAL_PCD_IRQHandler+0x3b2>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8000e96:	2a01      	cmp	r2, #1
 8000e98:	d108      	bne.n	8000eac <HAL_PCD_IRQHandler+0x44c>
 8000e9a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8000e9e:	7c1b      	ldrb	r3, [r3, #16]
 8000ea0:	b292      	uxth	r2, r2
 8000ea2:	f200 4004 	addw	r0, r0, #1028	@ 0x404
 8000ea6:	011b      	lsls	r3, r3, #4
 8000ea8:	4410      	add	r0, r2
 8000eaa:	5219      	strh	r1, [r3, r0]
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000eac:	2328      	movs	r3, #40	@ 0x28
 8000eae:	fb03 4307 	mla	r3, r3, r7, r4
 8000eb2:	7c19      	ldrb	r1, [r3, #16]
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000eb4:	4620      	mov	r0, r4
 8000eb6:	f002 fb4c 	bl	8003552 <HAL_PCD_DataInStageCallback>
 8000eba:	e5de      	b.n	8000a7a <HAL_PCD_IRQHandler+0x1a>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8000ebc:	b93a      	cbnz	r2, 8000ece <HAL_PCD_IRQHandler+0x46e>
 8000ebe:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8000ec2:	7c1b      	ldrb	r3, [r3, #16]
 8000ec4:	b292      	uxth	r2, r2
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 8000ecc:	e7c7      	b.n	8000e5e <HAL_PCD_IRQHandler+0x3fe>
 8000ece:	2a01      	cmp	r2, #1
 8000ed0:	d1ec      	bne.n	8000eac <HAL_PCD_IRQHandler+0x44c>
 8000ed2:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8000ed6:	7c1b      	ldrb	r3, [r3, #16]
 8000ed8:	b292      	uxth	r2, r2
 8000eda:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 8000ede:	011b      	lsls	r3, r3, #4
 8000ee0:	4410      	add	r0, r2
 8000ee2:	f823 8000 	strh.w	r8, [r3, r0]
 8000ee6:	e7e1      	b.n	8000eac <HAL_PCD_IRQHandler+0x44c>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000ee8:	7c19      	ldrb	r1, [r3, #16]
          if ((wEPVal & USB_EP_KIND) == 0U)
 8000eea:	f418 7e80 	ands.w	lr, r8, #256	@ 0x100
            if (ep->xfer_len > TxPctSize)
 8000eee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000ef0:	ea4f 0ac1 	mov.w	sl, r1, lsl #3
 8000ef4:	f500 6980 	add.w	r9, r0, #1024	@ 0x400
          if ((wEPVal & USB_EP_KIND) == 0U)
 8000ef8:	d11b      	bne.n	8000f32 <HAL_PCD_IRQHandler+0x4d2>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000efa:	f8b0 7050 	ldrh.w	r7, [r0, #80]	@ 0x50
 8000efe:	b2bf      	uxth	r7, r7
 8000f00:	4457      	add	r7, sl
 8000f02:	3702      	adds	r7, #2
 8000f04:	f839 7017 	ldrh.w	r7, [r9, r7, lsl #1]
            if (ep->xfer_len > TxPctSize)
 8000f08:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8000f0c:	4297      	cmp	r7, r2
 8000f0e:	d302      	bcc.n	8000f16 <HAL_PCD_IRQHandler+0x4b6>
 8000f10:	f8c3 e028 	str.w	lr, [r3, #40]	@ 0x28
 8000f14:	e7ce      	b.n	8000eb4 <HAL_PCD_IRQHandler+0x454>
              ep->xfer_len -= TxPctSize;
 8000f16:	1bd2      	subs	r2, r2, r7
 8000f18:	629a      	str	r2, [r3, #40]	@ 0x28
              ep->xfer_buff += TxPctSize;
 8000f1a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
        ep = &hpcd->IN_ep[epindex];
 8000f1c:	f10c 0110 	add.w	r1, ip, #16
              ep->xfer_buff += TxPctSize;
 8000f20:	443a      	add	r2, r7
 8000f22:	625a      	str	r2, [r3, #36]	@ 0x24
              ep->xfer_count += TxPctSize;
 8000f24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000f26:	4421      	add	r1, r4
              ep->xfer_count += TxPctSize;
 8000f28:	443a      	add	r2, r7
 8000f2a:	62da      	str	r2, [r3, #44]	@ 0x2c
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000f2c:	f001 fac2 	bl	80024b4 <USB_EPStartXfer>
 8000f30:	e5a3      	b.n	8000a7a <HAL_PCD_IRQHandler+0x1a>

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000f32:	f8b0 c050 	ldrh.w	ip, [r0, #80]	@ 0x50
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8000f36:	f018 0e40 	ands.w	lr, r8, #64	@ 0x40
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000f3a:	fa1f fc8c 	uxth.w	ip, ip
 8000f3e:	44d4      	add	ip, sl
 8000f40:	f408 4880 	and.w	r8, r8, #16384	@ 0x4000
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8000f44:	f000 80f4 	beq.w	8001130 <HAL_PCD_IRQHandler+0x6d0>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000f48:	f10c 0c02 	add.w	ip, ip, #2
 8000f4c:	f839 c01c 	ldrh.w	ip, [r9, ip, lsl #1]
 8000f50:	fa1f f888 	uxth.w	r8, r8

    if (ep->xfer_len > TxPctSize)
 8000f54:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8000f58:	4594      	cmp	ip, r2
    {
      ep->xfer_len -= TxPctSize;
    }
    else
    {
      ep->xfer_len = 0U;
 8000f5a:	bf2c      	ite	cs
 8000f5c:	2200      	movcs	r2, #0
      ep->xfer_len -= TxPctSize;
 8000f5e:	eba2 020c 	subcc.w	r2, r2, ip
 8000f62:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8000f64:	2a00      	cmp	r2, #0
 8000f66:	d15b      	bne.n	8001020 <HAL_PCD_IRQHandler+0x5c0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8000f68:	2328      	movs	r3, #40	@ 0x28
 8000f6a:	fb03 4307 	mla	r3, r3, r7, r4
 8000f6e:	7c5b      	ldrb	r3, [r3, #17]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d141      	bne.n	8000ff8 <HAL_PCD_IRQHandler+0x598>
 8000f74:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8000f78:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 8000f7c:	b292      	uxth	r2, r2
 8000f7e:	010b      	lsls	r3, r1, #4
 8000f80:	4494      	add	ip, r2
 8000f82:	f83c 2003 	ldrh.w	r2, [ip, r3]
 8000f86:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8000f8a:	f82c 2003 	strh.w	r2, [ip, r3]
 8000f8e:	f83c 2003 	ldrh.w	r2, [ip, r3]
 8000f92:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8000f96:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8000f9a:	b292      	uxth	r2, r2
 8000f9c:	f82c 2003 	strh.w	r2, [ip, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8000fa0:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8000fa4:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 8000fa8:	b292      	uxth	r2, r2
 8000faa:	4410      	add	r0, r2
 8000fac:	5ac2      	ldrh	r2, [r0, r3]
 8000fae:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8000fb2:	52c2      	strh	r2, [r0, r3]
 8000fb4:	5ac2      	ldrh	r2, [r0, r3]
 8000fb6:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8000fba:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8000fbe:	b292      	uxth	r2, r2
 8000fc0:	52c2      	strh	r2, [r0, r3]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000fc2:	4620      	mov	r0, r4
 8000fc4:	f002 fac5 	bl	8003552 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8000fc8:	f1b8 0f00 	cmp.w	r8, #0
 8000fcc:	f000 80f4 	beq.w	80011b8 <HAL_PCD_IRQHandler+0x758>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8000fd0:	2328      	movs	r3, #40	@ 0x28
 8000fd2:	fb03 4307 	mla	r3, r3, r7, r4
 8000fd6:	6822      	ldr	r2, [r4, #0]
 8000fd8:	7c19      	ldrb	r1, [r3, #16]
 8000fda:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8000fde:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8000fe2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000fe6:	041b      	lsls	r3, r3, #16
 8000fe8:	0c1b      	lsrs	r3, r3, #16
 8000fea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000fee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ff2:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8000ff6:	e0df      	b.n	80011b8 <HAL_PCD_IRQHandler+0x758>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d1e2      	bne.n	8000fc2 <HAL_PCD_IRQHandler+0x562>
 8000ffc:	f8b0 e050 	ldrh.w	lr, [r0, #80]	@ 0x50
 8001000:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 8001004:	fa1f fe8e 	uxth.w	lr, lr
 8001008:	44f4      	add	ip, lr
 800100a:	010b      	lsls	r3, r1, #4
 800100c:	f82c 2003 	strh.w	r2, [ip, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001010:	f8b0 c050 	ldrh.w	ip, [r0, #80]	@ 0x50
 8001014:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 8001018:	fa1f fc8c 	uxth.w	ip, ip
 800101c:	4460      	add	r0, ip
 800101e:	e7cf      	b.n	8000fc0 <HAL_PCD_IRQHandler+0x560>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001020:	f1b8 0f00 	cmp.w	r8, #0
 8001024:	d00d      	beq.n	8001042 <HAL_PCD_IRQHandler+0x5e2>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001026:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 800102a:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 800102e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001032:	0412      	lsls	r2, r2, #16
 8001034:	0c12      	lsrs	r2, r2, #16
 8001036:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 800103a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800103e:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8001042:	f04f 0828 	mov.w	r8, #40	@ 0x28
 8001046:	fb08 4807 	mla	r8, r8, r7, r4
 800104a:	f898 2034 	ldrb.w	r2, [r8, #52]	@ 0x34
 800104e:	2a01      	cmp	r2, #1
 8001050:	f040 80b2 	bne.w	80011b8 <HAL_PCD_IRQHandler+0x758>
        ep->xfer_buff += TxPctSize;
 8001054:	f8d8 2024 	ldr.w	r2, [r8, #36]	@ 0x24
 8001058:	eb02 0e0c 	add.w	lr, r2, ip
 800105c:	f8c8 e024 	str.w	lr, [r8, #36]	@ 0x24
        ep->xfer_count += TxPctSize;
 8001060:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001062:	4462      	add	r2, ip
 8001064:	62da      	str	r2, [r3, #44]	@ 0x2c
        if (ep->xfer_len_db >= ep->maxpacket)
 8001066:	f8d8 3030 	ldr.w	r3, [r8, #48]	@ 0x30
 800106a:	f8d8 2020 	ldr.w	r2, [r8, #32]
 800106e:	4293      	cmp	r3, r2
 8001070:	d335      	bcc.n	80010de <HAL_PCD_IRQHandler+0x67e>
          ep->xfer_len_db -= len;
 8001072:	1a9b      	subs	r3, r3, r2
 8001074:	f8c8 3030 	str.w	r3, [r8, #48]	@ 0x30
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001078:	2328      	movs	r3, #40	@ 0x28
 800107a:	fb03 4307 	mla	r3, r3, r7, r4
 800107e:	f893 c011 	ldrb.w	ip, [r3, #17]
 8001082:	b293      	uxth	r3, r2
 8001084:	f1bc 0f00 	cmp.w	ip, #0
 8001088:	d145      	bne.n	8001116 <HAL_PCD_IRQHandler+0x6b6>
 800108a:	f8b0 8050 	ldrh.w	r8, [r0, #80]	@ 0x50
 800108e:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 8001092:	fa1f f888 	uxth.w	r8, r8
 8001096:	44c4      	add	ip, r8
 8001098:	0109      	lsls	r1, r1, #4
 800109a:	f83c 8001 	ldrh.w	r8, [ip, r1]
 800109e:	2a3e      	cmp	r2, #62	@ 0x3e
 80010a0:	f3c8 0809 	ubfx	r8, r8, #0, #10
 80010a4:	f82c 8001 	strh.w	r8, [ip, r1]
 80010a8:	d925      	bls.n	80010f6 <HAL_PCD_IRQHandler+0x696>
 80010aa:	ea4f 1852 	mov.w	r8, r2, lsr #5
 80010ae:	06d2      	lsls	r2, r2, #27
 80010b0:	f83c 2001 	ldrh.w	r2, [ip, r1]
 80010b4:	bf08      	it	eq
 80010b6:	f108 38ff 	addeq.w	r8, r8, #4294967295
 80010ba:	b292      	uxth	r2, r2
 80010bc:	ea42 2288 	orr.w	r2, r2, r8, lsl #10
 80010c0:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80010c4:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80010c8:	b292      	uxth	r2, r2
 80010ca:	f82c 2001 	strh.w	r2, [ip, r1]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80010ce:	2228      	movs	r2, #40	@ 0x28
 80010d0:	fb02 4207 	mla	r2, r2, r7, r4
 80010d4:	8b12      	ldrh	r2, [r2, #24]

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80010d6:	4671      	mov	r1, lr
 80010d8:	f001 f9dc 	bl	8002494 <USB_WritePMA>
 80010dc:	e06c      	b.n	80011b8 <HAL_PCD_IRQHandler+0x758>
        else if (ep->xfer_len_db == 0U)
 80010de:	b91b      	cbnz	r3, 80010e8 <HAL_PCD_IRQHandler+0x688>
    if (ep->xfer_len > TxPctSize)
 80010e0:	4662      	mov	r2, ip
          ep->xfer_fill_db = 0U;
 80010e2:	f888 3034 	strb.w	r3, [r8, #52]	@ 0x34
 80010e6:	e7c7      	b.n	8001078 <HAL_PCD_IRQHandler+0x618>
          ep->xfer_fill_db = 0U;
 80010e8:	2200      	movs	r2, #0
 80010ea:	f888 2034 	strb.w	r2, [r8, #52]	@ 0x34
          ep->xfer_len_db = 0U;
 80010ee:	f8c8 2030 	str.w	r2, [r8, #48]	@ 0x30
 80010f2:	461a      	mov	r2, r3
 80010f4:	e7c0      	b.n	8001078 <HAL_PCD_IRQHandler+0x618>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80010f6:	b912      	cbnz	r2, 80010fe <HAL_PCD_IRQHandler+0x69e>
 80010f8:	f83c 2001 	ldrh.w	r2, [ip, r1]
 80010fc:	e7e0      	b.n	80010c0 <HAL_PCD_IRQHandler+0x660>
 80010fe:	ea4f 0852 	mov.w	r8, r2, lsr #1
 8001102:	07d2      	lsls	r2, r2, #31
 8001104:	f83c 2001 	ldrh.w	r2, [ip, r1]
 8001108:	bf48      	it	mi
 800110a:	f108 0801 	addmi.w	r8, r8, #1
 800110e:	b292      	uxth	r2, r2
 8001110:	ea42 2288 	orr.w	r2, r2, r8, lsl #10
 8001114:	e7d8      	b.n	80010c8 <HAL_PCD_IRQHandler+0x668>
 8001116:	f1bc 0f01 	cmp.w	ip, #1
 800111a:	d1d8      	bne.n	80010ce <HAL_PCD_IRQHandler+0x66e>
 800111c:	f8b0 c050 	ldrh.w	ip, [r0, #80]	@ 0x50
 8001120:	f200 4204 	addw	r2, r0, #1028	@ 0x404
 8001124:	fa1f fc8c 	uxth.w	ip, ip
 8001128:	4462      	add	r2, ip
 800112a:	0109      	lsls	r1, r1, #4
 800112c:	5253      	strh	r3, [r2, r1]
 800112e:	e7ce      	b.n	80010ce <HAL_PCD_IRQHandler+0x66e>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001130:	f10c 0c06 	add.w	ip, ip, #6
 8001134:	f839 c01c 	ldrh.w	ip, [r9, ip, lsl #1]
 8001138:	fa1f f888 	uxth.w	r8, r8
    if (ep->xfer_len >= TxPctSize)
 800113c:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8001140:	4594      	cmp	ip, r2
      ep->xfer_len = 0U;
 8001142:	bf8c      	ite	hi
 8001144:	4672      	movhi	r2, lr
      ep->xfer_len -= TxPctSize;
 8001146:	eba2 020c 	subls.w	r2, r2, ip
 800114a:	629a      	str	r2, [r3, #40]	@ 0x28
    if (ep->xfer_len == 0U)
 800114c:	2a00      	cmp	r2, #0
 800114e:	d15d      	bne.n	800120c <HAL_PCD_IRQHandler+0x7ac>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001150:	2328      	movs	r3, #40	@ 0x28
 8001152:	fb03 4307 	mla	r3, r3, r7, r4
 8001156:	7c5b      	ldrb	r3, [r3, #17]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d143      	bne.n	80011e4 <HAL_PCD_IRQHandler+0x784>
 800115c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8001160:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 8001164:	b292      	uxth	r2, r2
 8001166:	010b      	lsls	r3, r1, #4
 8001168:	4494      	add	ip, r2
 800116a:	f83c 2003 	ldrh.w	r2, [ip, r3]
 800116e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001172:	f82c 2003 	strh.w	r2, [ip, r3]
 8001176:	f83c 2003 	ldrh.w	r2, [ip, r3]
 800117a:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800117e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8001182:	b292      	uxth	r2, r2
 8001184:	f82c 2003 	strh.w	r2, [ip, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001188:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 800118c:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 8001190:	b292      	uxth	r2, r2
 8001192:	4410      	add	r0, r2
 8001194:	5ac2      	ldrh	r2, [r0, r3]
 8001196:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800119a:	52c2      	strh	r2, [r0, r3]
 800119c:	5ac2      	ldrh	r2, [r0, r3]
 800119e:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80011a2:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80011a6:	b292      	uxth	r2, r2
 80011a8:	52c2      	strh	r2, [r0, r3]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80011aa:	4620      	mov	r0, r4
 80011ac:	f002 f9d1 	bl	8003552 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80011b0:	f1b8 0f00 	cmp.w	r8, #0
 80011b4:	f43f af0c 	beq.w	8000fd0 <HAL_PCD_IRQHandler+0x570>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80011b8:	2328      	movs	r3, #40	@ 0x28
 80011ba:	fb03 4307 	mla	r3, r3, r7, r4
 80011be:	6822      	ldr	r2, [r4, #0]
 80011c0:	7c19      	ldrb	r1, [r3, #16]
 80011c2:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80011c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80011ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80011ce:	041b      	lsls	r3, r3, #16
 80011d0:	0c1b      	lsrs	r3, r3, #16
 80011d2:	f083 0330 	eor.w	r3, r3, #48	@ 0x30
 80011d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80011da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011de:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 80011e2:	e44a      	b.n	8000a7a <HAL_PCD_IRQHandler+0x1a>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d1e0      	bne.n	80011aa <HAL_PCD_IRQHandler+0x74a>
 80011e8:	f8b0 e050 	ldrh.w	lr, [r0, #80]	@ 0x50
 80011ec:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 80011f0:	fa1f fe8e 	uxth.w	lr, lr
 80011f4:	44f4      	add	ip, lr
 80011f6:	010b      	lsls	r3, r1, #4
 80011f8:	f82c 2003 	strh.w	r2, [ip, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80011fc:	f8b0 c050 	ldrh.w	ip, [r0, #80]	@ 0x50
 8001200:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 8001204:	fa1f fc8c 	uxth.w	ip, ip
 8001208:	4460      	add	r0, ip
 800120a:	e7cd      	b.n	80011a8 <HAL_PCD_IRQHandler+0x748>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800120c:	f1b8 0f00 	cmp.w	r8, #0
 8001210:	d10d      	bne.n	800122e <HAL_PCD_IRQHandler+0x7ce>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001212:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 8001216:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 800121a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800121e:	0412      	lsls	r2, r2, #16
 8001220:	0c12      	lsrs	r2, r2, #16
 8001222:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8001226:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800122a:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 800122e:	f04f 0828 	mov.w	r8, #40	@ 0x28
 8001232:	fb08 4807 	mla	r8, r8, r7, r4
 8001236:	f898 2034 	ldrb.w	r2, [r8, #52]	@ 0x34
 800123a:	2a01      	cmp	r2, #1
 800123c:	d1bc      	bne.n	80011b8 <HAL_PCD_IRQHandler+0x758>
        ep->xfer_buff += TxPctSize;
 800123e:	f8d8 2024 	ldr.w	r2, [r8, #36]	@ 0x24
 8001242:	eb02 0e0c 	add.w	lr, r2, ip
 8001246:	f8c8 e024 	str.w	lr, [r8, #36]	@ 0x24
        ep->xfer_count += TxPctSize;
 800124a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800124c:	4462      	add	r2, ip
 800124e:	62da      	str	r2, [r3, #44]	@ 0x2c
        if (ep->xfer_len_db >= ep->maxpacket)
 8001250:	f8d8 3030 	ldr.w	r3, [r8, #48]	@ 0x30
 8001254:	f8d8 2020 	ldr.w	r2, [r8, #32]
 8001258:	4293      	cmp	r3, r2
 800125a:	d332      	bcc.n	80012c2 <HAL_PCD_IRQHandler+0x862>
          ep->xfer_len_db -= len;
 800125c:	1a9b      	subs	r3, r3, r2
 800125e:	f8c8 3030 	str.w	r3, [r8, #48]	@ 0x30
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001262:	2328      	movs	r3, #40	@ 0x28
 8001264:	fb03 4307 	mla	r3, r3, r7, r4
 8001268:	f893 c011 	ldrb.w	ip, [r3, #17]
 800126c:	b293      	uxth	r3, r2
 800126e:	f1bc 0f00 	cmp.w	ip, #0
 8001272:	d142      	bne.n	80012fa <HAL_PCD_IRQHandler+0x89a>
 8001274:	f8b0 8050 	ldrh.w	r8, [r0, #80]	@ 0x50
 8001278:	f200 4c0c 	addw	ip, r0, #1036	@ 0x40c
 800127c:	fa1f f888 	uxth.w	r8, r8
 8001280:	44c4      	add	ip, r8
 8001282:	0109      	lsls	r1, r1, #4
 8001284:	f83c 8001 	ldrh.w	r8, [ip, r1]
 8001288:	2a3e      	cmp	r2, #62	@ 0x3e
 800128a:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800128e:	f82c 8001 	strh.w	r8, [ip, r1]
 8001292:	d922      	bls.n	80012da <HAL_PCD_IRQHandler+0x87a>
 8001294:	ea4f 1852 	mov.w	r8, r2, lsr #5
 8001298:	06d2      	lsls	r2, r2, #27
 800129a:	f83c 2001 	ldrh.w	r2, [ip, r1]
 800129e:	bf08      	it	eq
 80012a0:	f108 38ff 	addeq.w	r8, r8, #4294967295
 80012a4:	b292      	uxth	r2, r2
 80012a6:	ea42 2288 	orr.w	r2, r2, r8, lsl #10
 80012aa:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80012ae:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80012b2:	b292      	uxth	r2, r2
 80012b4:	f82c 2001 	strh.w	r2, [ip, r1]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80012b8:	2228      	movs	r2, #40	@ 0x28
 80012ba:	fb02 4207 	mla	r2, r2, r7, r4
 80012be:	8b52      	ldrh	r2, [r2, #26]
 80012c0:	e709      	b.n	80010d6 <HAL_PCD_IRQHandler+0x676>
        else if (ep->xfer_len_db == 0U)
 80012c2:	b91b      	cbnz	r3, 80012cc <HAL_PCD_IRQHandler+0x86c>
    if (ep->xfer_len >= TxPctSize)
 80012c4:	4662      	mov	r2, ip
          ep->xfer_fill_db = 0U;
 80012c6:	f888 3034 	strb.w	r3, [r8, #52]	@ 0x34
 80012ca:	e7ca      	b.n	8001262 <HAL_PCD_IRQHandler+0x802>
          ep->xfer_len_db = 0U;
 80012cc:	2200      	movs	r2, #0
 80012ce:	f8c8 2030 	str.w	r2, [r8, #48]	@ 0x30
          ep->xfer_fill_db = 0;
 80012d2:	f888 2034 	strb.w	r2, [r8, #52]	@ 0x34
 80012d6:	461a      	mov	r2, r3
 80012d8:	e7c3      	b.n	8001262 <HAL_PCD_IRQHandler+0x802>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80012da:	b912      	cbnz	r2, 80012e2 <HAL_PCD_IRQHandler+0x882>
 80012dc:	f83c 2001 	ldrh.w	r2, [ip, r1]
 80012e0:	e7e3      	b.n	80012aa <HAL_PCD_IRQHandler+0x84a>
 80012e2:	ea4f 0852 	mov.w	r8, r2, lsr #1
 80012e6:	07d2      	lsls	r2, r2, #31
 80012e8:	f83c 2001 	ldrh.w	r2, [ip, r1]
 80012ec:	bf48      	it	mi
 80012ee:	f108 0801 	addmi.w	r8, r8, #1
 80012f2:	b292      	uxth	r2, r2
 80012f4:	ea42 2288 	orr.w	r2, r2, r8, lsl #10
 80012f8:	e7db      	b.n	80012b2 <HAL_PCD_IRQHandler+0x852>
 80012fa:	f1bc 0f01 	cmp.w	ip, #1
 80012fe:	d1db      	bne.n	80012b8 <HAL_PCD_IRQHandler+0x858>
 8001300:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8001304:	f200 4c0c 	addw	ip, r0, #1036	@ 0x40c
 8001308:	b292      	uxth	r2, r2
 800130a:	4494      	add	ip, r2
 800130c:	010a      	lsls	r2, r1, #4
 800130e:	f82c 3002 	strh.w	r3, [ip, r2]
 8001312:	e7d1      	b.n	80012b8 <HAL_PCD_IRQHandler+0x858>
  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001314:	0546      	lsls	r6, r0, #21
 8001316:	d512      	bpl.n	800133e <HAL_PCD_IRQHandler+0x8de>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001318:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 800131a:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800131c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8001320:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001324:	041b      	lsls	r3, r3, #16
 8001326:	0c1b      	lsrs	r3, r3, #16
 8001328:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    HAL_PCD_ResetCallback(hpcd);
 800132c:	f002 f91d 	bl	800356a <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001330:	4629      	mov	r1, r5
 8001332:	4620      	mov	r0, r4
}
 8001334:	b005      	add	sp, #20
 8001336:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800133a:	f7ff bb7d 	b.w	8000a38 <HAL_PCD_SetAddress>
  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800133e:	0441      	lsls	r1, r0, #17
 8001340:	d50a      	bpl.n	8001358 <HAL_PCD_IRQHandler+0x8f8>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001342:	6822      	ldr	r2, [r4, #0]
 8001344:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8001348:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800134c:	041b      	lsls	r3, r3, #16
 800134e:	0c1b      	lsrs	r3, r3, #16
 8001350:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    return;
 8001354:	f7ff bb96 	b.w	8000a84 <HAL_PCD_IRQHandler+0x24>
  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001358:	0482      	lsls	r2, r0, #18
 800135a:	d505      	bpl.n	8001368 <HAL_PCD_IRQHandler+0x908>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800135c:	6822      	ldr	r2, [r4, #0]
 800135e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8001362:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001366:	e7f1      	b.n	800134c <HAL_PCD_IRQHandler+0x8ec>
  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001368:	04c3      	lsls	r3, r0, #19
 800136a:	d519      	bpl.n	80013a0 <HAL_PCD_IRQHandler+0x940>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800136c:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 800136e:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001370:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 8001374:	f023 0304 	bic.w	r3, r3, #4
 8001378:	041b      	lsls	r3, r3, #16
 800137a:	0c1b      	lsrs	r3, r3, #16
 800137c:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001380:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 8001384:	f023 0308 	bic.w	r3, r3, #8
 8001388:	041b      	lsls	r3, r3, #16
 800138a:	0c1b      	lsrs	r3, r3, #16
 800138c:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8001390:	f002 f90e 	bl	80035b0 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001394:	6822      	ldr	r2, [r4, #0]
 8001396:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 800139a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800139e:	e7d5      	b.n	800134c <HAL_PCD_IRQHandler+0x8ec>
  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80013a0:	0507      	lsls	r7, r0, #20
 80013a2:	d548      	bpl.n	8001436 <HAL_PCD_IRQHandler+0x9d6>
 80013a4:	4668      	mov	r0, sp
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80013a6:	6823      	ldr	r3, [r4, #0]
 80013a8:	4606      	mov	r6, r0
 80013aa:	4619      	mov	r1, r3
 80013ac:	461a      	mov	r2, r3
 80013ae:	f103 0520 	add.w	r5, r3, #32
 80013b2:	f832 7b04 	ldrh.w	r7, [r2], #4
    for (i = 0U; i < 8U; i++)
 80013b6:	4295      	cmp	r5, r2
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80013b8:	f826 7b02 	strh.w	r7, [r6], #2
    for (i = 0U; i < 8U; i++)
 80013bc:	d1f9      	bne.n	80013b2 <HAL_PCD_IRQHandler+0x952>
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80013be:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 80013c2:	b292      	uxth	r2, r2
 80013c4:	f042 0201 	orr.w	r2, r2, #1
 80013c8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80013cc:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 80013d0:	f022 0201 	bic.w	r2, r2, #1
 80013d4:	0412      	lsls	r2, r2, #16
 80013d6:	0c12      	lsrs	r2, r2, #16
 80013d8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80013dc:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 80013e0:	0556      	lsls	r6, r2, #21
 80013e2:	d5fb      	bpl.n	80013dc <HAL_PCD_IRQHandler+0x97c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80013e4:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 80013e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80013ec:	0412      	lsls	r2, r2, #16
 80013ee:	0c12      	lsrs	r2, r2, #16
 80013f0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80013f4:	f830 2b02 	ldrh.w	r2, [r0], #2
 80013f8:	f821 2b04 	strh.w	r2, [r1], #4
    for (i = 0U; i < 8U; i++)
 80013fc:	428d      	cmp	r5, r1
 80013fe:	d1f9      	bne.n	80013f4 <HAL_PCD_IRQHandler+0x994>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001400:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8001404:	4620      	mov	r0, r4
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001406:	b292      	uxth	r2, r2
 8001408:	f042 0208 	orr.w	r2, r2, #8
 800140c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001410:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 8001414:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001418:	0412      	lsls	r2, r2, #16
 800141a:	0c12      	lsrs	r2, r2, #16
 800141c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001420:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 8001424:	b292      	uxth	r2, r2
 8001426:	f042 0204 	orr.w	r2, r2, #4
 800142a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    HAL_PCD_SuspendCallback(hpcd);
 800142e:	f002 f8af 	bl	8003590 <HAL_PCD_SuspendCallback>
    return;
 8001432:	f7ff bb27 	b.w	8000a84 <HAL_PCD_IRQHandler+0x24>
  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001436:	0582      	lsls	r2, r0, #22
 8001438:	d50d      	bpl.n	8001456 <HAL_PCD_IRQHandler+0x9f6>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800143a:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 800143c:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800143e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8001442:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001446:	041b      	lsls	r3, r3, #16
 8001448:	0c1b      	lsrs	r3, r3, #16
 800144a:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    HAL_PCD_SOFCallback(hpcd);
 800144e:	f002 f888 	bl	8003562 <HAL_PCD_SOFCallback>
    return;
 8001452:	f7ff bb17 	b.w	8000a84 <HAL_PCD_IRQHandler+0x24>
  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001456:	05c3      	lsls	r3, r0, #23
 8001458:	f57f ab14 	bpl.w	8000a84 <HAL_PCD_IRQHandler+0x24>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800145c:	6822      	ldr	r2, [r4, #0]
 800145e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8001462:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001466:	e771      	b.n	800134c <HAL_PCD_IRQHandler+0x8ec>

08001468 <HAL_PCD_EP_Open>:
{
 8001468:	b570      	push	{r4, r5, r6, lr}
 800146a:	2428      	movs	r4, #40	@ 0x28
 800146c:	4605      	mov	r5, r0
 800146e:	f001 0007 	and.w	r0, r1, #7
 8001472:	4344      	muls	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 8001474:	f011 0f80 	tst.w	r1, #128	@ 0x80
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001478:	bf14      	ite	ne
 800147a:	f104 0110 	addne.w	r1, r4, #16
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800147e:	f504 71a8 	addeq.w	r1, r4, #336	@ 0x150
 8001482:	eb05 0604 	add.w	r6, r5, r4
    ep->is_in = 1U;
 8001486:	bf15      	itete	ne
 8001488:	2401      	movne	r4, #1
    ep->is_in = 0U;
 800148a:	2400      	moveq	r4, #0
    ep->is_in = 1U;
 800148c:	7474      	strbne	r4, [r6, #17]
    ep->is_in = 0U;
 800148e:	f886 4151 	strbeq.w	r4, [r6, #337]	@ 0x151
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001492:	bf14      	ite	ne
 8001494:	1949      	addne	r1, r1, r5
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001496:	1949      	addeq	r1, r1, r5
  if (ep_type == EP_TYPE_BULK)
 8001498:	2b02      	cmp	r3, #2
  ep->type = ep_type;
 800149a:	70cb      	strb	r3, [r1, #3]
    ep->data_pid_start = 0U;
 800149c:	bf08      	it	eq
 800149e:	2300      	moveq	r3, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 80014a0:	7008      	strb	r0, [r1, #0]
    ep->data_pid_start = 0U;
 80014a2:	bf08      	it	eq
 80014a4:	710b      	strbeq	r3, [r1, #4]
  ep->maxpacket = ep_mps;
 80014a6:	610a      	str	r2, [r1, #16]
  __HAL_LOCK(hpcd);
 80014a8:	f895 3290 	ldrb.w	r3, [r5, #656]	@ 0x290
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d009      	beq.n	80014c4 <HAL_PCD_EP_Open+0x5c>
 80014b0:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80014b2:	6828      	ldr	r0, [r5, #0]
  __HAL_LOCK(hpcd);
 80014b4:	f885 3290 	strb.w	r3, [r5, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80014b8:	f000 fd40 	bl	8001f3c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80014bc:	2000      	movs	r0, #0
 80014be:	f885 0290 	strb.w	r0, [r5, #656]	@ 0x290
}
 80014c2:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 80014c4:	2002      	movs	r0, #2
 80014c6:	e7fc      	b.n	80014c2 <HAL_PCD_EP_Open+0x5a>

080014c8 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 80014c8:	2328      	movs	r3, #40	@ 0x28
 80014ca:	f001 0207 	and.w	r2, r1, #7
 80014ce:	4353      	muls	r3, r2
 80014d0:	f011 0f80 	tst.w	r1, #128	@ 0x80
{
 80014d4:	b510      	push	{r4, lr}
 80014d6:	4604      	mov	r4, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80014d8:	bf18      	it	ne
 80014da:	f103 0110 	addne.w	r1, r3, #16
 80014de:	4418      	add	r0, r3
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80014e0:	bf0b      	itete	eq
 80014e2:	f503 71a8 	addeq.w	r1, r3, #336	@ 0x150
    ep->is_in = 1U;
 80014e6:	2301      	movne	r3, #1
    ep->is_in = 0U;
 80014e8:	2300      	moveq	r3, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80014ea:	1909      	addne	r1, r1, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80014ec:	bf0a      	itet	eq
 80014ee:	1909      	addeq	r1, r1, r4
    ep->is_in = 1U;
 80014f0:	7443      	strbne	r3, [r0, #17]
    ep->is_in = 0U;
 80014f2:	f880 3151 	strbeq.w	r3, [r0, #337]	@ 0x151
  ep->num = ep_addr & EP_ADDR_MSK;
 80014f6:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 80014f8:	f894 3290 	ldrb.w	r3, [r4, #656]	@ 0x290
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d009      	beq.n	8001514 <HAL_PCD_EP_Close+0x4c>
 8001500:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001502:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8001504:	f884 3290 	strb.w	r3, [r4, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001508:	f000 fe78 	bl	80021fc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800150c:	2000      	movs	r0, #0
 800150e:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290
}
 8001512:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8001514:	2002      	movs	r0, #2
 8001516:	e7fc      	b.n	8001512 <HAL_PCD_EP_Close+0x4a>

08001518 <HAL_PCD_EP_Receive>:
{
 8001518:	b570      	push	{r4, r5, r6, lr}
  ep->xfer_buff = pBuf;
 800151a:	2428      	movs	r4, #40	@ 0x28
  ep->xfer_count = 0U;
 800151c:	2600      	movs	r6, #0
 800151e:	f001 0107 	and.w	r1, r1, #7
  ep->xfer_buff = pBuf;
 8001522:	434c      	muls	r4, r1
 8001524:	1905      	adds	r5, r0, r4
  ep->num = ep_addr & EP_ADDR_MSK;
 8001526:	f885 1150 	strb.w	r1, [r5, #336]	@ 0x150
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800152a:	f504 71a8 	add.w	r1, r4, #336	@ 0x150
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800152e:	4401      	add	r1, r0
  ep->xfer_len = len;
 8001530:	e9c5 2359 	strd	r2, r3, [r5, #356]	@ 0x164
  ep->xfer_count = 0U;
 8001534:	f8c5 616c 	str.w	r6, [r5, #364]	@ 0x16c
  ep->is_in = 0U;
 8001538:	f885 6151 	strb.w	r6, [r5, #337]	@ 0x151
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800153c:	6800      	ldr	r0, [r0, #0]
 800153e:	f000 ffb9 	bl	80024b4 <USB_EPStartXfer>
}
 8001542:	4630      	mov	r0, r6
 8001544:	bd70      	pop	{r4, r5, r6, pc}

08001546 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001546:	2328      	movs	r3, #40	@ 0x28
 8001548:	f001 0107 	and.w	r1, r1, #7
 800154c:	fb03 0001 	mla	r0, r3, r1, r0
}
 8001550:	f8d0 016c 	ldr.w	r0, [r0, #364]	@ 0x16c
 8001554:	4770      	bx	lr

08001556 <HAL_PCD_EP_Transmit>:
{
 8001556:	b570      	push	{r4, r5, r6, lr}
 8001558:	2528      	movs	r5, #40	@ 0x28
 800155a:	f001 0107 	and.w	r1, r1, #7
 800155e:	434d      	muls	r5, r1
  ep->xfer_buff = pBuf;
 8001560:	1944      	adds	r4, r0, r5
  ep->xfer_count = 0U;
 8001562:	2600      	movs	r6, #0
  ep->xfer_len = len;
 8001564:	e9c4 2309 	strd	r2, r3, [r4, #36]	@ 0x24
  ep->xfer_fill_db = 1U;
 8001568:	2201      	movs	r2, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800156a:	7421      	strb	r1, [r4, #16]
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800156c:	f105 0110 	add.w	r1, r5, #16
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001570:	4401      	add	r1, r0
  ep->xfer_fill_db = 1U;
 8001572:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
  ep->xfer_len_db = len;
 8001576:	6323      	str	r3, [r4, #48]	@ 0x30
  ep->xfer_count = 0U;
 8001578:	62e6      	str	r6, [r4, #44]	@ 0x2c
  ep->is_in = 1U;
 800157a:	7462      	strb	r2, [r4, #17]
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800157c:	6800      	ldr	r0, [r0, #0]
 800157e:	f000 ff99 	bl	80024b4 <USB_EPStartXfer>
}
 8001582:	4630      	mov	r0, r6
 8001584:	bd70      	pop	{r4, r5, r6, pc}

08001586 <HAL_PCD_EP_SetStall>:
{
 8001586:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001588:	7903      	ldrb	r3, [r0, #4]
 800158a:	f001 0507 	and.w	r5, r1, #7
 800158e:	42ab      	cmp	r3, r5
{
 8001590:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001592:	d32a      	bcc.n	80015ea <HAL_PCD_EP_SetStall+0x64>
  if ((0x80U & ep_addr) == 0x80U)
 8001594:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8001598:	f04f 0328 	mov.w	r3, #40	@ 0x28
 800159c:	d01c      	beq.n	80015d8 <HAL_PCD_EP_SetStall+0x52>
    ep->is_in = 1U;
 800159e:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015a0:	436b      	muls	r3, r5
 80015a2:	f103 0110 	add.w	r1, r3, #16
    ep->is_in = 1U;
 80015a6:	4403      	add	r3, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015a8:	4401      	add	r1, r0
    ep->is_in = 1U;
 80015aa:	745a      	strb	r2, [r3, #17]
  ep->is_stall = 1U;
 80015ac:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 80015ae:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 80015b0:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 80015b2:	f894 2290 	ldrb.w	r2, [r4, #656]	@ 0x290
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d019      	beq.n	80015ee <HAL_PCD_EP_SetStall+0x68>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80015ba:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80015bc:	f884 3290 	strb.w	r3, [r4, #656]	@ 0x290
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80015c0:	f000 feef 	bl	80023a2 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80015c4:	b925      	cbnz	r5, 80015d0 <HAL_PCD_EP_SetStall+0x4a>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80015c6:	6820      	ldr	r0, [r4, #0]
 80015c8:	f504 7126 	add.w	r1, r4, #664	@ 0x298
 80015cc:	f000 ff60 	bl	8002490 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 80015d0:	2000      	movs	r0, #0
 80015d2:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290
}
 80015d6:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 0U;
 80015d8:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 80015da:	434b      	muls	r3, r1
 80015dc:	f503 71a8 	add.w	r1, r3, #336	@ 0x150
    ep->is_in = 0U;
 80015e0:	4403      	add	r3, r0
    ep = &hpcd->OUT_ep[ep_addr];
 80015e2:	4401      	add	r1, r0
    ep->is_in = 0U;
 80015e4:	f883 2151 	strb.w	r2, [r3, #337]	@ 0x151
 80015e8:	e7e0      	b.n	80015ac <HAL_PCD_EP_SetStall+0x26>
    return HAL_ERROR;
 80015ea:	2001      	movs	r0, #1
 80015ec:	e7f3      	b.n	80015d6 <HAL_PCD_EP_SetStall+0x50>
  __HAL_LOCK(hpcd);
 80015ee:	2002      	movs	r0, #2
 80015f0:	e7f1      	b.n	80015d6 <HAL_PCD_EP_SetStall+0x50>

080015f2 <HAL_PCD_EP_ClrStall>:
{
 80015f2:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80015f4:	7902      	ldrb	r2, [r0, #4]
 80015f6:	f001 030f 	and.w	r3, r1, #15
 80015fa:	429a      	cmp	r2, r3
{
 80015fc:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80015fe:	d326      	bcc.n	800164e <HAL_PCD_EP_ClrStall+0x5c>
  if ((0x80U & ep_addr) == 0x80U)
 8001600:	2328      	movs	r3, #40	@ 0x28
 8001602:	f001 0207 	and.w	r2, r1, #7
 8001606:	4353      	muls	r3, r2
 8001608:	f011 0f80 	tst.w	r1, #128	@ 0x80
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800160c:	bf14      	ite	ne
 800160e:	f103 0110 	addne.w	r1, r3, #16
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001612:	f503 71a8 	addeq.w	r1, r3, #336	@ 0x150
 8001616:	4418      	add	r0, r3
  ep->is_stall = 0U;
 8001618:	f04f 0500 	mov.w	r5, #0
    ep->is_in = 1U;
 800161c:	bf15      	itete	ne
 800161e:	2301      	movne	r3, #1
    ep->is_in = 0U;
 8001620:	2300      	moveq	r3, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001622:	1909      	addne	r1, r1, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001624:	1909      	addeq	r1, r1, r4
    ep->is_in = 1U;
 8001626:	bf14      	ite	ne
 8001628:	7443      	strbne	r3, [r0, #17]
    ep->is_in = 0U;
 800162a:	f880 3151 	strbeq.w	r3, [r0, #337]	@ 0x151
  ep->is_stall = 0U;
 800162e:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001630:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8001632:	f894 3290 	ldrb.w	r3, [r4, #656]	@ 0x290
 8001636:	2b01      	cmp	r3, #1
 8001638:	d00b      	beq.n	8001652 <HAL_PCD_EP_ClrStall+0x60>
 800163a:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800163c:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800163e:	f884 3290 	strb.w	r3, [r4, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001642:	f000 fece 	bl	80023e2 <USB_EPClearStall>
  return HAL_OK;
 8001646:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 8001648:	f884 5290 	strb.w	r5, [r4, #656]	@ 0x290
}
 800164c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800164e:	2001      	movs	r0, #1
 8001650:	e7fc      	b.n	800164c <HAL_PCD_EP_ClrStall+0x5a>
  __HAL_LOCK(hpcd);
 8001652:	2002      	movs	r0, #2
 8001654:	e7fa      	b.n	800164c <HAL_PCD_EP_ClrStall+0x5a>

08001656 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8001656:	b510      	push	{r4, lr}
 8001658:	2428      	movs	r4, #40	@ 0x28
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800165a:	f011 0f80 	tst.w	r1, #128	@ 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800165e:	bf1b      	ittet	ne
 8001660:	f001 0107 	andne.w	r1, r1, #7
 8001664:	fb04 0001 	mlane	r0, r4, r1, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001668:	fb04 0001 	mlaeq	r0, r4, r1, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800166c:	3010      	addne	r0, #16
    ep = &hpcd->OUT_ep[ep_addr];
 800166e:	bf08      	it	eq
 8001670:	f500 70a8 	addeq.w	r0, r0, #336	@ 0x150
  if (ep_kind == PCD_SNG_BUF)
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8001674:	b299      	uxth	r1, r3
  if (ep_kind == PCD_SNG_BUF)
 8001676:	b91a      	cbnz	r2, 8001680 <HAL_PCDEx_PMAConfig+0x2a>
    ep->doublebuffer = 0U;
 8001678:	7302      	strb	r2, [r0, #12]
    ep->pmaadress = (uint16_t)pmaadress;
 800167a:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 800167c:	2000      	movs	r0, #0
 800167e:	bd10      	pop	{r4, pc}
    ep->doublebuffer = 1U;
 8001680:	2201      	movs	r2, #1
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8001682:	6083      	str	r3, [r0, #8]
    ep->doublebuffer = 1U;
 8001684:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8001686:	e7f9      	b.n	800167c <HAL_PCDEx_PMAConfig+0x26>

08001688 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001688:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800168c:	4605      	mov	r5, r0
 800168e:	b338      	cbz	r0, 80016e0 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001690:	6803      	ldr	r3, [r0, #0]
 8001692:	07db      	lsls	r3, r3, #31
 8001694:	d410      	bmi.n	80016b8 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001696:	682b      	ldr	r3, [r5, #0]
 8001698:	079f      	lsls	r7, r3, #30
 800169a:	d45e      	bmi.n	800175a <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800169c:	682b      	ldr	r3, [r5, #0]
 800169e:	0719      	lsls	r1, r3, #28
 80016a0:	f100 8095 	bmi.w	80017ce <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016a4:	682b      	ldr	r3, [r5, #0]
 80016a6:	075a      	lsls	r2, r3, #29
 80016a8:	f100 80c1 	bmi.w	800182e <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016ac:	69eb      	ldr	r3, [r5, #28]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	f040 812c 	bne.w	800190c <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 80016b4:	2000      	movs	r0, #0
 80016b6:	e029      	b.n	800170c <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016b8:	4c90      	ldr	r4, [pc, #576]	@ (80018fc <HAL_RCC_OscConfig+0x274>)
 80016ba:	6863      	ldr	r3, [r4, #4]
 80016bc:	f003 030c 	and.w	r3, r3, #12
 80016c0:	2b04      	cmp	r3, #4
 80016c2:	d007      	beq.n	80016d4 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016c4:	6863      	ldr	r3, [r4, #4]
 80016c6:	f003 030c 	and.w	r3, r3, #12
 80016ca:	2b08      	cmp	r3, #8
 80016cc:	d10a      	bne.n	80016e4 <HAL_RCC_OscConfig+0x5c>
 80016ce:	6863      	ldr	r3, [r4, #4]
 80016d0:	03de      	lsls	r6, r3, #15
 80016d2:	d507      	bpl.n	80016e4 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016d4:	6823      	ldr	r3, [r4, #0]
 80016d6:	039c      	lsls	r4, r3, #14
 80016d8:	d5dd      	bpl.n	8001696 <HAL_RCC_OscConfig+0xe>
 80016da:	686b      	ldr	r3, [r5, #4]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d1da      	bne.n	8001696 <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 80016e0:	2001      	movs	r0, #1
 80016e2:	e013      	b.n	800170c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016e4:	686b      	ldr	r3, [r5, #4]
 80016e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016ea:	d112      	bne.n	8001712 <HAL_RCC_OscConfig+0x8a>
 80016ec:	6823      	ldr	r3, [r4, #0]
 80016ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016f2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80016f4:	f7fe ffb2 	bl	800065c <HAL_GetTick>
 80016f8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016fa:	6823      	ldr	r3, [r4, #0]
 80016fc:	0398      	lsls	r0, r3, #14
 80016fe:	d4ca      	bmi.n	8001696 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001700:	f7fe ffac 	bl	800065c <HAL_GetTick>
 8001704:	1b80      	subs	r0, r0, r6
 8001706:	2864      	cmp	r0, #100	@ 0x64
 8001708:	d9f7      	bls.n	80016fa <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 800170a:	2003      	movs	r0, #3
}
 800170c:	b002      	add	sp, #8
 800170e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001712:	b99b      	cbnz	r3, 800173c <HAL_RCC_OscConfig+0xb4>
 8001714:	6823      	ldr	r3, [r4, #0]
 8001716:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800171a:	6023      	str	r3, [r4, #0]
 800171c:	6823      	ldr	r3, [r4, #0]
 800171e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001722:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001724:	f7fe ff9a 	bl	800065c <HAL_GetTick>
 8001728:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800172a:	6823      	ldr	r3, [r4, #0]
 800172c:	0399      	lsls	r1, r3, #14
 800172e:	d5b2      	bpl.n	8001696 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001730:	f7fe ff94 	bl	800065c <HAL_GetTick>
 8001734:	1b80      	subs	r0, r0, r6
 8001736:	2864      	cmp	r0, #100	@ 0x64
 8001738:	d9f7      	bls.n	800172a <HAL_RCC_OscConfig+0xa2>
 800173a:	e7e6      	b.n	800170a <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800173c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001740:	6823      	ldr	r3, [r4, #0]
 8001742:	d103      	bne.n	800174c <HAL_RCC_OscConfig+0xc4>
 8001744:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001748:	6023      	str	r3, [r4, #0]
 800174a:	e7cf      	b.n	80016ec <HAL_RCC_OscConfig+0x64>
 800174c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001750:	6023      	str	r3, [r4, #0]
 8001752:	6823      	ldr	r3, [r4, #0]
 8001754:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001758:	e7cb      	b.n	80016f2 <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800175a:	4c68      	ldr	r4, [pc, #416]	@ (80018fc <HAL_RCC_OscConfig+0x274>)
 800175c:	6863      	ldr	r3, [r4, #4]
 800175e:	f013 0f0c 	tst.w	r3, #12
 8001762:	d007      	beq.n	8001774 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001764:	6863      	ldr	r3, [r4, #4]
 8001766:	f003 030c 	and.w	r3, r3, #12
 800176a:	2b08      	cmp	r3, #8
 800176c:	d110      	bne.n	8001790 <HAL_RCC_OscConfig+0x108>
 800176e:	6863      	ldr	r3, [r4, #4]
 8001770:	03da      	lsls	r2, r3, #15
 8001772:	d40d      	bmi.n	8001790 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001774:	6823      	ldr	r3, [r4, #0]
 8001776:	079b      	lsls	r3, r3, #30
 8001778:	d502      	bpl.n	8001780 <HAL_RCC_OscConfig+0xf8>
 800177a:	692b      	ldr	r3, [r5, #16]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d1af      	bne.n	80016e0 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001780:	6823      	ldr	r3, [r4, #0]
 8001782:	696a      	ldr	r2, [r5, #20]
 8001784:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001788:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800178c:	6023      	str	r3, [r4, #0]
 800178e:	e785      	b.n	800169c <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001790:	692a      	ldr	r2, [r5, #16]
 8001792:	4b5b      	ldr	r3, [pc, #364]	@ (8001900 <HAL_RCC_OscConfig+0x278>)
 8001794:	b16a      	cbz	r2, 80017b2 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 8001796:	2201      	movs	r2, #1
 8001798:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800179a:	f7fe ff5f 	bl	800065c <HAL_GetTick>
 800179e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017a0:	6823      	ldr	r3, [r4, #0]
 80017a2:	079f      	lsls	r7, r3, #30
 80017a4:	d4ec      	bmi.n	8001780 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017a6:	f7fe ff59 	bl	800065c <HAL_GetTick>
 80017aa:	1b80      	subs	r0, r0, r6
 80017ac:	2802      	cmp	r0, #2
 80017ae:	d9f7      	bls.n	80017a0 <HAL_RCC_OscConfig+0x118>
 80017b0:	e7ab      	b.n	800170a <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 80017b2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80017b4:	f7fe ff52 	bl	800065c <HAL_GetTick>
 80017b8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ba:	6823      	ldr	r3, [r4, #0]
 80017bc:	0798      	lsls	r0, r3, #30
 80017be:	f57f af6d 	bpl.w	800169c <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017c2:	f7fe ff4b 	bl	800065c <HAL_GetTick>
 80017c6:	1b80      	subs	r0, r0, r6
 80017c8:	2802      	cmp	r0, #2
 80017ca:	d9f6      	bls.n	80017ba <HAL_RCC_OscConfig+0x132>
 80017cc:	e79d      	b.n	800170a <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017ce:	69aa      	ldr	r2, [r5, #24]
 80017d0:	4e4a      	ldr	r6, [pc, #296]	@ (80018fc <HAL_RCC_OscConfig+0x274>)
 80017d2:	4b4b      	ldr	r3, [pc, #300]	@ (8001900 <HAL_RCC_OscConfig+0x278>)
 80017d4:	b1e2      	cbz	r2, 8001810 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 80017d6:	2201      	movs	r2, #1
 80017d8:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 80017dc:	f7fe ff3e 	bl	800065c <HAL_GetTick>
 80017e0:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017e2:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 80017e4:	079b      	lsls	r3, r3, #30
 80017e6:	d50d      	bpl.n	8001804 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80017e8:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80017ec:	4b45      	ldr	r3, [pc, #276]	@ (8001904 <HAL_RCC_OscConfig+0x27c>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80017f4:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80017f6:	bf00      	nop
  }
  while (Delay --);
 80017f8:	9b01      	ldr	r3, [sp, #4]
 80017fa:	1e5a      	subs	r2, r3, #1
 80017fc:	9201      	str	r2, [sp, #4]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d1f9      	bne.n	80017f6 <HAL_RCC_OscConfig+0x16e>
 8001802:	e74f      	b.n	80016a4 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001804:	f7fe ff2a 	bl	800065c <HAL_GetTick>
 8001808:	1b00      	subs	r0, r0, r4
 800180a:	2802      	cmp	r0, #2
 800180c:	d9e9      	bls.n	80017e2 <HAL_RCC_OscConfig+0x15a>
 800180e:	e77c      	b.n	800170a <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 8001810:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8001814:	f7fe ff22 	bl	800065c <HAL_GetTick>
 8001818:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800181a:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 800181c:	079f      	lsls	r7, r3, #30
 800181e:	f57f af41 	bpl.w	80016a4 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001822:	f7fe ff1b 	bl	800065c <HAL_GetTick>
 8001826:	1b00      	subs	r0, r0, r4
 8001828:	2802      	cmp	r0, #2
 800182a:	d9f6      	bls.n	800181a <HAL_RCC_OscConfig+0x192>
 800182c:	e76d      	b.n	800170a <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800182e:	4c33      	ldr	r4, [pc, #204]	@ (80018fc <HAL_RCC_OscConfig+0x274>)
 8001830:	69e3      	ldr	r3, [r4, #28]
 8001832:	00d8      	lsls	r0, r3, #3
 8001834:	d424      	bmi.n	8001880 <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 8001836:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001838:	69e3      	ldr	r3, [r4, #28]
 800183a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800183e:	61e3      	str	r3, [r4, #28]
 8001840:	69e3      	ldr	r3, [r4, #28]
 8001842:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001846:	9300      	str	r3, [sp, #0]
 8001848:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800184a:	4e2f      	ldr	r6, [pc, #188]	@ (8001908 <HAL_RCC_OscConfig+0x280>)
 800184c:	6833      	ldr	r3, [r6, #0]
 800184e:	05d9      	lsls	r1, r3, #23
 8001850:	d518      	bpl.n	8001884 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001852:	68eb      	ldr	r3, [r5, #12]
 8001854:	2b01      	cmp	r3, #1
 8001856:	d126      	bne.n	80018a6 <HAL_RCC_OscConfig+0x21e>
 8001858:	6a23      	ldr	r3, [r4, #32]
 800185a:	f043 0301 	orr.w	r3, r3, #1
 800185e:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001860:	f7fe fefc 	bl	800065c <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001864:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8001868:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800186a:	6a23      	ldr	r3, [r4, #32]
 800186c:	079b      	lsls	r3, r3, #30
 800186e:	d53f      	bpl.n	80018f0 <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 8001870:	2f00      	cmp	r7, #0
 8001872:	f43f af1b 	beq.w	80016ac <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001876:	69e3      	ldr	r3, [r4, #28]
 8001878:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800187c:	61e3      	str	r3, [r4, #28]
 800187e:	e715      	b.n	80016ac <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8001880:	2700      	movs	r7, #0
 8001882:	e7e2      	b.n	800184a <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001884:	6833      	ldr	r3, [r6, #0]
 8001886:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800188a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800188c:	f7fe fee6 	bl	800065c <HAL_GetTick>
 8001890:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001892:	6833      	ldr	r3, [r6, #0]
 8001894:	05da      	lsls	r2, r3, #23
 8001896:	d4dc      	bmi.n	8001852 <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001898:	f7fe fee0 	bl	800065c <HAL_GetTick>
 800189c:	eba0 0008 	sub.w	r0, r0, r8
 80018a0:	2864      	cmp	r0, #100	@ 0x64
 80018a2:	d9f6      	bls.n	8001892 <HAL_RCC_OscConfig+0x20a>
 80018a4:	e731      	b.n	800170a <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018a6:	b9ab      	cbnz	r3, 80018d4 <HAL_RCC_OscConfig+0x24c>
 80018a8:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018aa:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018ae:	f023 0301 	bic.w	r3, r3, #1
 80018b2:	6223      	str	r3, [r4, #32]
 80018b4:	6a23      	ldr	r3, [r4, #32]
 80018b6:	f023 0304 	bic.w	r3, r3, #4
 80018ba:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80018bc:	f7fe fece 	bl	800065c <HAL_GetTick>
 80018c0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018c2:	6a23      	ldr	r3, [r4, #32]
 80018c4:	0798      	lsls	r0, r3, #30
 80018c6:	d5d3      	bpl.n	8001870 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018c8:	f7fe fec8 	bl	800065c <HAL_GetTick>
 80018cc:	1b80      	subs	r0, r0, r6
 80018ce:	4540      	cmp	r0, r8
 80018d0:	d9f7      	bls.n	80018c2 <HAL_RCC_OscConfig+0x23a>
 80018d2:	e71a      	b.n	800170a <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018d4:	2b05      	cmp	r3, #5
 80018d6:	6a23      	ldr	r3, [r4, #32]
 80018d8:	d103      	bne.n	80018e2 <HAL_RCC_OscConfig+0x25a>
 80018da:	f043 0304 	orr.w	r3, r3, #4
 80018de:	6223      	str	r3, [r4, #32]
 80018e0:	e7ba      	b.n	8001858 <HAL_RCC_OscConfig+0x1d0>
 80018e2:	f023 0301 	bic.w	r3, r3, #1
 80018e6:	6223      	str	r3, [r4, #32]
 80018e8:	6a23      	ldr	r3, [r4, #32]
 80018ea:	f023 0304 	bic.w	r3, r3, #4
 80018ee:	e7b6      	b.n	800185e <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018f0:	f7fe feb4 	bl	800065c <HAL_GetTick>
 80018f4:	1b80      	subs	r0, r0, r6
 80018f6:	4540      	cmp	r0, r8
 80018f8:	d9b7      	bls.n	800186a <HAL_RCC_OscConfig+0x1e2>
 80018fa:	e706      	b.n	800170a <HAL_RCC_OscConfig+0x82>
 80018fc:	40021000 	.word	0x40021000
 8001900:	42420000 	.word	0x42420000
 8001904:	20000014 	.word	0x20000014
 8001908:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800190c:	4c2a      	ldr	r4, [pc, #168]	@ (80019b8 <HAL_RCC_OscConfig+0x330>)
 800190e:	6862      	ldr	r2, [r4, #4]
 8001910:	f002 020c 	and.w	r2, r2, #12
 8001914:	2a08      	cmp	r2, #8
 8001916:	d03e      	beq.n	8001996 <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001918:	2200      	movs	r2, #0
 800191a:	2b02      	cmp	r3, #2
 800191c:	4b27      	ldr	r3, [pc, #156]	@ (80019bc <HAL_RCC_OscConfig+0x334>)
        __HAL_RCC_PLL_DISABLE();
 800191e:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001920:	d12c      	bne.n	800197c <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8001922:	f7fe fe9b 	bl	800065c <HAL_GetTick>
 8001926:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001928:	6823      	ldr	r3, [r4, #0]
 800192a:	0199      	lsls	r1, r3, #6
 800192c:	d420      	bmi.n	8001970 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800192e:	6a2b      	ldr	r3, [r5, #32]
 8001930:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001934:	d105      	bne.n	8001942 <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001936:	6862      	ldr	r2, [r4, #4]
 8001938:	68a9      	ldr	r1, [r5, #8]
 800193a:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800193e:	430a      	orrs	r2, r1
 8001940:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001942:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8001944:	6862      	ldr	r2, [r4, #4]
 8001946:	430b      	orrs	r3, r1
 8001948:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
 800194c:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 800194e:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001950:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8001952:	4b1a      	ldr	r3, [pc, #104]	@ (80019bc <HAL_RCC_OscConfig+0x334>)
 8001954:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001956:	f7fe fe81 	bl	800065c <HAL_GetTick>
 800195a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800195c:	6823      	ldr	r3, [r4, #0]
 800195e:	019a      	lsls	r2, r3, #6
 8001960:	f53f aea8 	bmi.w	80016b4 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001964:	f7fe fe7a 	bl	800065c <HAL_GetTick>
 8001968:	1b40      	subs	r0, r0, r5
 800196a:	2802      	cmp	r0, #2
 800196c:	d9f6      	bls.n	800195c <HAL_RCC_OscConfig+0x2d4>
 800196e:	e6cc      	b.n	800170a <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001970:	f7fe fe74 	bl	800065c <HAL_GetTick>
 8001974:	1b80      	subs	r0, r0, r6
 8001976:	2802      	cmp	r0, #2
 8001978:	d9d6      	bls.n	8001928 <HAL_RCC_OscConfig+0x2a0>
 800197a:	e6c6      	b.n	800170a <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 800197c:	f7fe fe6e 	bl	800065c <HAL_GetTick>
 8001980:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001982:	6823      	ldr	r3, [r4, #0]
 8001984:	019b      	lsls	r3, r3, #6
 8001986:	f57f ae95 	bpl.w	80016b4 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800198a:	f7fe fe67 	bl	800065c <HAL_GetTick>
 800198e:	1b40      	subs	r0, r0, r5
 8001990:	2802      	cmp	r0, #2
 8001992:	d9f6      	bls.n	8001982 <HAL_RCC_OscConfig+0x2fa>
 8001994:	e6b9      	b.n	800170a <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001996:	2b01      	cmp	r3, #1
 8001998:	f43f aea2 	beq.w	80016e0 <HAL_RCC_OscConfig+0x58>
        pll_config = RCC->CFGR;
 800199c:	6860      	ldr	r0, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800199e:	6a2b      	ldr	r3, [r5, #32]
 80019a0:	f400 3280 	and.w	r2, r0, #65536	@ 0x10000
 80019a4:	429a      	cmp	r2, r3
 80019a6:	f47f ae9b 	bne.w	80016e0 <HAL_RCC_OscConfig+0x58>
 80019aa:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80019ac:	f400 1070 	and.w	r0, r0, #3932160	@ 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019b0:	1ac0      	subs	r0, r0, r3
 80019b2:	bf18      	it	ne
 80019b4:	2001      	movne	r0, #1
 80019b6:	e6a9      	b.n	800170c <HAL_RCC_OscConfig+0x84>
 80019b8:	40021000 	.word	0x40021000
 80019bc:	42420000 	.word	0x42420000

080019c0 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 80019c0:	4a0d      	ldr	r2, [pc, #52]	@ (80019f8 <HAL_RCC_GetSysClockFreq+0x38>)
 80019c2:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80019c4:	f003 010c 	and.w	r1, r3, #12
 80019c8:	2908      	cmp	r1, #8
 80019ca:	d112      	bne.n	80019f2 <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80019cc:	480b      	ldr	r0, [pc, #44]	@ (80019fc <HAL_RCC_GetSysClockFreq+0x3c>)
 80019ce:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80019d2:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80019d4:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80019d6:	d509      	bpl.n	80019ec <HAL_RCC_GetSysClockFreq+0x2c>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80019d8:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80019da:	4a09      	ldr	r2, [pc, #36]	@ (8001a00 <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80019dc:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80019e0:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80019e2:	4a08      	ldr	r2, [pc, #32]	@ (8001a04 <HAL_RCC_GetSysClockFreq+0x44>)
 80019e4:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80019e6:	fbb0 f0f3 	udiv	r0, r0, r3
 80019ea:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80019ec:	4b06      	ldr	r3, [pc, #24]	@ (8001a08 <HAL_RCC_GetSysClockFreq+0x48>)
 80019ee:	4358      	muls	r0, r3
 80019f0:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 80019f2:	4803      	ldr	r0, [pc, #12]	@ (8001a00 <HAL_RCC_GetSysClockFreq+0x40>)
}
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	40021000 	.word	0x40021000
 80019fc:	080040e2 	.word	0x080040e2
 8001a00:	007a1200 	.word	0x007a1200
 8001a04:	080040e0 	.word	0x080040e0
 8001a08:	003d0900 	.word	0x003d0900

08001a0c <HAL_RCC_ClockConfig>:
{
 8001a0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a10:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8001a12:	4604      	mov	r4, r0
 8001a14:	b910      	cbnz	r0, 8001a1c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001a16:	2001      	movs	r0, #1
}
 8001a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a1c:	4a44      	ldr	r2, [pc, #272]	@ (8001b30 <HAL_RCC_ClockConfig+0x124>)
 8001a1e:	6813      	ldr	r3, [r2, #0]
 8001a20:	f003 0307 	and.w	r3, r3, #7
 8001a24:	428b      	cmp	r3, r1
 8001a26:	d328      	bcc.n	8001a7a <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a28:	6821      	ldr	r1, [r4, #0]
 8001a2a:	078e      	lsls	r6, r1, #30
 8001a2c:	d430      	bmi.n	8001a90 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a2e:	07ca      	lsls	r2, r1, #31
 8001a30:	d443      	bmi.n	8001aba <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a32:	4a3f      	ldr	r2, [pc, #252]	@ (8001b30 <HAL_RCC_ClockConfig+0x124>)
 8001a34:	6813      	ldr	r3, [r2, #0]
 8001a36:	f003 0307 	and.w	r3, r3, #7
 8001a3a:	42ab      	cmp	r3, r5
 8001a3c:	d865      	bhi.n	8001b0a <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a3e:	6822      	ldr	r2, [r4, #0]
 8001a40:	4d3c      	ldr	r5, [pc, #240]	@ (8001b34 <HAL_RCC_ClockConfig+0x128>)
 8001a42:	f012 0f04 	tst.w	r2, #4
 8001a46:	d16c      	bne.n	8001b22 <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a48:	0713      	lsls	r3, r2, #28
 8001a4a:	d506      	bpl.n	8001a5a <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a4c:	686b      	ldr	r3, [r5, #4]
 8001a4e:	6922      	ldr	r2, [r4, #16]
 8001a50:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8001a54:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001a58:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a5a:	f7ff ffb1 	bl	80019c0 <HAL_RCC_GetSysClockFreq>
 8001a5e:	686b      	ldr	r3, [r5, #4]
 8001a60:	4a35      	ldr	r2, [pc, #212]	@ (8001b38 <HAL_RCC_ClockConfig+0x12c>)
 8001a62:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001a66:	5cd3      	ldrb	r3, [r2, r3]
 8001a68:	40d8      	lsrs	r0, r3
 8001a6a:	4b34      	ldr	r3, [pc, #208]	@ (8001b3c <HAL_RCC_ClockConfig+0x130>)
 8001a6c:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001a6e:	4b34      	ldr	r3, [pc, #208]	@ (8001b40 <HAL_RCC_ClockConfig+0x134>)
 8001a70:	6818      	ldr	r0, [r3, #0]
 8001a72:	f7fe fdb1 	bl	80005d8 <HAL_InitTick>
  return HAL_OK;
 8001a76:	2000      	movs	r0, #0
 8001a78:	e7ce      	b.n	8001a18 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a7a:	6813      	ldr	r3, [r2, #0]
 8001a7c:	f023 0307 	bic.w	r3, r3, #7
 8001a80:	430b      	orrs	r3, r1
 8001a82:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a84:	6813      	ldr	r3, [r2, #0]
 8001a86:	f003 0307 	and.w	r3, r3, #7
 8001a8a:	428b      	cmp	r3, r1
 8001a8c:	d1c3      	bne.n	8001a16 <HAL_RCC_ClockConfig+0xa>
 8001a8e:	e7cb      	b.n	8001a28 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a90:	4b28      	ldr	r3, [pc, #160]	@ (8001b34 <HAL_RCC_ClockConfig+0x128>)
 8001a92:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a96:	bf1e      	ittt	ne
 8001a98:	685a      	ldrne	r2, [r3, #4]
 8001a9a:	f442 62e0 	orrne.w	r2, r2, #1792	@ 0x700
 8001a9e:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aa0:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001aa2:	bf42      	ittt	mi
 8001aa4:	685a      	ldrmi	r2, [r3, #4]
 8001aa6:	f442 5260 	orrmi.w	r2, r2, #14336	@ 0x3800
 8001aaa:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001aac:	685a      	ldr	r2, [r3, #4]
 8001aae:	68a0      	ldr	r0, [r4, #8]
 8001ab0:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8001ab4:	4302      	orrs	r2, r0
 8001ab6:	605a      	str	r2, [r3, #4]
 8001ab8:	e7b9      	b.n	8001a2e <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aba:	6862      	ldr	r2, [r4, #4]
 8001abc:	4e1d      	ldr	r6, [pc, #116]	@ (8001b34 <HAL_RCC_ClockConfig+0x128>)
 8001abe:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ac0:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ac2:	d11a      	bne.n	8001afa <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ac4:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ac8:	d0a5      	beq.n	8001a16 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001aca:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001acc:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ad0:	f023 0303 	bic.w	r3, r3, #3
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001ad8:	f7fe fdc0 	bl	800065c <HAL_GetTick>
 8001adc:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ade:	6873      	ldr	r3, [r6, #4]
 8001ae0:	6862      	ldr	r2, [r4, #4]
 8001ae2:	f003 030c 	and.w	r3, r3, #12
 8001ae6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001aea:	d0a2      	beq.n	8001a32 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aec:	f7fe fdb6 	bl	800065c <HAL_GetTick>
 8001af0:	1bc0      	subs	r0, r0, r7
 8001af2:	4540      	cmp	r0, r8
 8001af4:	d9f3      	bls.n	8001ade <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8001af6:	2003      	movs	r0, #3
 8001af8:	e78e      	b.n	8001a18 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001afa:	2a02      	cmp	r2, #2
 8001afc:	d102      	bne.n	8001b04 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001afe:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001b02:	e7e1      	b.n	8001ac8 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b04:	f013 0f02 	tst.w	r3, #2
 8001b08:	e7de      	b.n	8001ac8 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b0a:	6813      	ldr	r3, [r2, #0]
 8001b0c:	f023 0307 	bic.w	r3, r3, #7
 8001b10:	432b      	orrs	r3, r5
 8001b12:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b14:	6813      	ldr	r3, [r2, #0]
 8001b16:	f003 0307 	and.w	r3, r3, #7
 8001b1a:	42ab      	cmp	r3, r5
 8001b1c:	f47f af7b 	bne.w	8001a16 <HAL_RCC_ClockConfig+0xa>
 8001b20:	e78d      	b.n	8001a3e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b22:	686b      	ldr	r3, [r5, #4]
 8001b24:	68e1      	ldr	r1, [r4, #12]
 8001b26:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001b2a:	430b      	orrs	r3, r1
 8001b2c:	606b      	str	r3, [r5, #4]
 8001b2e:	e78b      	b.n	8001a48 <HAL_RCC_ClockConfig+0x3c>
 8001b30:	40022000 	.word	0x40022000
 8001b34:	40021000 	.word	0x40021000
 8001b38:	080040d0 	.word	0x080040d0
 8001b3c:	20000014 	.word	0x20000014
 8001b40:	2000001c 	.word	0x2000001c

08001b44 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001b44:	6803      	ldr	r3, [r0, #0]
{
 8001b46:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001b4a:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001b4c:	07d8      	lsls	r0, r3, #31
 8001b4e:	d521      	bpl.n	8001b94 <HAL_RCCEx_PeriphCLKConfig+0x50>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b50:	4c36      	ldr	r4, [pc, #216]	@ (8001c2c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8001b52:	69e3      	ldr	r3, [r4, #28]
 8001b54:	00d9      	lsls	r1, r3, #3
 8001b56:	d42b      	bmi.n	8001bb0 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8001b58:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b5a:	69e3      	ldr	r3, [r4, #28]
 8001b5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b60:	61e3      	str	r3, [r4, #28]
 8001b62:	69e3      	ldr	r3, [r4, #28]
 8001b64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b68:	9301      	str	r3, [sp, #4]
 8001b6a:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b6c:	4f30      	ldr	r7, [pc, #192]	@ (8001c30 <HAL_RCCEx_PeriphCLKConfig+0xec>)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	05da      	lsls	r2, r3, #23
 8001b72:	d51f      	bpl.n	8001bb4 <HAL_RCCEx_PeriphCLKConfig+0x70>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001b74:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001b76:	686a      	ldr	r2, [r5, #4]
 8001b78:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8001b7c:	d12e      	bne.n	8001bdc <HAL_RCCEx_PeriphCLKConfig+0x98>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b7e:	6a23      	ldr	r3, [r4, #32]
 8001b80:	686a      	ldr	r2, [r5, #4]
 8001b82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001b86:	4313      	orrs	r3, r2
 8001b88:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b8a:	b11e      	cbz	r6, 8001b94 <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b8c:	69e3      	ldr	r3, [r4, #28]
 8001b8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b92:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001b94:	682a      	ldr	r2, [r5, #0]
 8001b96:	0791      	lsls	r1, r2, #30
 8001b98:	d506      	bpl.n	8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001b9a:	4924      	ldr	r1, [pc, #144]	@ (8001c2c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8001b9c:	68a8      	ldr	r0, [r5, #8]
 8001b9e:	684b      	ldr	r3, [r1, #4]
 8001ba0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001ba4:	4303      	orrs	r3, r0
 8001ba6:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001ba8:	06d3      	lsls	r3, r2, #27
 8001baa:	d436      	bmi.n	8001c1a <HAL_RCCEx_PeriphCLKConfig+0xd6>
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001bac:	2000      	movs	r0, #0
 8001bae:	e012      	b.n	8001bd6 <HAL_RCCEx_PeriphCLKConfig+0x92>
    FlagStatus pwrclkchanged = RESET;
 8001bb0:	2600      	movs	r6, #0
 8001bb2:	e7db      	b.n	8001b6c <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bba:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001bbc:	f7fe fd4e 	bl	800065c <HAL_GetTick>
 8001bc0:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	05db      	lsls	r3, r3, #23
 8001bc6:	d4d5      	bmi.n	8001b74 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bc8:	f7fe fd48 	bl	800065c <HAL_GetTick>
 8001bcc:	eba0 0008 	sub.w	r0, r0, r8
 8001bd0:	2864      	cmp	r0, #100	@ 0x64
 8001bd2:	d9f6      	bls.n	8001bc2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
          return HAL_TIMEOUT;
 8001bd4:	2003      	movs	r0, #3
}
 8001bd6:	b002      	add	sp, #8
 8001bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001bdc:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d0cc      	beq.n	8001b7e <HAL_RCCEx_PeriphCLKConfig+0x3a>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001be4:	2001      	movs	r0, #1
 8001be6:	4a13      	ldr	r2, [pc, #76]	@ (8001c34 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001be8:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001bea:	f8c2 0440 	str.w	r0, [r2, #1088]	@ 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001bee:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001bf0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001bf4:	07df      	lsls	r7, r3, #31
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001bf6:	f8c2 0440 	str.w	r0, [r2, #1088]	@ 0x440
      RCC->BDCR = temp_reg;
 8001bfa:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001bfc:	d5bf      	bpl.n	8001b7e <HAL_RCCEx_PeriphCLKConfig+0x3a>
        tickstart = HAL_GetTick();
 8001bfe:	f7fe fd2d 	bl	800065c <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c02:	f241 3888 	movw	r8, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 8001c06:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c08:	6a23      	ldr	r3, [r4, #32]
 8001c0a:	0798      	lsls	r0, r3, #30
 8001c0c:	d4b7      	bmi.n	8001b7e <HAL_RCCEx_PeriphCLKConfig+0x3a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c0e:	f7fe fd25 	bl	800065c <HAL_GetTick>
 8001c12:	1bc0      	subs	r0, r0, r7
 8001c14:	4540      	cmp	r0, r8
 8001c16:	d9f7      	bls.n	8001c08 <HAL_RCCEx_PeriphCLKConfig+0xc4>
 8001c18:	e7dc      	b.n	8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001c1a:	4a04      	ldr	r2, [pc, #16]	@ (8001c2c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8001c1c:	68e9      	ldr	r1, [r5, #12]
 8001c1e:	6853      	ldr	r3, [r2, #4]
 8001c20:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001c24:	430b      	orrs	r3, r1
 8001c26:	6053      	str	r3, [r2, #4]
 8001c28:	e7c0      	b.n	8001bac <HAL_RCCEx_PeriphCLKConfig+0x68>
 8001c2a:	bf00      	nop
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	40007000 	.word	0x40007000
 8001c34:	42420000 	.word	0x42420000

08001c38 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c38:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d118      	bne.n	8001c72 <HAL_TIM_Base_Start+0x3a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c40:	2302      	movs	r3, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c42:	4a0d      	ldr	r2, [pc, #52]	@ (8001c78 <HAL_TIM_Base_Start+0x40>)
  htim->State = HAL_TIM_STATE_BUSY;
 8001c44:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c48:	6803      	ldr	r3, [r0, #0]
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d006      	beq.n	8001c5c <HAL_TIM_Base_Start+0x24>
 8001c4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c52:	d003      	beq.n	8001c5c <HAL_TIM_Base_Start+0x24>
 8001c54:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d104      	bne.n	8001c66 <HAL_TIM_Base_Start+0x2e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c5c:	689a      	ldr	r2, [r3, #8]
 8001c5e:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c62:	2a06      	cmp	r2, #6
 8001c64:	d003      	beq.n	8001c6e <HAL_TIM_Base_Start+0x36>
    {
      __HAL_TIM_ENABLE(htim);
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	f042 0201 	orr.w	r2, r2, #1
 8001c6c:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 8001c6e:	2000      	movs	r0, #0
 8001c70:	4770      	bx	lr
    return HAL_ERROR;
 8001c72:	2001      	movs	r0, #1
}
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	40012c00 	.word	0x40012c00

08001c7c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c7c:	4a19      	ldr	r2, [pc, #100]	@ (8001ce4 <TIM_Base_SetConfig+0x68>)
{
 8001c7e:	b510      	push	{r4, lr}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c80:	4290      	cmp	r0, r2
  tmpcr1 = TIMx->CR1;
 8001c82:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c84:	d005      	beq.n	8001c92 <TIM_Base_SetConfig+0x16>
 8001c86:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8001c8a:	d002      	beq.n	8001c92 <TIM_Base_SetConfig+0x16>
 8001c8c:	4c16      	ldr	r4, [pc, #88]	@ (8001ce8 <TIM_Base_SetConfig+0x6c>)
 8001c8e:	42a0      	cmp	r0, r4
 8001c90:	d110      	bne.n	8001cb4 <TIM_Base_SetConfig+0x38>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001c92:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c98:	4290      	cmp	r0, r2
    tmpcr1 |= Structure->CounterMode;
 8001c9a:	ea43 0304 	orr.w	r3, r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c9e:	d005      	beq.n	8001cac <TIM_Base_SetConfig+0x30>
 8001ca0:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8001ca4:	d002      	beq.n	8001cac <TIM_Base_SetConfig+0x30>
 8001ca6:	4a10      	ldr	r2, [pc, #64]	@ (8001ce8 <TIM_Base_SetConfig+0x6c>)
 8001ca8:	4290      	cmp	r0, r2
 8001caa:	d103      	bne.n	8001cb4 <TIM_Base_SetConfig+0x38>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001cac:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001cae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001cb2:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001cb4:	694a      	ldr	r2, [r1, #20]
 8001cb6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001cba:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8001cbc:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001cbe:	688b      	ldr	r3, [r1, #8]
 8001cc0:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001cc2:	680b      	ldr	r3, [r1, #0]
 8001cc4:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001cc6:	4b07      	ldr	r3, [pc, #28]	@ (8001ce4 <TIM_Base_SetConfig+0x68>)
 8001cc8:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001cca:	bf04      	itt	eq
 8001ccc:	690b      	ldreq	r3, [r1, #16]
 8001cce:	6303      	streq	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001cd4:	6903      	ldr	r3, [r0, #16]
 8001cd6:	07db      	lsls	r3, r3, #31
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001cd8:	bf42      	ittt	mi
 8001cda:	6903      	ldrmi	r3, [r0, #16]
 8001cdc:	f023 0301 	bicmi.w	r3, r3, #1
 8001ce0:	6103      	strmi	r3, [r0, #16]
  }
}
 8001ce2:	bd10      	pop	{r4, pc}
 8001ce4:	40012c00 	.word	0x40012c00
 8001ce8:	40000400 	.word	0x40000400

08001cec <HAL_TIM_Base_Init>:
{
 8001cec:	b510      	push	{r4, lr}
  if (htim == NULL)
 8001cee:	4604      	mov	r4, r0
 8001cf0:	b330      	cbz	r0, 8001d40 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001cf2:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8001cf6:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001cfa:	b91b      	cbnz	r3, 8001d04 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001cfc:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001d00:	f7fe fbfc 	bl	80004fc <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001d04:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d06:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001d08:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d0c:	1d21      	adds	r1, r4, #4
 8001d0e:	f7ff ffb5 	bl	8001c7c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d12:	2301      	movs	r3, #1
  return HAL_OK;
 8001d14:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d16:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d1a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8001d1e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8001d22:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8001d26:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d2a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001d2e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001d32:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8001d36:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8001d3a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 8001d3e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001d40:	2001      	movs	r0, #1
 8001d42:	e7fc      	b.n	8001d3e <HAL_TIM_Base_Init+0x52>

08001d44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001d44:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001d46:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001d48:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d4a:	f424 447f 	bic.w	r4, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001d4e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8001d52:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001d54:	6082      	str	r2, [r0, #8]
}
 8001d56:	bd10      	pop	{r4, pc}

08001d58 <HAL_TIM_ConfigClockSource>:
{
 8001d58:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001d5a:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 8001d5e:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	f04f 0002 	mov.w	r0, #2
 8001d66:	f000 808e 	beq.w	8001e86 <HAL_TIM_ConfigClockSource+0x12e>
 8001d6a:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8001d6c:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001d70:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8001d72:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001d76:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d78:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001d7c:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001d80:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8001d82:	680b      	ldr	r3, [r1, #0]
 8001d84:	2b60      	cmp	r3, #96	@ 0x60
 8001d86:	d04f      	beq.n	8001e28 <HAL_TIM_ConfigClockSource+0xd0>
 8001d88:	d832      	bhi.n	8001df0 <HAL_TIM_ConfigClockSource+0x98>
 8001d8a:	2b40      	cmp	r3, #64	@ 0x40
 8001d8c:	d064      	beq.n	8001e58 <HAL_TIM_ConfigClockSource+0x100>
 8001d8e:	d816      	bhi.n	8001dbe <HAL_TIM_ConfigClockSource+0x66>
 8001d90:	2b20      	cmp	r3, #32
 8001d92:	d00d      	beq.n	8001db0 <HAL_TIM_ConfigClockSource+0x58>
 8001d94:	d80a      	bhi.n	8001dac <HAL_TIM_ConfigClockSource+0x54>
 8001d96:	f033 0110 	bics.w	r1, r3, #16
 8001d9a:	d009      	beq.n	8001db0 <HAL_TIM_ConfigClockSource+0x58>
  htim->State = HAL_TIM_STATE_READY;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8001da2:	2300      	movs	r3, #0
 8001da4:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8001da8:	4610      	mov	r0, r2
 8001daa:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 8001dac:	2b30      	cmp	r3, #48	@ 0x30
 8001dae:	d1f5      	bne.n	8001d9c <HAL_TIM_ConfigClockSource+0x44>
  tmpsmcr = TIMx->SMCR;
 8001db0:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001db2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001db6:	4313      	orrs	r3, r2
 8001db8:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8001dbc:	e028      	b.n	8001e10 <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 8001dbe:	2b50      	cmp	r3, #80	@ 0x50
 8001dc0:	d1ec      	bne.n	8001d9c <HAL_TIM_ConfigClockSource+0x44>
                               sClockSourceConfig->ClockPolarity,
 8001dc2:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8001dc4:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8001dc6:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001dc8:	6a03      	ldr	r3, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001dca:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001dce:	f023 0301 	bic.w	r3, r3, #1
 8001dd2:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001dd4:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8001dd6:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001dd8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001ddc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001de0:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001de2:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001de4:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001de6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001dea:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 8001dee:	e00f      	b.n	8001e10 <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 8001df0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001df4:	d00d      	beq.n	8001e12 <HAL_TIM_ConfigClockSource+0xba>
 8001df6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001dfa:	d00c      	beq.n	8001e16 <HAL_TIM_ConfigClockSource+0xbe>
 8001dfc:	2b70      	cmp	r3, #112	@ 0x70
 8001dfe:	d1cd      	bne.n	8001d9c <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 8001e00:	68cb      	ldr	r3, [r1, #12]
 8001e02:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8001e06:	f7ff ff9d 	bl	8001d44 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001e0a:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001e0c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8001e10:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001e12:	2200      	movs	r2, #0
 8001e14:	e7c2      	b.n	8001d9c <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 8001e16:	68cb      	ldr	r3, [r1, #12]
 8001e18:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8001e1c:	f7ff ff92 	bl	8001d44 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001e20:	6883      	ldr	r3, [r0, #8]
 8001e22:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e26:	e7f3      	b.n	8001e10 <HAL_TIM_ConfigClockSource+0xb8>
  tmpccer = TIMx->CCER;
 8001e28:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e2a:	6a02      	ldr	r2, [r0, #32]
                               sClockSourceConfig->ClockPolarity,
 8001e2c:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e2e:	f022 0210 	bic.w	r2, r2, #16
                               sClockSourceConfig->ClockFilter);
 8001e32:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e34:	6202      	str	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e36:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001e38:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001e3c:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
  tmpccer |= (TIM_ICPolarity << 4U);
 8001e40:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001e44:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8001e48:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001e4a:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001e4c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001e4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001e52:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 8001e56:	e7db      	b.n	8001e10 <HAL_TIM_ConfigClockSource+0xb8>
                               sClockSourceConfig->ClockPolarity,
 8001e58:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8001e5a:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8001e5c:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e5e:	6a03      	ldr	r3, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001e60:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e64:	f023 0301 	bic.w	r3, r3, #1
 8001e68:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e6a:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8001e6c:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001e6e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001e72:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001e76:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001e78:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001e7a:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001e7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001e80:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 8001e84:	e7c4      	b.n	8001e10 <HAL_TIM_ConfigClockSource+0xb8>
  __HAL_LOCK(htim);
 8001e86:	4602      	mov	r2, r0
 8001e88:	e78e      	b.n	8001da8 <HAL_TIM_ConfigClockSource+0x50>
	...

08001e8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001e8c:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001e8e:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
{
 8001e92:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8001e94:	2a01      	cmp	r2, #1
 8001e96:	f04f 0002 	mov.w	r0, #2
 8001e9a:	d01e      	beq.n	8001eda <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001e9c:	681a      	ldr	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001e9e:	f883 003d 	strb.w	r0, [r3, #61]	@ 0x3d
  tmpcr2 = htim->Instance->CR2;
 8001ea2:	6854      	ldr	r4, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001ea4:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8001ea6:	f024 0470 	bic.w	r4, r4, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001eaa:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 8001eac:	6890      	ldr	r0, [r2, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001eae:	6054      	str	r4, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001eb0:	4c0a      	ldr	r4, [pc, #40]	@ (8001edc <HAL_TIMEx_MasterConfigSynchronization+0x50>)
 8001eb2:	42a2      	cmp	r2, r4
 8001eb4:	d006      	beq.n	8001ec4 <HAL_TIMEx_MasterConfigSynchronization+0x38>
 8001eb6:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8001eba:	d003      	beq.n	8001ec4 <HAL_TIMEx_MasterConfigSynchronization+0x38>
 8001ebc:	f5a4 3494 	sub.w	r4, r4, #75776	@ 0x12800
 8001ec0:	42a2      	cmp	r2, r4
 8001ec2:	d104      	bne.n	8001ece <HAL_TIMEx_MasterConfigSynchronization+0x42>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001ec4:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001ec6:	f020 0080 	bic.w	r0, r0, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001eca:	4301      	orrs	r1, r0

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001ecc:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001ece:	2201      	movs	r2, #1

  __HAL_UNLOCK(htim);
 8001ed0:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001ed2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8001ed6:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8001eda:	bd30      	pop	{r4, r5, pc}
 8001edc:	40012c00 	.word	0x40012c00

08001ee0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8001ee0:	b084      	sub	sp, #16
 8001ee2:	a804      	add	r0, sp, #16
 8001ee4:	e900 000e 	stmdb	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8001ee8:	2000      	movs	r0, #0
 8001eea:	b004      	add	sp, #16
 8001eec:	4770      	bx	lr

08001eee <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8001eee:	4603      	mov	r3, r0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8001ef0:	f44f 423f 	mov.w	r2, #48896	@ 0xbf00
  USBx->ISTR = 0U;
 8001ef4:	2000      	movs	r0, #0
 8001ef6:	f8a3 0044 	strh.w	r0, [r3, #68]	@ 0x44
  USBx->CNTR = (uint16_t)winterruptmask;
 8001efa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
}
 8001efe:	4770      	bx	lr

08001f00 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8001f00:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 8001f04:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001f08:	045b      	lsls	r3, r3, #17
 8001f0a:	0c5b      	lsrs	r3, r3, #17
 8001f0c:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40

  return HAL_OK;
}
 8001f10:	2000      	movs	r0, #0
 8001f12:	4770      	bx	lr

08001f14 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001f14:	2000      	movs	r0, #0
 8001f16:	4770      	bx	lr

08001f18 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8001f18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001f1a:	4604      	mov	r4, r0
 8001f1c:	a804      	add	r0, sp, #16
 8001f1e:	e900 000e 	stmdb	r0, {r1, r2, r3}
  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8001f22:	2000      	movs	r0, #0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8001f24:	2301      	movs	r3, #1
 8001f26:	f8a4 3040 	strh.w	r3, [r4, #64]	@ 0x40
  USBx->CNTR = 0U;
 8001f2a:	f8a4 0040 	strh.w	r0, [r4, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8001f2e:	f8a4 0044 	strh.w	r0, [r4, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8001f32:	f8a4 0050 	strh.w	r0, [r4, #80]	@ 0x50

  return HAL_OK;
}
 8001f36:	b004      	add	sp, #16
 8001f38:	bd10      	pop	{r4, pc}
	...

08001f3c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8001f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8001f3e:	780a      	ldrb	r2, [r1, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8001f40:	78cd      	ldrb	r5, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8001f42:	f830 4022 	ldrh.w	r4, [r0, r2, lsl #2]
{
 8001f46:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8001f48:	f424 44ec 	bic.w	r4, r4, #30208	@ 0x7600
 8001f4c:	f024 0470 	bic.w	r4, r4, #112	@ 0x70
 8001f50:	0424      	lsls	r4, r4, #16
 8001f52:	0c24      	lsrs	r4, r4, #16
  switch (ep->type)
 8001f54:	2d03      	cmp	r5, #3
 8001f56:	d84b      	bhi.n	8001ff0 <USB_ActivateEndpoint+0xb4>
 8001f58:	e8df f005 	tbb	[pc, r5]
 8001f5c:	43454702 	.word	0x43454702
  HAL_StatusTypeDef ret = HAL_OK;
 8001f60:	4628      	mov	r0, r5
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8001f62:	f444 7400 	orr.w	r4, r4, #512	@ 0x200
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8001f66:	f248 0680 	movw	r6, #32896	@ 0x8080
 8001f6a:	4334      	orrs	r4, r6
 8001f6c:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8001f70:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8001f74:	4f9e      	ldr	r7, [pc, #632]	@ (80021f0 <USB_ActivateEndpoint+0x2b4>)
 8001f76:	b2a4      	uxth	r4, r4
 8001f78:	403c      	ands	r4, r7
 8001f7a:	4314      	orrs	r4, r2
 8001f7c:	4334      	orrs	r4, r6
 8001f7e:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

  if (ep->doublebuffer == 0U)
 8001f82:	7b0c      	ldrb	r4, [r1, #12]
 8001f84:	eb03 1c02 	add.w	ip, r3, r2, lsl #4
 8001f88:	2c00      	cmp	r4, #0
 8001f8a:	f040 808b 	bne.w	80020a4 <USB_ActivateEndpoint+0x168>
  {
    if (ep->is_in != 0U)
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8001f8e:	88cc      	ldrh	r4, [r1, #6]
    if (ep->is_in != 0U)
 8001f90:	784e      	ldrb	r6, [r1, #1]
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8001f92:	0864      	lsrs	r4, r4, #1
 8001f94:	0064      	lsls	r4, r4, #1
    if (ep->is_in != 0U)
 8001f96:	b36e      	cbz	r6, 8001ff4 <USB_ActivateEndpoint+0xb8>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8001f98:	f8b3 1050 	ldrh.w	r1, [r3, #80]	@ 0x50
 8001f9c:	b289      	uxth	r1, r1
 8001f9e:	4461      	add	r1, ip
 8001fa0:	f8a1 4400 	strh.w	r4, [r1, #1024]	@ 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001fa4:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8001fa8:	0649      	lsls	r1, r1, #25
 8001faa:	d509      	bpl.n	8001fc0 <USB_ActivateEndpoint+0x84>
 8001fac:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8001fb0:	b289      	uxth	r1, r1
 8001fb2:	4039      	ands	r1, r7
 8001fb4:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8001fb8:	f041 01c0 	orr.w	r1, r1, #192	@ 0xc0
 8001fbc:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8001fc0:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8001fc4:	4c8b      	ldr	r4, [pc, #556]	@ (80021f4 <USB_ActivateEndpoint+0x2b8>)
 8001fc6:	b289      	uxth	r1, r1
      if (ep->type != EP_TYPE_ISOC)
 8001fc8:	2d01      	cmp	r5, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8001fca:	ea01 0104 	and.w	r1, r1, r4
      if (ep->type != EP_TYPE_ISOC)
 8001fce:	d001      	beq.n	8001fd4 <USB_ActivateEndpoint+0x98>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8001fd0:	f081 0120 	eor.w	r1, r1, #32
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001fd4:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8001fd8:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8001fdc:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
 8001fe0:	e04a      	b.n	8002078 <USB_ActivateEndpoint+0x13c>
      wEpRegVal |= USB_EP_INTERRUPT;
 8001fe2:	f444 64c0 	orr.w	r4, r4, #1536	@ 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 8001fe6:	2000      	movs	r0, #0
      break;
 8001fe8:	e7bd      	b.n	8001f66 <USB_ActivateEndpoint+0x2a>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8001fea:	f444 6480 	orr.w	r4, r4, #1024	@ 0x400
      break;
 8001fee:	e7fa      	b.n	8001fe6 <USB_ActivateEndpoint+0xaa>
  switch (ep->type)
 8001ff0:	2001      	movs	r0, #1
 8001ff2:	e7b8      	b.n	8001f66 <USB_ActivateEndpoint+0x2a>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8001ff4:	f8b3 5050 	ldrh.w	r5, [r3, #80]	@ 0x50
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8001ff8:	6909      	ldr	r1, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8001ffa:	b2ad      	uxth	r5, r5
 8001ffc:	4465      	add	r5, ip
 8001ffe:	f8a5 4408 	strh.w	r4, [r5, #1032]	@ 0x408
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002002:	f8b3 4050 	ldrh.w	r4, [r3, #80]	@ 0x50
 8002006:	293e      	cmp	r1, #62	@ 0x3e
 8002008:	b2a4      	uxth	r4, r4
 800200a:	4464      	add	r4, ip
 800200c:	f8b4 540c 	ldrh.w	r5, [r4, #1036]	@ 0x40c
 8002010:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8002014:	f8a4 540c 	strh.w	r5, [r4, #1036]	@ 0x40c
 8002018:	d92f      	bls.n	800207a <USB_ActivateEndpoint+0x13e>
 800201a:	094d      	lsrs	r5, r1, #5
 800201c:	06ce      	lsls	r6, r1, #27
 800201e:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	@ 0x40c
 8002022:	bf08      	it	eq
 8002024:	f105 35ff 	addeq.w	r5, r5, #4294967295
 8002028:	b289      	uxth	r1, r1
 800202a:	ea41 2185 	orr.w	r1, r1, r5, lsl #10
 800202e:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8002032:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8002036:	b289      	uxth	r1, r1
 8002038:	f8a4 140c 	strh.w	r1, [r4, #1036]	@ 0x40c
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800203c:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8002040:	044f      	lsls	r7, r1, #17
 8002042:	d50d      	bpl.n	8002060 <USB_ActivateEndpoint+0x124>
 8002044:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8002048:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 800204c:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8002050:	0409      	lsls	r1, r1, #16
 8002052:	0c09      	lsrs	r1, r1, #16
 8002054:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 8002058:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 800205c:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      if (ep->num == 0U)
 8002060:	4c65      	ldr	r4, [pc, #404]	@ (80021f8 <USB_ActivateEndpoint+0x2bc>)
 8002062:	b9c2      	cbnz	r2, 8002096 <USB_ActivateEndpoint+0x15a>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002064:	881a      	ldrh	r2, [r3, #0]
 8002066:	b292      	uxth	r2, r2
 8002068:	4022      	ands	r2, r4
 800206a:	f482 5240 	eor.w	r2, r2, #12288	@ 0x3000
 800206e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002072:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002076:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
 8002078:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800207a:	b911      	cbnz	r1, 8002082 <USB_ActivateEndpoint+0x146>
 800207c:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	@ 0x40c
 8002080:	e7d5      	b.n	800202e <USB_ActivateEndpoint+0xf2>
 8002082:	084d      	lsrs	r5, r1, #1
 8002084:	07c9      	lsls	r1, r1, #31
 8002086:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	@ 0x40c
 800208a:	bf48      	it	mi
 800208c:	3501      	addmi	r5, #1
 800208e:	b289      	uxth	r1, r1
 8002090:	ea41 2185 	orr.w	r1, r1, r5, lsl #10
 8002094:	e7cf      	b.n	8002036 <USB_ActivateEndpoint+0xfa>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8002096:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800209a:	b289      	uxth	r1, r1
 800209c:	4021      	ands	r1, r4
 800209e:	f481 5100 	eor.w	r1, r1, #8192	@ 0x2000
 80020a2:	e797      	b.n	8001fd4 <USB_ActivateEndpoint+0x98>
    if (ep->type == EP_TYPE_BULK)
 80020a4:	2d02      	cmp	r5, #2
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80020a6:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
    if (ep->type == EP_TYPE_BULK)
 80020aa:	d15b      	bne.n	8002164 <USB_ActivateEndpoint+0x228>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80020ac:	b2a4      	uxth	r4, r4
 80020ae:	403c      	ands	r4, r7
 80020b0:	f444 4401 	orr.w	r4, r4, #33024	@ 0x8100
 80020b4:	f044 0480 	orr.w	r4, r4, #128	@ 0x80
 80020b8:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80020bc:	f8b3 4050 	ldrh.w	r4, [r3, #80]	@ 0x50
 80020c0:	890e      	ldrh	r6, [r1, #8]
 80020c2:	b2a4      	uxth	r4, r4
 80020c4:	0876      	lsrs	r6, r6, #1
 80020c6:	4464      	add	r4, ip
 80020c8:	0076      	lsls	r6, r6, #1
 80020ca:	f8a4 6400 	strh.w	r6, [r4, #1024]	@ 0x400
 80020ce:	894e      	ldrh	r6, [r1, #10]
 80020d0:	f8b3 4050 	ldrh.w	r4, [r3, #80]	@ 0x50
 80020d4:	0876      	lsrs	r6, r6, #1
 80020d6:	b2a4      	uxth	r4, r4
 80020d8:	4464      	add	r4, ip
 80020da:	0076      	lsls	r6, r6, #1
 80020dc:	f8a4 6408 	strh.w	r6, [r4, #1032]	@ 0x408
    if (ep->is_in == 0U)
 80020e0:	7849      	ldrb	r1, [r1, #1]
 80020e2:	2900      	cmp	r1, #0
 80020e4:	d148      	bne.n	8002178 <USB_ActivateEndpoint+0x23c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80020e6:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80020ea:	044e      	lsls	r6, r1, #17
 80020ec:	d50d      	bpl.n	800210a <USB_ActivateEndpoint+0x1ce>
 80020ee:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80020f2:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 80020f6:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 80020fa:	0409      	lsls	r1, r1, #16
 80020fc:	0c09      	lsrs	r1, r1, #16
 80020fe:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 8002102:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8002106:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800210a:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800210e:	064d      	lsls	r5, r1, #25
 8002110:	d50d      	bpl.n	800212e <USB_ActivateEndpoint+0x1f2>
 8002112:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8002116:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 800211a:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 800211e:	0409      	lsls	r1, r1, #16
 8002120:	0c09      	lsrs	r1, r1, #16
 8002122:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8002126:	f041 01c0 	orr.w	r1, r1, #192	@ 0xc0
 800212a:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800212e:	f248 0480 	movw	r4, #32896	@ 0x8080
 8002132:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8002136:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 800213a:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 800213e:	0409      	lsls	r1, r1, #16
 8002140:	0c09      	lsrs	r1, r1, #16
 8002142:	f481 5140 	eor.w	r1, r1, #12288	@ 0x3000
 8002146:	4321      	orrs	r1, r4
 8002148:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800214c:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8002150:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8002154:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 8002158:	0409      	lsls	r1, r1, #16
 800215a:	0c09      	lsrs	r1, r1, #16
 800215c:	430c      	orrs	r4, r1
 800215e:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
 8002162:	e789      	b.n	8002078 <USB_ActivateEndpoint+0x13c>
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8002164:	f424 44e2 	bic.w	r4, r4, #28928	@ 0x7100
 8002168:	f024 0470 	bic.w	r4, r4, #112	@ 0x70
 800216c:	0424      	lsls	r4, r4, #16
 800216e:	0c24      	lsrs	r4, r4, #16
 8002170:	4326      	orrs	r6, r4
 8002172:	f823 6022 	strh.w	r6, [r3, r2, lsl #2]
 8002176:	e7a1      	b.n	80020bc <USB_ActivateEndpoint+0x180>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002178:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800217c:	044c      	lsls	r4, r1, #17
 800217e:	d50d      	bpl.n	800219c <USB_ActivateEndpoint+0x260>
 8002180:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8002184:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8002188:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 800218c:	0409      	lsls	r1, r1, #16
 800218e:	0c09      	lsrs	r1, r1, #16
 8002190:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 8002194:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8002198:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800219c:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80021a0:	0649      	lsls	r1, r1, #25
 80021a2:	d50d      	bpl.n	80021c0 <USB_ActivateEndpoint+0x284>
 80021a4:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80021a8:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 80021ac:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 80021b0:	0409      	lsls	r1, r1, #16
 80021b2:	0c09      	lsrs	r1, r1, #16
 80021b4:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 80021b8:	f041 01c0 	orr.w	r1, r1, #192	@ 0xc0
 80021bc:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80021c0:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80021c4:	4c0b      	ldr	r4, [pc, #44]	@ (80021f4 <USB_ActivateEndpoint+0x2b8>)
 80021c6:	b289      	uxth	r1, r1
 80021c8:	4021      	ands	r1, r4
      if (ep->type != EP_TYPE_ISOC)
 80021ca:	2d01      	cmp	r5, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80021cc:	bf18      	it	ne
 80021ce:	f081 0120 	eorne.w	r1, r1, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80021d2:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 80021d6:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 80021da:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80021de:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80021e2:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 80021e6:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 80021ea:	0409      	lsls	r1, r1, #16
 80021ec:	0c09      	lsrs	r1, r1, #16
 80021ee:	e6f1      	b.n	8001fd4 <USB_ActivateEndpoint+0x98>
 80021f0:	ffff8f8f 	.word	0xffff8f8f
 80021f4:	ffff8fbf 	.word	0xffff8fbf
 80021f8:	ffffbf8f 	.word	0xffffbf8f

080021fc <USB_DeactivateEndpoint>:
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
  {
    if (ep->is_in != 0U)
 80021fc:	784a      	ldrb	r2, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80021fe:	780b      	ldrb	r3, [r1, #0]
  if (ep->doublebuffer == 0U)
 8002200:	7b09      	ldrb	r1, [r1, #12]
 8002202:	bbd9      	cbnz	r1, 800227c <USB_DeactivateEndpoint+0x80>
    if (ep->is_in != 0U)
 8002204:	b30a      	cbz	r2, 800224a <USB_DeactivateEndpoint+0x4e>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002206:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800220a:	0651      	lsls	r1, r2, #25
 800220c:	d50d      	bpl.n	800222a <USB_DeactivateEndpoint+0x2e>
 800220e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002212:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8002216:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800221a:	0412      	lsls	r2, r2, #16
 800221c:	0c12      	lsrs	r2, r2, #16
 800221e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002222:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 8002226:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800222a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800222e:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8002232:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002236:	0412      	lsls	r2, r2, #16
 8002238:	0c12      	lsrs	r2, r2, #16
 800223a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800223e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002242:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8002246:	2000      	movs	r0, #0
 8002248:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800224a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800224e:	0452      	lsls	r2, r2, #17
 8002250:	d50d      	bpl.n	800226e <USB_DeactivateEndpoint+0x72>
 8002252:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002256:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 800225a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800225e:	0412      	lsls	r2, r2, #16
 8002260:	0c12      	lsrs	r2, r2, #16
 8002262:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8002266:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800226a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800226e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002272:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002276:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800227a:	e7dc      	b.n	8002236 <USB_DeactivateEndpoint+0x3a>
    if (ep->is_in == 0U)
 800227c:	2a00      	cmp	r2, #0
 800227e:	d14a      	bne.n	8002316 <USB_DeactivateEndpoint+0x11a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002280:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002284:	0451      	lsls	r1, r2, #17
 8002286:	d50d      	bpl.n	80022a4 <USB_DeactivateEndpoint+0xa8>
 8002288:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800228c:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8002290:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002294:	0412      	lsls	r2, r2, #16
 8002296:	0c12      	lsrs	r2, r2, #16
 8002298:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 800229c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80022a0:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80022a4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80022a8:	0652      	lsls	r2, r2, #25
 80022aa:	d50d      	bpl.n	80022c8 <USB_DeactivateEndpoint+0xcc>
 80022ac:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80022b0:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 80022b4:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80022b8:	0412      	lsls	r2, r2, #16
 80022ba:	0c12      	lsrs	r2, r2, #16
 80022bc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80022c0:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 80022c4:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80022c8:	f248 0180 	movw	r1, #32896	@ 0x8080
      PCD_TX_DTOG(USBx, ep->num);
 80022cc:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80022d0:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 80022d4:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80022d8:	0412      	lsls	r2, r2, #16
 80022da:	0c12      	lsrs	r2, r2, #16
 80022dc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80022e0:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 80022e4:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80022e8:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80022ec:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80022f0:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80022f4:	0412      	lsls	r2, r2, #16
 80022f6:	0c12      	lsrs	r2, r2, #16
 80022f8:	430a      	orrs	r2, r1
 80022fa:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80022fe:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002302:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8002306:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800230a:	0412      	lsls	r2, r2, #16
 800230c:	0c12      	lsrs	r2, r2, #16
 800230e:	4311      	orrs	r1, r2
 8002310:	f820 1023 	strh.w	r1, [r0, r3, lsl #2]
 8002314:	e797      	b.n	8002246 <USB_DeactivateEndpoint+0x4a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002316:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800231a:	0451      	lsls	r1, r2, #17
 800231c:	d50d      	bpl.n	800233a <USB_DeactivateEndpoint+0x13e>
 800231e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002322:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8002326:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800232a:	0412      	lsls	r2, r2, #16
 800232c:	0c12      	lsrs	r2, r2, #16
 800232e:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8002332:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002336:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800233a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800233e:	0652      	lsls	r2, r2, #25
 8002340:	d50d      	bpl.n	800235e <USB_DeactivateEndpoint+0x162>
 8002342:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002346:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 800234a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800234e:	0412      	lsls	r2, r2, #16
 8002350:	0c12      	lsrs	r2, r2, #16
 8002352:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002356:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 800235a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800235e:	f248 0180 	movw	r1, #32896	@ 0x8080
      PCD_RX_DTOG(USBx, ep->num);
 8002362:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002366:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 800236a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800236e:	0412      	lsls	r2, r2, #16
 8002370:	0c12      	lsrs	r2, r2, #16
 8002372:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8002376:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800237a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800237e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002382:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8002386:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800238a:	0412      	lsls	r2, r2, #16
 800238c:	0c12      	lsrs	r2, r2, #16
 800238e:	430a      	orrs	r2, r1
 8002390:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002394:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002398:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800239c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80023a0:	e7b3      	b.n	800230a <USB_DeactivateEndpoint+0x10e>

080023a2 <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 80023a2:	784b      	ldrb	r3, [r1, #1]
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80023a4:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 80023a6:	b18b      	cbz	r3, 80023cc <USB_EPSetStall+0x2a>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80023a8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80023ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80023b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80023b4:	041b      	lsls	r3, r3, #16
 80023b6:	0c1b      	lsrs	r3, r3, #16
 80023b8:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80023bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80023c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80023c4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 80023c8:	2000      	movs	r0, #0
 80023ca:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80023cc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80023d0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80023d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023d8:	041b      	lsls	r3, r3, #16
 80023da:	0c1b      	lsrs	r3, r3, #16
 80023dc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80023e0:	e7ec      	b.n	80023bc <USB_EPSetStall+0x1a>

080023e2 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 80023e2:	7b0b      	ldrb	r3, [r1, #12]
 80023e4:	bb3b      	cbnz	r3, 8002436 <USB_EPClearStall+0x54>
  {
    if (ep->is_in != 0U)
 80023e6:	784b      	ldrb	r3, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80023e8:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in != 0U)
 80023ea:	b333      	cbz	r3, 800243a <USB_EPClearStall+0x58>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80023ec:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80023f0:	065b      	lsls	r3, r3, #25
 80023f2:	d50d      	bpl.n	8002410 <USB_EPClearStall+0x2e>
 80023f4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80023f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80023fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002400:	041b      	lsls	r3, r3, #16
 8002402:	0c1b      	lsrs	r3, r3, #16
 8002404:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002408:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800240c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8002410:	78cb      	ldrb	r3, [r1, #3]
 8002412:	2b01      	cmp	r3, #1
 8002414:	d00f      	beq.n	8002436 <USB_EPClearStall+0x54>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002416:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800241a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800241e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002422:	041b      	lsls	r3, r3, #16
 8002424:	0c1b      	lsrs	r3, r3, #16
 8002426:	f083 0320 	eor.w	r3, r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800242a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800242e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002432:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 8002436:	2000      	movs	r0, #0
 8002438:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800243a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800243e:	045b      	lsls	r3, r3, #17
 8002440:	d50d      	bpl.n	800245e <USB_EPClearStall+0x7c>
 8002442:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002446:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800244a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800244e:	041b      	lsls	r3, r3, #16
 8002450:	0c1b      	lsrs	r3, r3, #16
 8002452:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002456:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800245a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800245e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002462:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002466:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800246a:	041b      	lsls	r3, r3, #16
 800246c:	0c1b      	lsrs	r3, r3, #16
 800246e:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 8002472:	e7da      	b.n	800242a <USB_EPClearStall+0x48>

08002474 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8002474:	b911      	cbnz	r1, 800247c <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8002476:	2380      	movs	r3, #128	@ 0x80
 8002478:	f8a0 304c 	strh.w	r3, [r0, #76]	@ 0x4c
  }

  return HAL_OK;
}
 800247c:	2000      	movs	r0, #0
 800247e:	4770      	bx	lr

08002480 <USB_DevConnect>:
/**
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
 8002480:	2000      	movs	r0, #0
 8002482:	4770      	bx	lr

08002484 <USB_DevDisconnect>:
/**
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
 8002484:	2000      	movs	r0, #0
 8002486:	4770      	bx	lr

08002488 <USB_ReadInterrupts>:
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8002488:	f8b0 0044 	ldrh.w	r0, [r0, #68]	@ 0x44
  return tmpreg;
}
 800248c:	b280      	uxth	r0, r0
 800248e:	4770      	bx	lr

08002490 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8002490:	2000      	movs	r0, #0
 8002492:	4770      	bx	lr

08002494 <USB_WritePMA>:
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002494:	eb00 0042 	add.w	r0, r0, r2, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8002498:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800249a:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800249e:	085b      	lsrs	r3, r3, #1
 80024a0:	eb00 0383 	add.w	r3, r0, r3, lsl #2

  for (count = n; count != 0U; count--)
 80024a4:	4283      	cmp	r3, r0
 80024a6:	d100      	bne.n	80024aa <USB_WritePMA+0x16>
#endif /* PMA_ACCESS */

    pBuf++;
    pBuf++;
  }
}
 80024a8:	4770      	bx	lr
    WrVal |= (uint16_t)pBuf[1] << 8;
 80024aa:	f831 2b02 	ldrh.w	r2, [r1], #2
    *pdwVal = (WrVal & 0xFFFFU);
 80024ae:	f820 2b04 	strh.w	r2, [r0], #4
  for (count = n; count != 0U; count--)
 80024b2:	e7f7      	b.n	80024a4 <USB_WritePMA+0x10>

080024b4 <USB_EPStartXfer>:
{
 80024b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (ep->is_in == 1U)
 80024b8:	784b      	ldrb	r3, [r1, #1]
{
 80024ba:	4604      	mov	r4, r0
  if (ep->is_in == 1U)
 80024bc:	2b01      	cmp	r3, #1
{
 80024be:	460d      	mov	r5, r1
    if (ep->doublebuffer == 0U)
 80024c0:	7b0a      	ldrb	r2, [r1, #12]
  if (ep->is_in == 1U)
 80024c2:	f040 8118 	bne.w	80026f6 <USB_EPStartXfer+0x242>
    if (ep->xfer_len > ep->maxpacket)
 80024c6:	f8d1 9010 	ldr.w	r9, [r1, #16]
 80024ca:	698f      	ldr	r7, [r1, #24]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80024cc:	6949      	ldr	r1, [r1, #20]
 80024ce:	454f      	cmp	r7, r9
 80024d0:	bf28      	it	cs
 80024d2:	464f      	movcs	r7, r9
    if (ep->doublebuffer == 0U)
 80024d4:	bb0a      	cbnz	r2, 800251a <USB_EPStartXfer+0x66>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80024d6:	b2bf      	uxth	r7, r7
 80024d8:	88ea      	ldrh	r2, [r5, #6]
 80024da:	463b      	mov	r3, r7
 80024dc:	f7ff ffda 	bl	8002494 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80024e0:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 80024e4:	7829      	ldrb	r1, [r5, #0]
 80024e6:	b280      	uxth	r0, r0
 80024e8:	f204 4204 	addw	r2, r4, #1028	@ 0x404
 80024ec:	0109      	lsls	r1, r1, #4
 80024ee:	4402      	add	r2, r0
 80024f0:	528f      	strh	r7, [r1, r2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80024f2:	782a      	ldrb	r2, [r5, #0]
 80024f4:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 80024f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80024fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002500:	041b      	lsls	r3, r3, #16
 8002502:	0c1b      	lsrs	r3, r3, #16
 8002504:	f083 0330 	eor.w	r3, r3, #48	@ 0x30
  return HAL_OK;
 8002508:	2000      	movs	r0, #0
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800250a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800250e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002512:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
}
 8002516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (ep->type == EP_TYPE_BULK)
 800251a:	78eb      	ldrb	r3, [r5, #3]
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800251c:	f895 e000 	ldrb.w	lr, [r5]
      if (ep->type == EP_TYPE_BULK)
 8002520:	2b02      	cmp	r3, #2
        if (ep->xfer_len_db > ep->maxpacket)
 8002522:	6a2e      	ldr	r6, [r5, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002524:	ea4f 1c0e 	mov.w	ip, lr, lsl #4
      if (ep->type == EP_TYPE_BULK)
 8002528:	f040 80d0 	bne.w	80026cc <USB_EPStartXfer+0x218>
        if (ep->xfer_len_db > ep->maxpacket)
 800252c:	45b1      	cmp	r9, r6
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800252e:	f830 202e 	ldrh.w	r2, [r0, lr, lsl #2]
        if (ep->xfer_len_db > ep->maxpacket)
 8002532:	f080 80b4 	bcs.w	800269e <USB_EPStartXfer+0x1ea>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8002536:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 800253a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800253e:	0412      	lsls	r2, r2, #16
 8002540:	0c12      	lsrs	r2, r2, #16
 8002542:	f442 4201 	orr.w	r2, r2, #33024	@ 0x8100
 8002546:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800254a:	f820 202e 	strh.w	r2, [r0, lr, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800254e:	f830 802e 	ldrh.w	r8, [r0, lr, lsl #2]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002552:	f8b0 e050 	ldrh.w	lr, [r0, #80]	@ 0x50
          ep->xfer_len_db -= len;
 8002556:	1bf6      	subs	r6, r6, r7
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002558:	f018 0840 	ands.w	r8, r8, #64	@ 0x40
          ep->xfer_len_db -= len;
 800255c:	622e      	str	r6, [r5, #32]
            ep->xfer_buff += len;
 800255e:	eb01 0a07 	add.w	sl, r1, r7
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8002562:	b2bb      	uxth	r3, r7
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002564:	fa1f fe8e 	uxth.w	lr, lr
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002568:	d04e      	beq.n	8002608 <USB_EPStartXfer+0x154>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800256a:	f200 420c 	addw	r2, r0, #1036	@ 0x40c
 800256e:	4472      	add	r2, lr
 8002570:	f822 300c 	strh.w	r3, [r2, ip]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002574:	896a      	ldrh	r2, [r5, #10]
 8002576:	f7ff ff8d 	bl	8002494 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 800257a:	45b1      	cmp	r9, r6
              ep->xfer_len_db -= len;
 800257c:	bf36      	itet	cc
 800257e:	1bf3      	subcc	r3, r6, r7
              ep->xfer_len_db = 0U;
 8002580:	2300      	movcs	r3, #0
 8002582:	463e      	movcc	r6, r7
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002584:	786a      	ldrb	r2, [r5, #1]
 8002586:	622b      	str	r3, [r5, #32]
            ep->xfer_buff += len;
 8002588:	f8c5 a014 	str.w	sl, [r5, #20]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800258c:	b2b3      	uxth	r3, r6
 800258e:	bb7a      	cbnz	r2, 80025f0 <USB_EPStartXfer+0x13c>
 8002590:	f8b4 2050 	ldrh.w	r2, [r4, #80]	@ 0x50
 8002594:	7828      	ldrb	r0, [r5, #0]
 8002596:	b292      	uxth	r2, r2
 8002598:	f204 4104 	addw	r1, r4, #1028	@ 0x404
 800259c:	0100      	lsls	r0, r0, #4
 800259e:	4411      	add	r1, r2
 80025a0:	5a42      	ldrh	r2, [r0, r1]
 80025a2:	2e3e      	cmp	r6, #62	@ 0x3e
 80025a4:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80025a8:	5242      	strh	r2, [r0, r1]
 80025aa:	d914      	bls.n	80025d6 <USB_EPStartXfer+0x122>
 80025ac:	5a42      	ldrh	r2, [r0, r1]
 80025ae:	0977      	lsrs	r7, r6, #5
 80025b0:	06f6      	lsls	r6, r6, #27
 80025b2:	bf08      	it	eq
 80025b4:	f107 37ff 	addeq.w	r7, r7, #4294967295
 80025b8:	b292      	uxth	r2, r2
 80025ba:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 80025be:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80025c2:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80025c6:	b292      	uxth	r2, r2
 80025c8:	5242      	strh	r2, [r0, r1]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80025ca:	892a      	ldrh	r2, [r5, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80025cc:	4651      	mov	r1, sl
 80025ce:	4620      	mov	r0, r4
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80025d0:	f7ff ff60 	bl	8002494 <USB_WritePMA>
 80025d4:	e78d      	b.n	80024f2 <USB_EPStartXfer+0x3e>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80025d6:	b90e      	cbnz	r6, 80025dc <USB_EPStartXfer+0x128>
 80025d8:	5a42      	ldrh	r2, [r0, r1]
 80025da:	e7f0      	b.n	80025be <USB_EPStartXfer+0x10a>
 80025dc:	07f2      	lsls	r2, r6, #31
 80025de:	5a42      	ldrh	r2, [r0, r1]
 80025e0:	ea4f 0756 	mov.w	r7, r6, lsr #1
 80025e4:	bf48      	it	mi
 80025e6:	3701      	addmi	r7, #1
 80025e8:	b292      	uxth	r2, r2
 80025ea:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 80025ee:	e7ea      	b.n	80025c6 <USB_EPStartXfer+0x112>
 80025f0:	2a01      	cmp	r2, #1
 80025f2:	d1ea      	bne.n	80025ca <USB_EPStartXfer+0x116>
 80025f4:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 80025f8:	7829      	ldrb	r1, [r5, #0]
 80025fa:	b280      	uxth	r0, r0
 80025fc:	f204 4204 	addw	r2, r4, #1028	@ 0x404
 8002600:	0109      	lsls	r1, r1, #4
 8002602:	4402      	add	r2, r0
 8002604:	528b      	strh	r3, [r1, r2]
 8002606:	e7e0      	b.n	80025ca <USB_EPStartXfer+0x116>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002608:	f200 4204 	addw	r2, r0, #1028	@ 0x404
 800260c:	4472      	add	r2, lr
 800260e:	f822 300c 	strh.w	r3, [r2, ip]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002612:	892a      	ldrh	r2, [r5, #8]
 8002614:	f7ff ff3e 	bl	8002494 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 8002618:	45b1      	cmp	r9, r6
              ep->xfer_len_db -= len;
 800261a:	bf36      	itet	cc
 800261c:	1bf3      	subcc	r3, r6, r7
              ep->xfer_len_db = 0U;
 800261e:	4643      	movcs	r3, r8
 8002620:	463e      	movcc	r6, r7
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002622:	786a      	ldrb	r2, [r5, #1]
 8002624:	622b      	str	r3, [r5, #32]
            ep->xfer_buff += len;
 8002626:	f8c5 a014 	str.w	sl, [r5, #20]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800262a:	b2b3      	uxth	r3, r6
 800262c:	bb5a      	cbnz	r2, 8002686 <USB_EPStartXfer+0x1d2>
 800262e:	f8b4 2050 	ldrh.w	r2, [r4, #80]	@ 0x50
 8002632:	7828      	ldrb	r0, [r5, #0]
 8002634:	b292      	uxth	r2, r2
 8002636:	f204 410c 	addw	r1, r4, #1036	@ 0x40c
 800263a:	0100      	lsls	r0, r0, #4
 800263c:	4411      	add	r1, r2
 800263e:	5a42      	ldrh	r2, [r0, r1]
 8002640:	2e3e      	cmp	r6, #62	@ 0x3e
 8002642:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002646:	5242      	strh	r2, [r0, r1]
 8002648:	d910      	bls.n	800266c <USB_EPStartXfer+0x1b8>
 800264a:	5a42      	ldrh	r2, [r0, r1]
 800264c:	0977      	lsrs	r7, r6, #5
 800264e:	06f6      	lsls	r6, r6, #27
 8002650:	bf08      	it	eq
 8002652:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8002656:	b292      	uxth	r2, r2
 8002658:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 800265c:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002660:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002664:	b292      	uxth	r2, r2
 8002666:	5242      	strh	r2, [r0, r1]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002668:	896a      	ldrh	r2, [r5, #10]
 800266a:	e7af      	b.n	80025cc <USB_EPStartXfer+0x118>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800266c:	b90e      	cbnz	r6, 8002672 <USB_EPStartXfer+0x1be>
 800266e:	5a42      	ldrh	r2, [r0, r1]
 8002670:	e7f4      	b.n	800265c <USB_EPStartXfer+0x1a8>
 8002672:	07f2      	lsls	r2, r6, #31
 8002674:	5a42      	ldrh	r2, [r0, r1]
 8002676:	ea4f 0756 	mov.w	r7, r6, lsr #1
 800267a:	bf48      	it	mi
 800267c:	3701      	addmi	r7, #1
 800267e:	b292      	uxth	r2, r2
 8002680:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 8002684:	e7ee      	b.n	8002664 <USB_EPStartXfer+0x1b0>
 8002686:	2a01      	cmp	r2, #1
 8002688:	d1ee      	bne.n	8002668 <USB_EPStartXfer+0x1b4>
 800268a:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 800268e:	7829      	ldrb	r1, [r5, #0]
 8002690:	b280      	uxth	r0, r0
 8002692:	f204 420c 	addw	r2, r4, #1036	@ 0x40c
 8002696:	0109      	lsls	r1, r1, #4
 8002698:	4402      	add	r2, r0
 800269a:	528b      	strh	r3, [r1, r2]
 800269c:	e7e4      	b.n	8002668 <USB_EPStartXfer+0x1b4>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800269e:	f422 42e2 	bic.w	r2, r2, #28928	@ 0x7100
 80026a2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80026a6:	0412      	lsls	r2, r2, #16
 80026a8:	0c12      	lsrs	r2, r2, #16
 80026aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80026ae:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80026b2:	f820 202e 	strh.w	r2, [r0, lr, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80026b6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 80026ba:	f200 4204 	addw	r2, r0, #1028	@ 0x404
 80026be:	b29b      	uxth	r3, r3
 80026c0:	441a      	add	r2, r3
 80026c2:	b2b3      	uxth	r3, r6
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80026c4:	f822 300c 	strh.w	r3, [r2, ip]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80026c8:	892a      	ldrh	r2, [r5, #8]
 80026ca:	e781      	b.n	80025d0 <USB_EPStartXfer+0x11c>
        ep->xfer_len_db -= len;
 80026cc:	1bf6      	subs	r6, r6, r7
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80026ce:	f830 202e 	ldrh.w	r2, [r0, lr, lsl #2]
        ep->xfer_len_db -= len;
 80026d2:	622e      	str	r6, [r5, #32]
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80026d4:	f8b0 6050 	ldrh.w	r6, [r0, #80]	@ 0x50
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80026d8:	b2bb      	uxth	r3, r7
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80026da:	0657      	lsls	r7, r2, #25
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80026dc:	b2b6      	uxth	r6, r6
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80026de:	d506      	bpl.n	80026ee <USB_EPStartXfer+0x23a>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80026e0:	f200 420c 	addw	r2, r0, #1036	@ 0x40c
 80026e4:	4432      	add	r2, r6
 80026e6:	f822 300c 	strh.w	r3, [r2, ip]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80026ea:	896a      	ldrh	r2, [r5, #10]
 80026ec:	e770      	b.n	80025d0 <USB_EPStartXfer+0x11c>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80026ee:	f200 4204 	addw	r2, r0, #1028	@ 0x404
 80026f2:	4432      	add	r2, r6
 80026f4:	e7e6      	b.n	80026c4 <USB_EPStartXfer+0x210>
    if (ep->doublebuffer == 0U)
 80026f6:	2a00      	cmp	r2, #0
 80026f8:	d13b      	bne.n	8002772 <USB_EPStartXfer+0x2be>
      if (ep->xfer_len > ep->maxpacket)
 80026fa:	698b      	ldr	r3, [r1, #24]
 80026fc:	6909      	ldr	r1, [r1, #16]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80026fe:	f8b0 0050 	ldrh.w	r0, [r0, #80]	@ 0x50
      if (ep->xfer_len > ep->maxpacket)
 8002702:	428b      	cmp	r3, r1
        ep->xfer_len -= len;
 8002704:	bf84      	itt	hi
 8002706:	1a5a      	subhi	r2, r3, r1
 8002708:	460b      	movhi	r3, r1
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800270a:	7829      	ldrb	r1, [r5, #0]
 800270c:	61aa      	str	r2, [r5, #24]
 800270e:	b280      	uxth	r0, r0
 8002710:	f204 420c 	addw	r2, r4, #1036	@ 0x40c
 8002714:	0109      	lsls	r1, r1, #4
 8002716:	4402      	add	r2, r0
 8002718:	5a88      	ldrh	r0, [r1, r2]
 800271a:	2b3e      	cmp	r3, #62	@ 0x3e
 800271c:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8002720:	5288      	strh	r0, [r1, r2]
 8002722:	d91a      	bls.n	800275a <USB_EPStartXfer+0x2a6>
 8002724:	0958      	lsrs	r0, r3, #5
 8002726:	06de      	lsls	r6, r3, #27
 8002728:	5a8b      	ldrh	r3, [r1, r2]
 800272a:	bf08      	it	eq
 800272c:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8002730:	b29b      	uxth	r3, r3
 8002732:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 8002736:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800273a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800273e:	b29b      	uxth	r3, r3
 8002740:	528b      	strh	r3, [r1, r2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002742:	782a      	ldrb	r2, [r5, #0]
 8002744:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8002748:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800274c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002750:	041b      	lsls	r3, r3, #16
 8002752:	0c1b      	lsrs	r3, r3, #16
 8002754:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 8002758:	e6d6      	b.n	8002508 <USB_EPStartXfer+0x54>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800275a:	b90b      	cbnz	r3, 8002760 <USB_EPStartXfer+0x2ac>
 800275c:	5a8b      	ldrh	r3, [r1, r2]
 800275e:	e7ea      	b.n	8002736 <USB_EPStartXfer+0x282>
 8002760:	0858      	lsrs	r0, r3, #1
 8002762:	07db      	lsls	r3, r3, #31
 8002764:	5a8b      	ldrh	r3, [r1, r2]
 8002766:	bf48      	it	mi
 8002768:	3001      	addmi	r0, #1
 800276a:	b29b      	uxth	r3, r3
 800276c:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 8002770:	e7e5      	b.n	800273e <USB_EPStartXfer+0x28a>
      if (ep->type == EP_TYPE_BULK)
 8002772:	78ca      	ldrb	r2, [r1, #3]
 8002774:	2a02      	cmp	r2, #2
 8002776:	d170      	bne.n	800285a <USB_EPStartXfer+0x3a6>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8002778:	2b00      	cmp	r3, #0
 800277a:	d138      	bne.n	80027ee <USB_EPStartXfer+0x33a>
 800277c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8002780:	780b      	ldrb	r3, [r1, #0]
 8002782:	b292      	uxth	r2, r2
 8002784:	f200 4004 	addw	r0, r0, #1028	@ 0x404
 8002788:	011b      	lsls	r3, r3, #4
 800278a:	4410      	add	r0, r2
 800278c:	5ac2      	ldrh	r2, [r0, r3]
 800278e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002792:	52c2      	strh	r2, [r0, r3]
 8002794:	690a      	ldr	r2, [r1, #16]
 8002796:	2a3e      	cmp	r2, #62	@ 0x3e
 8002798:	d946      	bls.n	8002828 <USB_EPStartXfer+0x374>
 800279a:	5ac1      	ldrh	r1, [r0, r3]
 800279c:	0956      	lsrs	r6, r2, #5
 800279e:	06d7      	lsls	r7, r2, #27
 80027a0:	bf08      	it	eq
 80027a2:	f106 36ff 	addeq.w	r6, r6, #4294967295
 80027a6:	b289      	uxth	r1, r1
 80027a8:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 80027ac:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80027b0:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80027b4:	b289      	uxth	r1, r1
 80027b6:	52c1      	strh	r1, [r0, r3]
 80027b8:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 80027bc:	f204 410c 	addw	r1, r4, #1036	@ 0x40c
 80027c0:	b280      	uxth	r0, r0
 80027c2:	4401      	add	r1, r0
 80027c4:	5ac8      	ldrh	r0, [r1, r3]
 80027c6:	2a3e      	cmp	r2, #62	@ 0x3e
 80027c8:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80027cc:	52c8      	strh	r0, [r1, r3]
 80027ce:	d938      	bls.n	8002842 <USB_EPStartXfer+0x38e>
 80027d0:	0950      	lsrs	r0, r2, #5
 80027d2:	06d7      	lsls	r7, r2, #27
 80027d4:	5aca      	ldrh	r2, [r1, r3]
 80027d6:	bf08      	it	eq
 80027d8:	f100 30ff 	addeq.w	r0, r0, #4294967295
 80027dc:	b292      	uxth	r2, r2
 80027de:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 80027e2:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80027e6:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80027ea:	b292      	uxth	r2, r2
 80027ec:	52ca      	strh	r2, [r1, r3]
        if (ep->xfer_count != 0U)
 80027ee:	69eb      	ldr	r3, [r5, #28]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d0a6      	beq.n	8002742 <USB_EPStartXfer+0x28e>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80027f4:	f244 0340 	movw	r3, #16448	@ 0x4040
 80027f8:	782a      	ldrb	r2, [r5, #0]
 80027fa:	f834 1022 	ldrh.w	r1, [r4, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80027fe:	ea03 0001 	and.w	r0, r3, r1
 8002802:	438b      	bics	r3, r1
 8002804:	d001      	beq.n	800280a <USB_EPStartXfer+0x356>
 8002806:	2800      	cmp	r0, #0
 8002808:	d19b      	bne.n	8002742 <USB_EPStartXfer+0x28e>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800280a:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 800280e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002812:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002816:	041b      	lsls	r3, r3, #16
 8002818:	0c1b      	lsrs	r3, r3, #16
 800281a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800281e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002822:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
 8002826:	e78c      	b.n	8002742 <USB_EPStartXfer+0x28e>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8002828:	b90a      	cbnz	r2, 800282e <USB_EPStartXfer+0x37a>
 800282a:	5ac1      	ldrh	r1, [r0, r3]
 800282c:	e7be      	b.n	80027ac <USB_EPStartXfer+0x2f8>
 800282e:	07d1      	lsls	r1, r2, #31
 8002830:	5ac1      	ldrh	r1, [r0, r3]
 8002832:	ea4f 0652 	mov.w	r6, r2, lsr #1
 8002836:	bf48      	it	mi
 8002838:	3601      	addmi	r6, #1
 800283a:	b289      	uxth	r1, r1
 800283c:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8002840:	e7b8      	b.n	80027b4 <USB_EPStartXfer+0x300>
 8002842:	b90a      	cbnz	r2, 8002848 <USB_EPStartXfer+0x394>
 8002844:	5aca      	ldrh	r2, [r1, r3]
 8002846:	e7cc      	b.n	80027e2 <USB_EPStartXfer+0x32e>
 8002848:	0850      	lsrs	r0, r2, #1
 800284a:	07d6      	lsls	r6, r2, #31
 800284c:	5aca      	ldrh	r2, [r1, r3]
 800284e:	bf48      	it	mi
 8002850:	3001      	addmi	r0, #1
 8002852:	b292      	uxth	r2, r2
 8002854:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 8002858:	e7c7      	b.n	80027ea <USB_EPStartXfer+0x336>
      else if (ep->type == EP_TYPE_ISOC)
 800285a:	2a01      	cmp	r2, #1
 800285c:	d15d      	bne.n	800291a <USB_EPStartXfer+0x466>
        if (ep->xfer_len > ep->maxpacket)
 800285e:	698a      	ldr	r2, [r1, #24]
 8002860:	6909      	ldr	r1, [r1, #16]
 8002862:	428a      	cmp	r2, r1
          ep->xfer_len = 0U;
 8002864:	bf94      	ite	ls
 8002866:	2000      	movls	r0, #0
          ep->xfer_len -= len;
 8002868:	1a50      	subhi	r0, r2, r1
 800286a:	61a8      	str	r0, [r5, #24]
 800286c:	bf88      	it	hi
 800286e:	460a      	movhi	r2, r1
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8002870:	2b00      	cmp	r3, #0
 8002872:	f47f af66 	bne.w	8002742 <USB_EPStartXfer+0x28e>
 8002876:	f8b4 1050 	ldrh.w	r1, [r4, #80]	@ 0x50
 800287a:	782b      	ldrb	r3, [r5, #0]
 800287c:	b289      	uxth	r1, r1
 800287e:	f204 4004 	addw	r0, r4, #1028	@ 0x404
 8002882:	011b      	lsls	r3, r3, #4
 8002884:	4408      	add	r0, r1
 8002886:	5ac1      	ldrh	r1, [r0, r3]
 8002888:	2a3e      	cmp	r2, #62	@ 0x3e
 800288a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800288e:	52c1      	strh	r1, [r0, r3]
 8002890:	d92b      	bls.n	80028ea <USB_EPStartXfer+0x436>
 8002892:	06d1      	lsls	r1, r2, #27
 8002894:	5ac1      	ldrh	r1, [r0, r3]
 8002896:	ea4f 1652 	mov.w	r6, r2, lsr #5
 800289a:	bf08      	it	eq
 800289c:	f106 36ff 	addeq.w	r6, r6, #4294967295
 80028a0:	b289      	uxth	r1, r1
 80028a2:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 80028a6:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80028aa:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80028ae:	b289      	uxth	r1, r1
 80028b0:	52c1      	strh	r1, [r0, r3]
 80028b2:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 80028b6:	f204 410c 	addw	r1, r4, #1036	@ 0x40c
 80028ba:	b280      	uxth	r0, r0
 80028bc:	4401      	add	r1, r0
 80028be:	5ac8      	ldrh	r0, [r1, r3]
 80028c0:	2a3e      	cmp	r2, #62	@ 0x3e
 80028c2:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80028c6:	52c8      	strh	r0, [r1, r3]
 80028c8:	d91b      	bls.n	8002902 <USB_EPStartXfer+0x44e>
 80028ca:	0950      	lsrs	r0, r2, #5
 80028cc:	06d6      	lsls	r6, r2, #27
 80028ce:	5aca      	ldrh	r2, [r1, r3]
 80028d0:	bf08      	it	eq
 80028d2:	f100 30ff 	addeq.w	r0, r0, #4294967295
 80028d6:	b292      	uxth	r2, r2
 80028d8:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 80028dc:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80028e0:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80028e4:	b292      	uxth	r2, r2
 80028e6:	52ca      	strh	r2, [r1, r3]
 80028e8:	e72b      	b.n	8002742 <USB_EPStartXfer+0x28e>
 80028ea:	b90a      	cbnz	r2, 80028f0 <USB_EPStartXfer+0x43c>
 80028ec:	5ac1      	ldrh	r1, [r0, r3]
 80028ee:	e7da      	b.n	80028a6 <USB_EPStartXfer+0x3f2>
 80028f0:	5ac1      	ldrh	r1, [r0, r3]
 80028f2:	0856      	lsrs	r6, r2, #1
 80028f4:	07d7      	lsls	r7, r2, #31
 80028f6:	bf48      	it	mi
 80028f8:	3601      	addmi	r6, #1
 80028fa:	b289      	uxth	r1, r1
 80028fc:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8002900:	e7d5      	b.n	80028ae <USB_EPStartXfer+0x3fa>
 8002902:	b90a      	cbnz	r2, 8002908 <USB_EPStartXfer+0x454>
 8002904:	5aca      	ldrh	r2, [r1, r3]
 8002906:	e7e9      	b.n	80028dc <USB_EPStartXfer+0x428>
 8002908:	0850      	lsrs	r0, r2, #1
 800290a:	07d2      	lsls	r2, r2, #31
 800290c:	5aca      	ldrh	r2, [r1, r3]
 800290e:	bf48      	it	mi
 8002910:	3001      	addmi	r0, #1
 8002912:	b292      	uxth	r2, r2
 8002914:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 8002918:	e7e4      	b.n	80028e4 <USB_EPStartXfer+0x430>
        return HAL_ERROR;
 800291a:	2001      	movs	r0, #1
 800291c:	e5fb      	b.n	8002516 <USB_EPStartXfer+0x62>

0800291e <USB_ReadPMA>:
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800291e:	eb00 0042 	add.w	r0, r0, r2, lsl #1
{
 8002922:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002924:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
  uint32_t n = (uint32_t)wNBytes >> 1;
 8002928:	085d      	lsrs	r5, r3, #1

  for (count = n; count != 0U; count--)
 800292a:	460c      	mov	r4, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800292c:	4607      	mov	r7, r0
  for (count = n; count != 0U; count--)
 800292e:	462e      	mov	r6, r5
 8002930:	3402      	adds	r4, #2
 8002932:	b936      	cbnz	r6, 8002942 <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8002934:	07db      	lsls	r3, r3, #31
  {
    RdVal = *pdwVal;
 8002936:	bf44      	itt	mi
 8002938:	f830 3025 	ldrhmi.w	r3, [r0, r5, lsl #2]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800293c:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
  }
}
 8002940:	bdf0      	pop	{r4, r5, r6, r7, pc}
    RdVal = *(__IO uint16_t *)pdwVal;
 8002942:	f837 2b04 	ldrh.w	r2, [r7], #4
  for (count = n; count != 0U; count--)
 8002946:	3e01      	subs	r6, #1
    RdVal = *(__IO uint16_t *)pdwVal;
 8002948:	b292      	uxth	r2, r2
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800294a:	f804 2c02 	strb.w	r2, [r4, #-2]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800294e:	0a12      	lsrs	r2, r2, #8
 8002950:	f804 2c01 	strb.w	r2, [r4, #-1]
  for (count = n; count != 0U; count--)
 8002954:	e7ec      	b.n	8002930 <USB_ReadPMA+0x12>

08002956 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8002956:	f8d0 32bc 	ldr.w	r3, [r0, #700]	@ 0x2bc
{
 800295a:	b510      	push	{r4, lr}
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800295c:	b16b      	cbz	r3, 800297a <USBD_CDC_EP0_RxReady+0x24>
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800295e:	f8d0 42b8 	ldr.w	r4, [r0, #696]	@ 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8002962:	f894 0200 	ldrb.w	r0, [r4, #512]	@ 0x200
 8002966:	28ff      	cmp	r0, #255	@ 0xff
 8002968:	d007      	beq.n	800297a <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	4621      	mov	r1, r4
 800296e:	f894 2201 	ldrb.w	r2, [r4, #513]	@ 0x201
 8002972:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8002974:	23ff      	movs	r3, #255	@ 0xff
 8002976:	f884 3200 	strb.w	r3, [r4, #512]	@ 0x200

  }
  return USBD_OK;
}
 800297a:	2000      	movs	r0, #0
 800297c:	bd10      	pop	{r4, pc}
	...

08002980 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8002980:	2343      	movs	r3, #67	@ 0x43
 8002982:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8002984:	4800      	ldr	r0, [pc, #0]	@ (8002988 <USBD_CDC_GetFSCfgDesc+0x8>)
 8002986:	4770      	bx	lr
 8002988:	20000064 	.word	0x20000064

0800298c <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800298c:	2343      	movs	r3, #67	@ 0x43
 800298e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8002990:	4800      	ldr	r0, [pc, #0]	@ (8002994 <USBD_CDC_GetHSCfgDesc+0x8>)
 8002992:	4770      	bx	lr
 8002994:	200000a8 	.word	0x200000a8

08002998 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8002998:	2343      	movs	r3, #67	@ 0x43
 800299a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 800299c:	4800      	ldr	r0, [pc, #0]	@ (80029a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 800299e:	4770      	bx	lr
 80029a0:	20000020 	.word	0x20000020

080029a4 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80029a4:	230a      	movs	r3, #10
 80029a6:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 80029a8:	4800      	ldr	r0, [pc, #0]	@ (80029ac <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 80029aa:	4770      	bx	lr
 80029ac:	20000124 	.word	0x20000124

080029b0 <USBD_CDC_DataOut>:
{
 80029b0:	b538      	push	{r3, r4, r5, lr}
 80029b2:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80029b4:	f8d0 52b8 	ldr.w	r5, [r0, #696]	@ 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80029b8:	f000 fe9a 	bl	80036f0 <USBD_LL_GetRxDataSize>
  if (pdev->pClassData != NULL)
 80029bc:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80029c0:	f8c5 020c 	str.w	r0, [r5, #524]	@ 0x20c
  if (pdev->pClassData != NULL)
 80029c4:	b14b      	cbz	r3, 80029da <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80029c6:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
 80029ca:	f8d5 0204 	ldr.w	r0, [r5, #516]	@ 0x204
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	f505 7103 	add.w	r1, r5, #524	@ 0x20c
 80029d4:	4798      	blx	r3
    return USBD_OK;
 80029d6:	2000      	movs	r0, #0
}
 80029d8:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 80029da:	2002      	movs	r0, #2
 80029dc:	e7fc      	b.n	80029d8 <USBD_CDC_DataOut+0x28>

080029de <USBD_CDC_DataIn>:
{
 80029de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80029e0:	f8d0 62b8 	ldr.w	r6, [r0, #696]	@ 0x2b8
  if (pdev->pClassData != NULL)
 80029e4:	b1ce      	cbz	r6, 8002a1a <USBD_CDC_DataIn+0x3c>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80029e6:	2214      	movs	r2, #20
 80029e8:	fb02 0201 	mla	r2, r2, r1, r0
 80029ec:	69d3      	ldr	r3, [r2, #28]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80029ee:	f8d0 52c0 	ldr.w	r5, [r0, #704]	@ 0x2c0
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80029f2:	b173      	cbz	r3, 8002a12 <USBD_CDC_DataIn+0x34>
 80029f4:	2728      	movs	r7, #40	@ 0x28
 80029f6:	fb07 5401 	mla	r4, r7, r1, r5
 80029fa:	6a24      	ldr	r4, [r4, #32]
 80029fc:	fbb3 f5f4 	udiv	r5, r3, r4
 8002a00:	fb04 3315 	mls	r3, r4, r5, r3
 8002a04:	b92b      	cbnz	r3, 8002a12 <USBD_CDC_DataIn+0x34>
      pdev->ep_in[epnum].total_length = 0U;
 8002a06:	61d3      	str	r3, [r2, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8002a08:	461a      	mov	r2, r3
 8002a0a:	f000 fe5f 	bl	80036cc <USBD_LL_Transmit>
    return USBD_OK;
 8002a0e:	2000      	movs	r0, #0
}
 8002a10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 8002a12:	2300      	movs	r3, #0
 8002a14:	f8c6 3214 	str.w	r3, [r6, #532]	@ 0x214
 8002a18:	e7f9      	b.n	8002a0e <USBD_CDC_DataIn+0x30>
    return USBD_FAIL;
 8002a1a:	2002      	movs	r0, #2
 8002a1c:	e7f8      	b.n	8002a10 <USBD_CDC_DataIn+0x32>

08002a1e <USBD_CDC_Setup>:
  uint8_t ifalt = 0U;
 8002a1e:	2300      	movs	r3, #0
{
 8002a20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002a22:	780f      	ldrb	r7, [r1, #0]
  uint8_t ifalt = 0U;
 8002a24:	f88d 3005 	strb.w	r3, [sp, #5]
  uint16_t status_info = 0U;
 8002a28:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002a2c:	f017 0360 	ands.w	r3, r7, #96	@ 0x60
{
 8002a30:	4604      	mov	r4, r0
 8002a32:	460d      	mov	r5, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8002a34:	f8d0 62b8 	ldr.w	r6, [r0, #696]	@ 0x2b8
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002a38:	d022      	beq.n	8002a80 <USBD_CDC_Setup+0x62>
 8002a3a:	2b20      	cmp	r3, #32
 8002a3c:	d13a      	bne.n	8002ab4 <USBD_CDC_Setup+0x96>
      if (req->wLength)
 8002a3e:	88ca      	ldrh	r2, [r1, #6]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8002a40:	784b      	ldrb	r3, [r1, #1]
      if (req->wLength)
 8002a42:	b1ba      	cbz	r2, 8002a74 <USBD_CDC_Setup+0x56>
        if (req->bmRequest & 0x80U)
 8002a44:	0639      	lsls	r1, r7, #24
 8002a46:	d50b      	bpl.n	8002a60 <USBD_CDC_Setup+0x42>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8002a48:	f8d0 12bc 	ldr.w	r1, [r0, #700]	@ 0x2bc
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	688f      	ldr	r7, [r1, #8]
 8002a50:	4631      	mov	r1, r6
 8002a52:	47b8      	blx	r7
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8002a54:	4631      	mov	r1, r6
 8002a56:	4620      	mov	r0, r4
 8002a58:	88ea      	ldrh	r2, [r5, #6]
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8002a5a:	f000 fc29 	bl	80032b0 <USBD_CtlSendData>
 8002a5e:	e006      	b.n	8002a6e <USBD_CDC_Setup+0x50>
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8002a60:	4631      	mov	r1, r6
          hcdc->CmdOpCode = req->bRequest;
 8002a62:	f886 3200 	strb.w	r3, [r6, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8002a66:	f886 2201 	strb.w	r2, [r6, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8002a6a:	f000 fc36 	bl	80032da <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 8002a6e:	2000      	movs	r0, #0
}
 8002a70:	b003      	add	sp, #12
 8002a72:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8002a74:	f8d0 02bc 	ldr.w	r0, [r0, #700]	@ 0x2bc
 8002a78:	6884      	ldr	r4, [r0, #8]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	47a0      	blx	r4
 8002a7e:	e7f6      	b.n	8002a6e <USBD_CDC_Setup+0x50>
      switch (req->bRequest)
 8002a80:	784b      	ldrb	r3, [r1, #1]
 8002a82:	2b0a      	cmp	r3, #10
 8002a84:	d00a      	beq.n	8002a9c <USBD_CDC_Setup+0x7e>
 8002a86:	2b0b      	cmp	r3, #11
 8002a88:	d010      	beq.n	8002aac <USBD_CDC_Setup+0x8e>
 8002a8a:	b99b      	cbnz	r3, 8002ab4 <USBD_CDC_Setup+0x96>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002a8c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8002a90:	2b03      	cmp	r3, #3
 8002a92:	d10f      	bne.n	8002ab4 <USBD_CDC_Setup+0x96>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8002a94:	2202      	movs	r2, #2
 8002a96:	f10d 0106 	add.w	r1, sp, #6
 8002a9a:	e7de      	b.n	8002a5a <USBD_CDC_Setup+0x3c>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002a9c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8002aa0:	2b03      	cmp	r3, #3
 8002aa2:	d107      	bne.n	8002ab4 <USBD_CDC_Setup+0x96>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	f10d 0105 	add.w	r1, sp, #5
 8002aaa:	e7d6      	b.n	8002a5a <USBD_CDC_Setup+0x3c>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8002aac:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8002ab0:	2b03      	cmp	r3, #3
 8002ab2:	d0dc      	beq.n	8002a6e <USBD_CDC_Setup+0x50>
          USBD_CtlError(pdev, req);
 8002ab4:	4620      	mov	r0, r4
 8002ab6:	4629      	mov	r1, r5
 8002ab8:	f000 fbd3 	bl	8003262 <USBD_CtlError>
            ret = USBD_FAIL;
 8002abc:	2002      	movs	r0, #2
 8002abe:	e7d7      	b.n	8002a70 <USBD_CDC_Setup+0x52>

08002ac0 <USBD_CDC_DeInit>:
{
 8002ac0:	b538      	push	{r3, r4, r5, lr}
 8002ac2:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8002ac4:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8002ac6:	2181      	movs	r1, #129	@ 0x81
 8002ac8:	f000 fdcb 	bl	8003662 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8002acc:	2101      	movs	r1, #1
 8002ace:	4620      	mov	r0, r4
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8002ad0:	62e5      	str	r5, [r4, #44]	@ 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8002ad2:	f000 fdc6 	bl	8003662 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8002ad6:	2182      	movs	r1, #130	@ 0x82
 8002ad8:	4620      	mov	r0, r4
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8002ada:	f8c4 516c 	str.w	r5, [r4, #364]	@ 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8002ade:	f000 fdc0 	bl	8003662 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 8002ae2:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8002ae6:	6425      	str	r5, [r4, #64]	@ 0x40
  if (pdev->pClassData != NULL)
 8002ae8:	b14b      	cbz	r3, 8002afe <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8002aea:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8002af2:	f8d4 02b8 	ldr.w	r0, [r4, #696]	@ 0x2b8
 8002af6:	f000 fe03 	bl	8003700 <USBD_static_free>
    pdev->pClassData = NULL;
 8002afa:	f8c4 52b8 	str.w	r5, [r4, #696]	@ 0x2b8
}
 8002afe:	2000      	movs	r0, #0
 8002b00:	bd38      	pop	{r3, r4, r5, pc}

08002b02 <USBD_CDC_Init>:
{
 8002b02:	b570      	push	{r4, r5, r6, lr}
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002b04:	7c03      	ldrb	r3, [r0, #16]
{
 8002b06:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002b08:	bba3      	cbnz	r3, 8002b74 <USBD_CDC_Init+0x72>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8002b0a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002b0e:	2181      	movs	r1, #129	@ 0x81
 8002b10:	2202      	movs	r2, #2
 8002b12:	f000 fd9a 	bl	800364a <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8002b16:	2101      	movs	r1, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8002b18:	f44f 7300 	mov.w	r3, #512	@ 0x200
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8002b1c:	62e1      	str	r1, [r4, #44]	@ 0x2c
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8002b1e:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8002b20:	2202      	movs	r2, #2
 8002b22:	4620      	mov	r0, r4
 8002b24:	f000 fd91 	bl	800364a <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8002b28:	2308      	movs	r3, #8
 8002b2a:	2203      	movs	r2, #3
 8002b2c:	2182      	movs	r1, #130	@ 0x82
 8002b2e:	4620      	mov	r0, r4
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8002b30:	f8c4 516c 	str.w	r5, [r4, #364]	@ 0x16c
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8002b34:	f000 fd89 	bl	800364a <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8002b38:	f44f 7007 	mov.w	r0, #540	@ 0x21c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8002b3c:	6425      	str	r5, [r4, #64]	@ 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8002b3e:	f000 fddb 	bl	80036f8 <USBD_static_malloc>
 8002b42:	4606      	mov	r6, r0
 8002b44:	f8c4 02b8 	str.w	r0, [r4, #696]	@ 0x2b8
  if (pdev->pClassData == NULL)
 8002b48:	b1f8      	cbz	r0, 8002b8a <USBD_CDC_Init+0x88>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8002b4a:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4798      	blx	r3
    hcdc->TxState = 0U;
 8002b52:	2300      	movs	r3, #0
 8002b54:	f8c6 3214 	str.w	r3, [r6, #532]	@ 0x214
    hcdc->RxState = 0U;
 8002b58:	f8c6 3218 	str.w	r3, [r6, #536]	@ 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002b5c:	7c23      	ldrb	r3, [r4, #16]
 8002b5e:	b993      	cbnz	r3, 8002b86 <USBD_CDC_Init+0x84>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8002b60:	f44f 7300 	mov.w	r3, #512	@ 0x200
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8002b64:	4629      	mov	r1, r5
 8002b66:	4620      	mov	r0, r4
 8002b68:	f8d6 2204 	ldr.w	r2, [r6, #516]	@ 0x204
 8002b6c:	f000 fdb7 	bl	80036de <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8002b70:	2000      	movs	r0, #0
}
 8002b72:	bd70      	pop	{r4, r5, r6, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8002b74:	2340      	movs	r3, #64	@ 0x40
 8002b76:	2181      	movs	r1, #129	@ 0x81
 8002b78:	2202      	movs	r2, #2
 8002b7a:	f000 fd66 	bl	800364a <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8002b7e:	2101      	movs	r1, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8002b80:	2340      	movs	r3, #64	@ 0x40
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8002b82:	62e1      	str	r1, [r4, #44]	@ 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8002b84:	e7cb      	b.n	8002b1e <USBD_CDC_Init+0x1c>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8002b86:	2340      	movs	r3, #64	@ 0x40
 8002b88:	e7ec      	b.n	8002b64 <USBD_CDC_Init+0x62>
    ret = 1U;
 8002b8a:	4628      	mov	r0, r5
 8002b8c:	e7f1      	b.n	8002b72 <USBD_CDC_Init+0x70>

08002b8e <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 8002b8e:	b119      	cbz	r1, 8002b98 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 8002b90:	f8c0 12bc 	str.w	r1, [r0, #700]	@ 0x2bc
    ret = USBD_OK;
 8002b94:	2000      	movs	r0, #0
 8002b96:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8002b98:	2002      	movs	r0, #2
  }

  return ret;
}
 8002b9a:	4770      	bx	lr

08002b9c <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8002b9c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 8002ba0:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 8002ba2:	f8c3 1208 	str.w	r1, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8002ba6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
}
 8002baa:	4770      	bx	lr

08002bac <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 8002bac:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8

  return USBD_OK;
}
 8002bb0:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8002bb2:	f8c3 1204 	str.w	r1, [r3, #516]	@ 0x204
}
 8002bb6:	4770      	bx	lr

08002bb8 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8002bb8:	f8d0 22b8 	ldr.w	r2, [r0, #696]	@ 0x2b8
{
 8002bbc:	b510      	push	{r4, lr}

  if (pdev->pClassData != NULL)
 8002bbe:	b182      	cbz	r2, 8002be2 <USBD_CDC_TransmitPacket+0x2a>
  {
    if (hcdc->TxState == 0U)
 8002bc0:	f8d2 4214 	ldr.w	r4, [r2, #532]	@ 0x214
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	b974      	cbnz	r4, 8002be6 <USBD_CDC_TransmitPacket+0x2e>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8002bc8:	f8c2 3214 	str.w	r3, [r2, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8002bcc:	f8d2 3210 	ldr.w	r3, [r2, #528]	@ 0x210

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8002bd0:	2181      	movs	r1, #129	@ 0x81
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8002bd2:	6303      	str	r3, [r0, #48]	@ 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8002bd4:	f8d2 2208 	ldr.w	r2, [r2, #520]	@ 0x208
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	f000 fd77 	bl	80036cc <USBD_LL_Transmit>
                       (uint16_t)hcdc->TxLength);

      return USBD_OK;
 8002bde:	4620      	mov	r0, r4
  }
  else
  {
    return USBD_FAIL;
  }
}
 8002be0:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8002be2:	2002      	movs	r0, #2
 8002be4:	e7fc      	b.n	8002be0 <USBD_CDC_TransmitPacket+0x28>
      return USBD_BUSY;
 8002be6:	4618      	mov	r0, r3
 8002be8:	e7fa      	b.n	8002be0 <USBD_CDC_TransmitPacket+0x28>

08002bea <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8002bea:	f8d0 22b8 	ldr.w	r2, [r0, #696]	@ 0x2b8
{
 8002bee:	b508      	push	{r3, lr}

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8002bf0:	b162      	cbz	r2, 8002c0c <USBD_CDC_ReceivePacket+0x22>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002bf2:	7c03      	ldrb	r3, [r0, #16]
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8002bf4:	f8d2 2204 	ldr.w	r2, [r2, #516]	@ 0x204
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002bf8:	b933      	cbnz	r3, 8002c08 <USBD_CDC_ReceivePacket+0x1e>
      USBD_LL_PrepareReceive(pdev,
 8002bfa:	f44f 7300 	mov.w	r3, #512	@ 0x200
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8002bfe:	2101      	movs	r1, #1
 8002c00:	f000 fd6d 	bl	80036de <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8002c04:	2000      	movs	r0, #0
  }
  else
  {
    return USBD_FAIL;
  }
}
 8002c06:	bd08      	pop	{r3, pc}
      USBD_LL_PrepareReceive(pdev,
 8002c08:	2340      	movs	r3, #64	@ 0x40
 8002c0a:	e7f8      	b.n	8002bfe <USBD_CDC_ReceivePacket+0x14>
    return USBD_FAIL;
 8002c0c:	2002      	movs	r0, #2
 8002c0e:	e7fa      	b.n	8002c06 <USBD_CDC_ReceivePacket+0x1c>

08002c10 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8002c10:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8002c12:	b180      	cbz	r0, 8002c36 <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8002c14:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8002c18:	b113      	cbz	r3, 8002c20 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	f8c0 32b4 	str.w	r3, [r0, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8002c20:	b109      	cbz	r1, 8002c26 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8002c22:	f8c0 12b0 	str.w	r1, [r0, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002c26:	2301      	movs	r3, #1
  pdev->id = id;
 8002c28:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002c2a:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8002c2e:	f000 fcc3 	bl	80035b8 <USBD_LL_Init>

  return USBD_OK;
 8002c32:	2000      	movs	r0, #0
}
 8002c34:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8002c36:	2002      	movs	r0, #2
 8002c38:	e7fc      	b.n	8002c34 <USBD_Init+0x24>

08002c3a <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 8002c3a:	b119      	cbz	r1, 8002c44 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8002c3c:	f8c0 12b4 	str.w	r1, [r0, #692]	@ 0x2b4
    status = USBD_OK;
 8002c40:	2000      	movs	r0, #0
 8002c42:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8002c44:	2002      	movs	r0, #2
  }

  return status;
}
 8002c46:	4770      	bx	lr

08002c48 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8002c48:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8002c4a:	f000 fcf5 	bl	8003638 <USBD_LL_Start>

  return USBD_OK;
}
 8002c4e:	2000      	movs	r0, #0
 8002c50:	bd08      	pop	{r3, pc}

08002c52 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8002c52:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8002c54:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8002c58:	b133      	cbz	r3, 8002c68 <USBD_SetClassConfig+0x16>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4798      	blx	r3
 8002c5e:	3800      	subs	r0, #0
 8002c60:	bf18      	it	ne
 8002c62:	2001      	movne	r0, #1
 8002c64:	0040      	lsls	r0, r0, #1
      ret = USBD_OK;
    }
  }

  return ret;
}
 8002c66:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 8002c68:	2002      	movs	r0, #2
 8002c6a:	e7fc      	b.n	8002c66 <USBD_SetClassConfig+0x14>

08002c6c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8002c6c:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8002c6e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	4798      	blx	r3

  return USBD_OK;
}
 8002c76:	2000      	movs	r0, #0
 8002c78:	bd08      	pop	{r3, pc}

08002c7a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8002c7a:	b538      	push	{r3, r4, r5, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8002c7c:	f500 752a 	add.w	r5, r0, #680	@ 0x2a8
{
 8002c80:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8002c82:	4628      	mov	r0, r5
 8002c84:	f000 fae2 	bl	800324c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8002c88:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8002c8a:	f894 12a8 	ldrb.w	r1, [r4, #680]	@ 0x2a8
  pdev->ep0_state = USBD_EP0_SETUP;
 8002c8e:	f8c4 3294 	str.w	r3, [r4, #660]	@ 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 8002c92:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	@ 0x2ae
 8002c96:	f8c4 3298 	str.w	r3, [r4, #664]	@ 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 8002c9a:	f001 031f 	and.w	r3, r1, #31
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d008      	beq.n	8002cb4 <USBD_LL_SetupStage+0x3a>
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d00b      	beq.n	8002cbe <USBD_LL_SetupStage+0x44>
 8002ca6:	b97b      	cbnz	r3, 8002cc8 <USBD_LL_SetupStage+0x4e>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8002ca8:	4629      	mov	r1, r5
 8002caa:	4620      	mov	r0, r4
 8002cac:	f000 f8fa 	bl	8002ea4 <USBD_StdDevReq>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return USBD_OK;
}
 8002cb0:	2000      	movs	r0, #0
 8002cb2:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 8002cb4:	4629      	mov	r1, r5
 8002cb6:	4620      	mov	r0, r4
 8002cb8:	f000 fa1c 	bl	80030f4 <USBD_StdItfReq>
      break;
 8002cbc:	e7f8      	b.n	8002cb0 <USBD_LL_SetupStage+0x36>
      USBD_StdEPReq(pdev, &pdev->request);
 8002cbe:	4629      	mov	r1, r5
 8002cc0:	4620      	mov	r0, r4
 8002cc2:	f000 fa3b 	bl	800313c <USBD_StdEPReq>
      break;
 8002cc6:	e7f3      	b.n	8002cb0 <USBD_LL_SetupStage+0x36>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8002cc8:	4620      	mov	r0, r4
 8002cca:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8002cce:	f000 fcd1 	bl	8003674 <USBD_LL_StallEP>
      break;
 8002cd2:	e7ed      	b.n	8002cb0 <USBD_LL_SetupStage+0x36>

08002cd4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8002cd4:	b570      	push	{r4, r5, r6, lr}
 8002cd6:	4604      	mov	r4, r0
 8002cd8:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8002cda:	bb39      	cbnz	r1, 8002d2c <USBD_LL_DataOutStage+0x58>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8002cdc:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 8002ce0:	2a03      	cmp	r2, #3
 8002ce2:	d11c      	bne.n	8002d1e <USBD_LL_DataOutStage+0x4a>
    {
      if (pep->rem_length > pep->maxpacket)
 8002ce4:	e9d0 5258 	ldrd	r5, r2, [r0, #352]	@ 0x160
 8002ce8:	4295      	cmp	r5, r2
 8002cea:	d90b      	bls.n	8002d04 <USBD_LL_DataOutStage+0x30>
      {
        pep->rem_length -= pep->maxpacket;
 8002cec:	1aad      	subs	r5, r5, r2

        USBD_CtlContinueRx(pdev, pdata,
 8002cee:	42aa      	cmp	r2, r5
 8002cf0:	4631      	mov	r1, r6
        pep->rem_length -= pep->maxpacket;
 8002cf2:	f8c0 5160 	str.w	r5, [r0, #352]	@ 0x160
        USBD_CtlContinueRx(pdev, pdata,
 8002cf6:	bf8c      	ite	hi
 8002cf8:	b2aa      	uxthhi	r2, r5
 8002cfa:	b292      	uxthls	r2, r2
 8002cfc:	f000 fafa 	bl	80032f4 <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8002d00:	2000      	movs	r0, #0
}
 8002d02:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8002d04:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	b123      	cbz	r3, 8002d16 <USBD_LL_DataOutStage+0x42>
 8002d0c:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8002d10:	2a03      	cmp	r2, #3
 8002d12:	d100      	bne.n	8002d16 <USBD_LL_DataOutStage+0x42>
          pdev->pClass->EP0_RxReady(pdev);
 8002d14:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8002d16:	4620      	mov	r0, r4
 8002d18:	f000 faf4 	bl	8003304 <USBD_CtlSendStatus>
 8002d1c:	e7f0      	b.n	8002d00 <USBD_LL_DataOutStage+0x2c>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8002d1e:	2a05      	cmp	r2, #5
 8002d20:	d1ee      	bne.n	8002d00 <USBD_LL_DataOutStage+0x2c>
        pdev->ep0_state = USBD_EP0_IDLE;
 8002d22:	f8c4 1294 	str.w	r1, [r4, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8002d26:	f000 fca5 	bl	8003674 <USBD_LL_StallEP>
 8002d2a:	e7e9      	b.n	8002d00 <USBD_LL_DataOutStage+0x2c>
  else if ((pdev->pClass->DataOut != NULL) &&
 8002d2c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	b12b      	cbz	r3, 8002d40 <USBD_LL_DataOutStage+0x6c>
 8002d34:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8002d38:	2a03      	cmp	r2, #3
 8002d3a:	d101      	bne.n	8002d40 <USBD_LL_DataOutStage+0x6c>
    pdev->pClass->DataOut(pdev, epnum);
 8002d3c:	4798      	blx	r3
 8002d3e:	e7df      	b.n	8002d00 <USBD_LL_DataOutStage+0x2c>
    return USBD_FAIL;
 8002d40:	2002      	movs	r0, #2
 8002d42:	e7de      	b.n	8002d02 <USBD_LL_DataOutStage+0x2e>

08002d44 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8002d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d46:	4604      	mov	r4, r0
 8002d48:	4613      	mov	r3, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8002d4a:	460f      	mov	r7, r1
 8002d4c:	2900      	cmp	r1, #0
 8002d4e:	d149      	bne.n	8002de4 <USBD_LL_DataInStage+0xa0>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8002d50:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 8002d54:	2a02      	cmp	r2, #2
 8002d56:	d13a      	bne.n	8002dce <USBD_LL_DataInStage+0x8a>
    {
      if (pep->rem_length > pep->maxpacket)
 8002d58:	e9d0 5608 	ldrd	r5, r6, [r0, #32]
 8002d5c:	42b5      	cmp	r5, r6
 8002d5e:	d911      	bls.n	8002d84 <USBD_LL_DataInStage+0x40>
      {
        pep->rem_length -= pep->maxpacket;
 8002d60:	1bad      	subs	r5, r5, r6

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8002d62:	4619      	mov	r1, r3
        pep->rem_length -= pep->maxpacket;
 8002d64:	6205      	str	r5, [r0, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8002d66:	b2aa      	uxth	r2, r5
 8002d68:	f000 faaf 	bl	80032ca <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8002d6c:	463b      	mov	r3, r7
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8002d6e:	461a      	mov	r2, r3
 8002d70:	4619      	mov	r1, r3
 8002d72:	4620      	mov	r0, r4
 8002d74:	f000 fcb3 	bl	80036de <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 8002d78:	f894 32a0 	ldrb.w	r3, [r4, #672]	@ 0x2a0
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d02d      	beq.n	8002ddc <USBD_LL_DataInStage+0x98>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8002d80:	2000      	movs	r0, #0
}
 8002d82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8002d84:	69c3      	ldr	r3, [r0, #28]
 8002d86:	fbb3 f5f6 	udiv	r5, r3, r6
 8002d8a:	fb06 3515 	mls	r5, r6, r5, r3
 8002d8e:	b965      	cbnz	r5, 8002daa <USBD_LL_DataInStage+0x66>
 8002d90:	429e      	cmp	r6, r3
 8002d92:	d80a      	bhi.n	8002daa <USBD_LL_DataInStage+0x66>
            (pep->total_length >= pep->maxpacket) &&
 8002d94:	f8d0 2298 	ldr.w	r2, [r0, #664]	@ 0x298
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d206      	bcs.n	8002daa <USBD_LL_DataInStage+0x66>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8002d9c:	462a      	mov	r2, r5
 8002d9e:	f000 fa94 	bl	80032ca <USBD_CtlContinueSendData>
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8002da2:	462b      	mov	r3, r5
          pdev->ep0_data_len = 0U;
 8002da4:	f8c4 5298 	str.w	r5, [r4, #664]	@ 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8002da8:	e7e1      	b.n	8002d6e <USBD_LL_DataInStage+0x2a>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8002daa:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	b12b      	cbz	r3, 8002dbe <USBD_LL_DataInStage+0x7a>
 8002db2:	f894 229c 	ldrb.w	r2, [r4, #668]	@ 0x29c
 8002db6:	2a03      	cmp	r2, #3
 8002db8:	d101      	bne.n	8002dbe <USBD_LL_DataInStage+0x7a>
            pdev->pClass->EP0_TxSent(pdev);
 8002dba:	4620      	mov	r0, r4
 8002dbc:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 8002dbe:	2180      	movs	r1, #128	@ 0x80
 8002dc0:	4620      	mov	r0, r4
 8002dc2:	f000 fc57 	bl	8003674 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8002dc6:	4620      	mov	r0, r4
 8002dc8:	f000 faa7 	bl	800331a <USBD_CtlReceiveStatus>
 8002dcc:	e7d4      	b.n	8002d78 <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8002dce:	f032 0304 	bics.w	r3, r2, #4
 8002dd2:	d1d1      	bne.n	8002d78 <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 8002dd4:	2180      	movs	r1, #128	@ 0x80
 8002dd6:	f000 fc4d 	bl	8003674 <USBD_LL_StallEP>
 8002dda:	e7cd      	b.n	8002d78 <USBD_LL_DataInStage+0x34>
      pdev->dev_test_mode = 0U;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	f884 32a0 	strb.w	r3, [r4, #672]	@ 0x2a0
 8002de2:	e7cd      	b.n	8002d80 <USBD_LL_DataInStage+0x3c>
  else if ((pdev->pClass->DataIn != NULL) &&
 8002de4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8002de8:	695b      	ldr	r3, [r3, #20]
 8002dea:	b12b      	cbz	r3, 8002df8 <USBD_LL_DataInStage+0xb4>
 8002dec:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8002df0:	2a03      	cmp	r2, #3
 8002df2:	d101      	bne.n	8002df8 <USBD_LL_DataInStage+0xb4>
    pdev->pClass->DataIn(pdev, epnum);
 8002df4:	4798      	blx	r3
 8002df6:	e7c3      	b.n	8002d80 <USBD_LL_DataInStage+0x3c>
    return USBD_FAIL;
 8002df8:	2002      	movs	r0, #2
 8002dfa:	e7c2      	b.n	8002d82 <USBD_LL_DataInStage+0x3e>

08002dfc <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8002dfc:	2200      	movs	r2, #0
{
 8002dfe:	b570      	push	{r4, r5, r6, lr}
 8002e00:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8002e02:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8002e04:	2640      	movs	r6, #64	@ 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8002e06:	4611      	mov	r1, r2
 8002e08:	2340      	movs	r3, #64	@ 0x40
 8002e0a:	f000 fc1e 	bl	800364a <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8002e0e:	4633      	mov	r3, r6
 8002e10:	2180      	movs	r1, #128	@ 0x80
 8002e12:	2200      	movs	r2, #0
 8002e14:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8002e16:	f8c4 5158 	str.w	r5, [r4, #344]	@ 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8002e1a:	f8c4 6164 	str.w	r6, [r4, #356]	@ 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8002e1e:	f000 fc14 	bl	800364a <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 8002e22:	2100      	movs	r1, #0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 8002e24:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8002e28:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8002e2a:	6266      	str	r6, [r4, #36]	@ 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002e2c:	f884 529c 	strb.w	r5, [r4, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8002e30:	f8c4 1294 	str.w	r1, [r4, #660]	@ 0x294
  pdev->dev_config = 0U;
 8002e34:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8002e36:	f8c4 12a4 	str.w	r1, [r4, #676]	@ 0x2a4
  if (pdev->pClassData)
 8002e3a:	b123      	cbz	r3, 8002e46 <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8002e3c:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 8002e40:	4620      	mov	r0, r4
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	4798      	blx	r3
  }

  return USBD_OK;
}
 8002e46:	2000      	movs	r0, #0
 8002e48:	bd70      	pop	{r4, r5, r6, pc}

08002e4a <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8002e4a:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8002e4c:	2000      	movs	r0, #0
 8002e4e:	4770      	bx	lr

08002e50 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8002e50:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8002e54:	f880 329d 	strb.w	r3, [r0, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8002e58:	2304      	movs	r3, #4
 8002e5a:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c

  return USBD_OK;
}
 8002e5e:	2000      	movs	r0, #0
 8002e60:	4770      	bx	lr

08002e62 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8002e62:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8002e66:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 8002e68:	bf04      	itt	eq
 8002e6a:	f890 329d 	ldrbeq.w	r3, [r0, #669]	@ 0x29d
 8002e6e:	f880 329c 	strbeq.w	r3, [r0, #668]	@ 0x29c
  }

  return USBD_OK;
}
 8002e72:	2000      	movs	r0, #0
 8002e74:	4770      	bx	lr

08002e76 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8002e76:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002e78:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8002e7c:	2a03      	cmp	r2, #3
 8002e7e:	d104      	bne.n	8002e8a <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 8002e80:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8002e84:	69db      	ldr	r3, [r3, #28]
 8002e86:	b103      	cbz	r3, 8002e8a <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8002e88:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 8002e8a:	2000      	movs	r0, #0
 8002e8c:	bd08      	pop	{r3, pc}

08002e8e <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 8002e8e:	b510      	push	{r4, lr}
 8002e90:	4604      	mov	r4, r0
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 8002e92:	2180      	movs	r1, #128	@ 0x80
 8002e94:	f000 fbee 	bl	8003674 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8002e98:	4620      	mov	r0, r4
}
 8002e9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8002e9e:	2100      	movs	r1, #0
 8002ea0:	f000 bbe8 	b.w	8003674 <USBD_LL_StallEP>

08002ea4 <USBD_StdDevReq>:
{
 8002ea4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002ea6:	780b      	ldrb	r3, [r1, #0]
 8002ea8:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002eaa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8002eae:	2b20      	cmp	r3, #32
{
 8002eb0:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002eb2:	d012      	beq.n	8002eda <USBD_StdDevReq+0x36>
 8002eb4:	2b40      	cmp	r3, #64	@ 0x40
 8002eb6:	d010      	beq.n	8002eda <USBD_StdDevReq+0x36>
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d151      	bne.n	8002f60 <USBD_StdDevReq+0xbc>
      switch (req->bRequest)
 8002ebc:	784b      	ldrb	r3, [r1, #1]
 8002ebe:	2b09      	cmp	r3, #9
 8002ec0:	d84e      	bhi.n	8002f60 <USBD_StdDevReq+0xbc>
 8002ec2:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002ec6:	00ee      	.short	0x00ee
 8002ec8:	004d0109 	.word	0x004d0109
 8002ecc:	004d0102 	.word	0x004d0102
 8002ed0:	00130087 	.word	0x00130087
 8002ed4:	00d6004d 	.word	0x00d6004d
 8002ed8:	00a3      	.short	0x00a3
      pdev->pClass->Setup(pdev, req);
 8002eda:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 8002ede:	4629      	mov	r1, r5
 8002ee0:	4620      	mov	r0, r4
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	4798      	blx	r3
}
 8002ee6:	2000      	movs	r0, #0
 8002ee8:	b003      	add	sp, #12
 8002eea:	bd30      	pop	{r4, r5, pc}
  uint16_t len = 0U;
 8002eec:	2300      	movs	r3, #0
 8002eee:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8002ef2:	884b      	ldrh	r3, [r1, #2]
 8002ef4:	0a1a      	lsrs	r2, r3, #8
 8002ef6:	3a01      	subs	r2, #1
 8002ef8:	2a06      	cmp	r2, #6
 8002efa:	d831      	bhi.n	8002f60 <USBD_StdDevReq+0xbc>
 8002efc:	e8df f002 	tbb	[pc, r2]
 8002f00:	30231604 	.word	0x30231604
 8002f04:	4830      	.short	0x4830
 8002f06:	52          	.byte	0x52
 8002f07:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8002f08:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8002f0c:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8002f0e:	7c20      	ldrb	r0, [r4, #16]
 8002f10:	f10d 0106 	add.w	r1, sp, #6
 8002f14:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 8002f16:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8002f1a:	88eb      	ldrh	r3, [r5, #6]
 8002f1c:	2a00      	cmp	r2, #0
 8002f1e:	d055      	beq.n	8002fcc <USBD_StdDevReq+0x128>
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d14a      	bne.n	8002fba <USBD_StdDevReq+0x116>
        USBD_CtlSendStatus(pdev);
 8002f24:	4620      	mov	r0, r4
 8002f26:	f000 f9ed 	bl	8003304 <USBD_CtlSendStatus>
 8002f2a:	e7dc      	b.n	8002ee6 <USBD_StdDevReq+0x42>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002f2c:	7c02      	ldrb	r2, [r0, #16]
      pdev->pClass->Setup(pdev, req);
 8002f2e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002f32:	b932      	cbnz	r2, 8002f42 <USBD_StdDevReq+0x9e>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8002f34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8002f36:	f10d 0006 	add.w	r0, sp, #6
 8002f3a:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8002f3c:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8002f3e:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8002f40:	e7e9      	b.n	8002f16 <USBD_StdDevReq+0x72>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8002f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f44:	e7f7      	b.n	8002f36 <USBD_StdDevReq+0x92>
      switch ((uint8_t)(req->wValue))
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	2b05      	cmp	r3, #5
 8002f4a:	d809      	bhi.n	8002f60 <USBD_StdDevReq+0xbc>
 8002f4c:	e8df f003 	tbb	[pc, r3]
 8002f50:	14100c03 	.word	0x14100c03
 8002f54:	1c18      	.short	0x1c18
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8002f56:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8002f5a:	685b      	ldr	r3, [r3, #4]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d1d6      	bne.n	8002f0e <USBD_StdDevReq+0x6a>
        USBD_CtlError(pdev, req);
 8002f60:	4620      	mov	r0, r4
 8002f62:	f7ff ff94 	bl	8002e8e <USBD_CtlError.constprop.0>
        break;
 8002f66:	e7be      	b.n	8002ee6 <USBD_StdDevReq+0x42>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8002f68:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	e7f5      	b.n	8002f5c <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8002f70:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	e7f1      	b.n	8002f5c <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8002f78:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	e7ed      	b.n	8002f5c <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8002f80:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	e7e9      	b.n	8002f5c <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8002f88:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	e7e5      	b.n	8002f5c <USBD_StdDevReq+0xb8>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002f90:	7c03      	ldrb	r3, [r0, #16]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d1e4      	bne.n	8002f60 <USBD_StdDevReq+0xbc>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8002f96:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8002f9a:	f10d 0006 	add.w	r0, sp, #6
 8002f9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fa0:	4798      	blx	r3
  if (err != 0U)
 8002fa2:	e7b8      	b.n	8002f16 <USBD_StdDevReq+0x72>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002fa4:	7c03      	ldrb	r3, [r0, #16]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1da      	bne.n	8002f60 <USBD_StdDevReq+0xbc>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8002faa:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8002fae:	f10d 0006 	add.w	r0, sp, #6
 8002fb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fb4:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8002fb6:	2307      	movs	r3, #7
 8002fb8:	e7c1      	b.n	8002f3e <USBD_StdDevReq+0x9a>
      len = MIN(len, req->wLength);
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	bf28      	it	cs
 8002fbe:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8002fc0:	4601      	mov	r1, r0
 8002fc2:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 8002fc4:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8002fc8:	f000 f972 	bl	80032b0 <USBD_CtlSendData>
    if (req->wLength == 0U)
 8002fcc:	88eb      	ldrh	r3, [r5, #6]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d189      	bne.n	8002ee6 <USBD_StdDevReq+0x42>
 8002fd2:	e7a7      	b.n	8002f24 <USBD_StdDevReq+0x80>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8002fd4:	888b      	ldrh	r3, [r1, #4]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d1c2      	bne.n	8002f60 <USBD_StdDevReq+0xbc>
 8002fda:	88cb      	ldrh	r3, [r1, #6]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d1bf      	bne.n	8002f60 <USBD_StdDevReq+0xbc>
 8002fe0:	884d      	ldrh	r5, [r1, #2]
 8002fe2:	2d7f      	cmp	r5, #127	@ 0x7f
 8002fe4:	d8bc      	bhi.n	8002f60 <USBD_StdDevReq+0xbc>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002fe6:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8002fea:	2b03      	cmp	r3, #3
 8002fec:	d0b8      	beq.n	8002f60 <USBD_StdDevReq+0xbc>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8002fee:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 8002ff0:	f880 129e 	strb.w	r1, [r0, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8002ff4:	f000 fb61 	bl	80036ba <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8002ff8:	4620      	mov	r0, r4
 8002ffa:	f000 f983 	bl	8003304 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8002ffe:	b11d      	cbz	r5, 8003008 <USBD_StdDevReq+0x164>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8003000:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 8003002:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8003006:	e76e      	b.n	8002ee6 <USBD_StdDevReq+0x42>
 8003008:	2301      	movs	r3, #1
 800300a:	e7fa      	b.n	8003002 <USBD_StdDevReq+0x15e>
  cfgidx = (uint8_t)(req->wValue);
 800300c:	7889      	ldrb	r1, [r1, #2]
 800300e:	4d38      	ldr	r5, [pc, #224]	@ (80030f0 <USBD_StdDevReq+0x24c>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8003010:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 8003012:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8003014:	d8a4      	bhi.n	8002f60 <USBD_StdDevReq+0xbc>
    switch (pdev->dev_state)
 8003016:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800301a:	2b02      	cmp	r3, #2
 800301c:	d008      	beq.n	8003030 <USBD_StdDevReq+0x18c>
 800301e:	2b03      	cmp	r3, #3
 8003020:	d015      	beq.n	800304e <USBD_StdDevReq+0x1aa>
        USBD_CtlError(pdev, req);
 8003022:	f7ff ff34 	bl	8002e8e <USBD_CtlError.constprop.0>
        USBD_ClrClassConfig(pdev, cfgidx);
 8003026:	4620      	mov	r0, r4
 8003028:	7829      	ldrb	r1, [r5, #0]
 800302a:	f7ff fe1f 	bl	8002c6c <USBD_ClrClassConfig>
        break;
 800302e:	e75a      	b.n	8002ee6 <USBD_StdDevReq+0x42>
        if (cfgidx)
 8003030:	2900      	cmp	r1, #0
 8003032:	f43f af77 	beq.w	8002f24 <USBD_StdDevReq+0x80>
          pdev->dev_config = cfgidx;
 8003036:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8003038:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 800303a:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800303c:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8003040:	4620      	mov	r0, r4
 8003042:	f7ff fe06 	bl	8002c52 <USBD_SetClassConfig>
 8003046:	2802      	cmp	r0, #2
 8003048:	f47f af6c 	bne.w	8002f24 <USBD_StdDevReq+0x80>
 800304c:	e788      	b.n	8002f60 <USBD_StdDevReq+0xbc>
        if (cfgidx == 0U)
 800304e:	b931      	cbnz	r1, 800305e <USBD_StdDevReq+0x1ba>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8003050:	2302      	movs	r3, #2
          pdev->dev_config = cfgidx;
 8003052:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8003054:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
          USBD_ClrClassConfig(pdev, cfgidx);
 8003058:	f7ff fe08 	bl	8002c6c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800305c:	e762      	b.n	8002f24 <USBD_StdDevReq+0x80>
        else if (cfgidx != pdev->dev_config)
 800305e:	6841      	ldr	r1, [r0, #4]
 8003060:	2901      	cmp	r1, #1
 8003062:	f43f af5f 	beq.w	8002f24 <USBD_StdDevReq+0x80>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8003066:	b2c9      	uxtb	r1, r1
 8003068:	f7ff fe00 	bl	8002c6c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800306c:	7829      	ldrb	r1, [r5, #0]
 800306e:	6061      	str	r1, [r4, #4]
 8003070:	e7e6      	b.n	8003040 <USBD_StdDevReq+0x19c>
  if (req->wLength != 1U)
 8003072:	88ca      	ldrh	r2, [r1, #6]
 8003074:	2a01      	cmp	r2, #1
 8003076:	f47f af73 	bne.w	8002f60 <USBD_StdDevReq+0xbc>
    switch (pdev->dev_state)
 800307a:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800307e:	2b02      	cmp	r3, #2
 8003080:	d80a      	bhi.n	8003098 <USBD_StdDevReq+0x1f4>
 8003082:	2b00      	cmp	r3, #0
 8003084:	f43f af6c 	beq.w	8002f60 <USBD_StdDevReq+0xbc>
        pdev->dev_default_config = 0U;
 8003088:	4601      	mov	r1, r0
 800308a:	2300      	movs	r3, #0
 800308c:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8003090:	4620      	mov	r0, r4
 8003092:	f000 f90d 	bl	80032b0 <USBD_CtlSendData>
      break;
 8003096:	e726      	b.n	8002ee6 <USBD_StdDevReq+0x42>
    switch (pdev->dev_state)
 8003098:	2b03      	cmp	r3, #3
 800309a:	f47f af61 	bne.w	8002f60 <USBD_StdDevReq+0xbc>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800309e:	1d01      	adds	r1, r0, #4
 80030a0:	e7f6      	b.n	8003090 <USBD_StdDevReq+0x1ec>
  switch (pdev->dev_state)
 80030a2:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80030a6:	3b01      	subs	r3, #1
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	f63f af59 	bhi.w	8002f60 <USBD_StdDevReq+0xbc>
      if (req->wLength != 0x2U)
 80030ae:	88ca      	ldrh	r2, [r1, #6]
 80030b0:	2a02      	cmp	r2, #2
 80030b2:	f47f af55 	bne.w	8002f60 <USBD_StdDevReq+0xbc>
      if (pdev->dev_remote_wakeup)
 80030b6:	f8d0 32a4 	ldr.w	r3, [r0, #676]	@ 0x2a4
 80030ba:	4601      	mov	r1, r0
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80030bc:	2b00      	cmp	r3, #0
 80030be:	bf0c      	ite	eq
 80030c0:	2301      	moveq	r3, #1
 80030c2:	2303      	movne	r3, #3
 80030c4:	f841 3f0c 	str.w	r3, [r1, #12]!
 80030c8:	e7e2      	b.n	8003090 <USBD_StdDevReq+0x1ec>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80030ca:	884b      	ldrh	r3, [r1, #2]
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	f47f af0a 	bne.w	8002ee6 <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 80030d2:	f8c4 32a4 	str.w	r3, [r4, #676]	@ 0x2a4
 80030d6:	e725      	b.n	8002f24 <USBD_StdDevReq+0x80>
  switch (pdev->dev_state)
 80030d8:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80030dc:	3b01      	subs	r3, #1
 80030de:	2b02      	cmp	r3, #2
 80030e0:	f63f af3e 	bhi.w	8002f60 <USBD_StdDevReq+0xbc>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80030e4:	884b      	ldrh	r3, [r1, #2]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	f47f aefd 	bne.w	8002ee6 <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 80030ec:	2300      	movs	r3, #0
 80030ee:	e7f0      	b.n	80030d2 <USBD_StdDevReq+0x22e>
 80030f0:	200003e0 	.word	0x200003e0

080030f4 <USBD_StdItfReq>:
{
 80030f4:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80030f6:	780b      	ldrb	r3, [r1, #0]
{
 80030f8:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80030fa:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80030fe:	065b      	lsls	r3, r3, #25
{
 8003100:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003102:	d501      	bpl.n	8003108 <USBD_StdItfReq+0x14>
 8003104:	2a40      	cmp	r2, #64	@ 0x40
 8003106:	d115      	bne.n	8003134 <USBD_StdItfReq+0x40>
      switch (pdev->dev_state)
 8003108:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 800310c:	3b01      	subs	r3, #1
 800310e:	2b02      	cmp	r3, #2
 8003110:	d810      	bhi.n	8003134 <USBD_StdItfReq+0x40>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8003112:	792b      	ldrb	r3, [r5, #4]
 8003114:	2b01      	cmp	r3, #1
 8003116:	d80d      	bhi.n	8003134 <USBD_StdItfReq+0x40>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8003118:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 800311c:	4629      	mov	r1, r5
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	4620      	mov	r0, r4
 8003122:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8003124:	88eb      	ldrh	r3, [r5, #6]
 8003126:	b91b      	cbnz	r3, 8003130 <USBD_StdItfReq+0x3c>
 8003128:	b910      	cbnz	r0, 8003130 <USBD_StdItfReq+0x3c>
              USBD_CtlSendStatus(pdev);
 800312a:	4620      	mov	r0, r4
 800312c:	f000 f8ea 	bl	8003304 <USBD_CtlSendStatus>
}
 8003130:	2000      	movs	r0, #0
 8003132:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 8003134:	4620      	mov	r0, r4
 8003136:	f7ff feaa 	bl	8002e8e <USBD_CtlError.constprop.0>
          break;
 800313a:	e7f9      	b.n	8003130 <USBD_StdItfReq+0x3c>

0800313c <USBD_StdEPReq>:
{
 800313c:	b538      	push	{r3, r4, r5, lr}
 800313e:	780a      	ldrb	r2, [r1, #0]
 8003140:	4604      	mov	r4, r0
  ep_addr  = LOBYTE(req->wIndex);
 8003142:	f002 0260 	and.w	r2, r2, #96	@ 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003146:	2a20      	cmp	r2, #32
{
 8003148:	460b      	mov	r3, r1
  ep_addr  = LOBYTE(req->wIndex);
 800314a:	888d      	ldrh	r5, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800314c:	d026      	beq.n	800319c <USBD_StdEPReq+0x60>
 800314e:	2a40      	cmp	r2, #64	@ 0x40
 8003150:	d024      	beq.n	800319c <USBD_StdEPReq+0x60>
 8003152:	bb8a      	cbnz	r2, 80031b8 <USBD_StdEPReq+0x7c>
      switch (req->bRequest)
 8003154:	785a      	ldrb	r2, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 8003156:	b2e9      	uxtb	r1, r5
      switch (req->bRequest)
 8003158:	2a01      	cmp	r2, #1
 800315a:	d03d      	beq.n	80031d8 <USBD_StdEPReq+0x9c>
 800315c:	2a03      	cmp	r2, #3
 800315e:	d025      	beq.n	80031ac <USBD_StdEPReq+0x70>
 8003160:	bb52      	cbnz	r2, 80031b8 <USBD_StdEPReq+0x7c>
          switch (pdev->dev_state)
 8003162:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8003166:	2b02      	cmp	r3, #2
 8003168:	d04d      	beq.n	8003206 <USBD_StdEPReq+0xca>
 800316a:	2b03      	cmp	r3, #3
 800316c:	d124      	bne.n	80031b8 <USBD_StdEPReq+0x7c>
              if ((ep_addr & 0x80U) == 0x80U)
 800316e:	2214      	movs	r2, #20
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8003170:	f001 030f 	and.w	r3, r1, #15
              if ((ep_addr & 0x80U) == 0x80U)
 8003174:	f015 0f80 	tst.w	r5, #128	@ 0x80
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8003178:	fb02 0303 	mla	r3, r2, r3, r0
              if ((ep_addr & 0x80U) == 0x80U)
 800317c:	d053      	beq.n	8003226 <USBD_StdEPReq+0xea>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800317e:	699b      	ldr	r3, [r3, #24]
 8003180:	b1d3      	cbz	r3, 80031b8 <USBD_StdEPReq+0x7c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003182:	2514      	movs	r5, #20
 8003184:	f001 037f 	and.w	r3, r1, #127	@ 0x7f
 8003188:	fb03 5505 	mla	r5, r3, r5, r5
 800318c:	4405      	add	r5, r0
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800318e:	064b      	lsls	r3, r1, #25
 8003190:	d155      	bne.n	800323e <USBD_StdEPReq+0x102>
{
 8003192:	2300      	movs	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8003194:	2202      	movs	r2, #2
 8003196:	4629      	mov	r1, r5
                pep->status = 0x0000U;
 8003198:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800319a:	e040      	b.n	800321e <USBD_StdEPReq+0xe2>
      pdev->pClass->Setup(pdev, req);
 800319c:	f8d4 22b4 	ldr.w	r2, [r4, #692]	@ 0x2b4
 80031a0:	4619      	mov	r1, r3
 80031a2:	4620      	mov	r0, r4
 80031a4:	6892      	ldr	r2, [r2, #8]
 80031a6:	4790      	blx	r2
}
 80031a8:	2000      	movs	r0, #0
 80031aa:	bd38      	pop	{r3, r4, r5, pc}
          switch (pdev->dev_state)
 80031ac:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 80031b0:	2a02      	cmp	r2, #2
 80031b2:	d01f      	beq.n	80031f4 <USBD_StdEPReq+0xb8>
 80031b4:	2a03      	cmp	r2, #3
 80031b6:	d003      	beq.n	80031c0 <USBD_StdEPReq+0x84>
              USBD_CtlError(pdev, req);
 80031b8:	4620      	mov	r0, r4
 80031ba:	f7ff fe68 	bl	8002e8e <USBD_CtlError.constprop.0>
              break;
 80031be:	e7f3      	b.n	80031a8 <USBD_StdEPReq+0x6c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80031c0:	885a      	ldrh	r2, [r3, #2]
 80031c2:	b92a      	cbnz	r2, 80031d0 <USBD_StdEPReq+0x94>
                if ((ep_addr != 0x00U) &&
 80031c4:	064a      	lsls	r2, r1, #25
 80031c6:	d003      	beq.n	80031d0 <USBD_StdEPReq+0x94>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80031c8:	88db      	ldrh	r3, [r3, #6]
 80031ca:	b90b      	cbnz	r3, 80031d0 <USBD_StdEPReq+0x94>
                  USBD_LL_StallEP(pdev, ep_addr);
 80031cc:	f000 fa52 	bl	8003674 <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 80031d0:	4620      	mov	r0, r4
 80031d2:	f000 f897 	bl	8003304 <USBD_CtlSendStatus>
              break;
 80031d6:	e7e7      	b.n	80031a8 <USBD_StdEPReq+0x6c>
          switch (pdev->dev_state)
 80031d8:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 80031dc:	2a02      	cmp	r2, #2
 80031de:	d009      	beq.n	80031f4 <USBD_StdEPReq+0xb8>
 80031e0:	2a03      	cmp	r2, #3
 80031e2:	d1e9      	bne.n	80031b8 <USBD_StdEPReq+0x7c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80031e4:	885b      	ldrh	r3, [r3, #2]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d1de      	bne.n	80031a8 <USBD_StdEPReq+0x6c>
                if ((ep_addr & 0x7FU) != 0x00U)
 80031ea:	064d      	lsls	r5, r1, #25
 80031ec:	d0f0      	beq.n	80031d0 <USBD_StdEPReq+0x94>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80031ee:	f000 fa4a 	bl	8003686 <USBD_LL_ClearStallEP>
 80031f2:	e7ed      	b.n	80031d0 <USBD_StdEPReq+0x94>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80031f4:	064b      	lsls	r3, r1, #25
 80031f6:	d0df      	beq.n	80031b8 <USBD_StdEPReq+0x7c>
                USBD_LL_StallEP(pdev, ep_addr);
 80031f8:	f000 fa3c 	bl	8003674 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80031fc:	2180      	movs	r1, #128	@ 0x80
 80031fe:	4620      	mov	r0, r4
 8003200:	f000 fa38 	bl	8003674 <USBD_LL_StallEP>
 8003204:	e7d0      	b.n	80031a8 <USBD_StdEPReq+0x6c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8003206:	0649      	lsls	r1, r1, #25
 8003208:	d1d6      	bne.n	80031b8 <USBD_StdEPReq+0x7c>
              pep->status = 0x0000U;
 800320a:	2300      	movs	r3, #0
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800320c:	062a      	lsls	r2, r5, #24
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800320e:	f04f 0202 	mov.w	r2, #2
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003212:	bf4c      	ite	mi
 8003214:	f100 0114 	addmi.w	r1, r0, #20
 8003218:	f500 71aa 	addpl.w	r1, r0, #340	@ 0x154
              pep->status = 0x0000U;
 800321c:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800321e:	4620      	mov	r0, r4
 8003220:	f000 f846 	bl	80032b0 <USBD_CtlSendData>
              break;
 8003224:	e7c0      	b.n	80031a8 <USBD_StdEPReq+0x6c>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8003226:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 800322a:	2b00      	cmp	r3, #0
 800322c:	d0c4      	beq.n	80031b8 <USBD_StdEPReq+0x7c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800322e:	2314      	movs	r3, #20
                    &pdev->ep_out[ep_addr & 0x7FU];
 8003230:	f001 057f 	and.w	r5, r1, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003234:	fb03 0505 	mla	r5, r3, r5, r0
 8003238:	f505 75aa 	add.w	r5, r5, #340	@ 0x154
 800323c:	e7a7      	b.n	800318e <USBD_StdEPReq+0x52>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800323e:	4620      	mov	r0, r4
 8003240:	f000 fa2a 	bl	8003698 <USBD_LL_IsStallEP>
 8003244:	2800      	cmp	r0, #0
 8003246:	d0a4      	beq.n	8003192 <USBD_StdEPReq+0x56>
 8003248:	2301      	movs	r3, #1
 800324a:	e7a3      	b.n	8003194 <USBD_StdEPReq+0x58>

0800324c <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 800324c:	780b      	ldrb	r3, [r1, #0]
 800324e:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8003250:	784b      	ldrb	r3, [r1, #1]
 8003252:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8003254:	884b      	ldrh	r3, [r1, #2]
 8003256:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8003258:	888b      	ldrh	r3, [r1, #4]
 800325a:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800325c:	88cb      	ldrh	r3, [r1, #6]
 800325e:	80c3      	strh	r3, [r0, #6]
}
 8003260:	4770      	bx	lr

08003262 <USBD_CtlError>:
{
 8003262:	b510      	push	{r4, lr}
 8003264:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 8003266:	2180      	movs	r1, #128	@ 0x80
 8003268:	f000 fa04 	bl	8003674 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800326c:	4620      	mov	r0, r4
}
 800326e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8003272:	2100      	movs	r1, #0
 8003274:	f000 b9fe 	b.w	8003674 <USBD_LL_StallEP>

08003278 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8003278:	b570      	push	{r4, r5, r6, lr}
 800327a:	460d      	mov	r5, r1
 800327c:	4616      	mov	r6, r2
  uint8_t idx = 0U;

  if (desc != NULL)
 800327e:	4604      	mov	r4, r0
 8003280:	b170      	cbz	r0, 80032a0 <USBD_GetString+0x28>
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 8003282:	f7fc ff63 	bl	800014c <strlen>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8003286:	b2c3      	uxtb	r3, r0
 8003288:	3301      	adds	r3, #1
 800328a:	005b      	lsls	r3, r3, #1
 800328c:	8033      	strh	r3, [r6, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800328e:	702b      	strb	r3, [r5, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8003290:	2303      	movs	r3, #3
      unicode[idx++] =  0U;
 8003292:	2000      	movs	r0, #0
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8003294:	706b      	strb	r3, [r5, #1]
 8003296:	2302      	movs	r3, #2
 8003298:	3c01      	subs	r4, #1
    while (*desc != '\0')
 800329a:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 800329e:	b901      	cbnz	r1, 80032a2 <USBD_GetString+0x2a>
}
 80032a0:	bd70      	pop	{r4, r5, r6, pc}
      unicode[idx++] = *desc++;
 80032a2:	1c5a      	adds	r2, r3, #1
 80032a4:	54e9      	strb	r1, [r5, r3]
 80032a6:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 80032a8:	3302      	adds	r3, #2
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	54a8      	strb	r0, [r5, r2]
 80032ae:	e7f4      	b.n	800329a <USBD_GetString+0x22>

080032b0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80032b0:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80032b2:	2202      	movs	r2, #2
{
 80032b4:	b510      	push	{r4, lr}
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 80032b6:	e9c0 3307 	strd	r3, r3, [r0, #28]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80032ba:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80032be:	460a      	mov	r2, r1
 80032c0:	2100      	movs	r1, #0
 80032c2:	f000 fa03 	bl	80036cc <USBD_LL_Transmit>

  return USBD_OK;
}
 80032c6:	2000      	movs	r0, #0
 80032c8:	bd10      	pop	{r4, pc}

080032ca <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80032ca:	b508      	push	{r3, lr}
 80032cc:	4613      	mov	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80032ce:	460a      	mov	r2, r1
 80032d0:	2100      	movs	r1, #0
 80032d2:	f000 f9fb 	bl	80036cc <USBD_LL_Transmit>

  return USBD_OK;
}
 80032d6:	2000      	movs	r0, #0
 80032d8:	bd08      	pop	{r3, pc}

080032da <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80032da:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80032dc:	2203      	movs	r2, #3
{
 80032de:	b510      	push	{r4, lr}
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;
 80032e0:	e9c0 3357 	strd	r3, r3, [r0, #348]	@ 0x15c
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80032e4:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80032e8:	460a      	mov	r2, r1
 80032ea:	2100      	movs	r1, #0
 80032ec:	f000 f9f7 	bl	80036de <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80032f0:	2000      	movs	r0, #0
 80032f2:	bd10      	pop	{r4, pc}

080032f4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80032f4:	b508      	push	{r3, lr}
 80032f6:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80032f8:	460a      	mov	r2, r1
 80032fa:	2100      	movs	r1, #0
 80032fc:	f000 f9ef 	bl	80036de <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8003300:	2000      	movs	r0, #0
 8003302:	bd08      	pop	{r3, pc}

08003304 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8003304:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8003306:	2304      	movs	r3, #4
 8003308:	f8c0 3294 	str.w	r3, [r0, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800330c:	2300      	movs	r3, #0
 800330e:	461a      	mov	r2, r3
 8003310:	4619      	mov	r1, r3
 8003312:	f000 f9db 	bl	80036cc <USBD_LL_Transmit>

  return USBD_OK;
}
 8003316:	2000      	movs	r0, #0
 8003318:	bd08      	pop	{r3, pc}

0800331a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800331a:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800331c:	2305      	movs	r3, #5
 800331e:	f8c0 3294 	str.w	r3, [r0, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003322:	2300      	movs	r3, #0
 8003324:	461a      	mov	r2, r3
 8003326:	4619      	mov	r1, r3
 8003328:	f000 f9d9 	bl	80036de <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800332c:	2000      	movs	r0, #0
 800332e:	bd08      	pop	{r3, pc}

08003330 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8003330:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8003332:	2200      	movs	r2, #0
 8003334:	490e      	ldr	r1, [pc, #56]	@ (8003370 <MX_USB_DEVICE_Init+0x40>)
 8003336:	480f      	ldr	r0, [pc, #60]	@ (8003374 <MX_USB_DEVICE_Init+0x44>)
 8003338:	f7ff fc6a 	bl	8002c10 <USBD_Init>
 800333c:	b108      	cbz	r0, 8003342 <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 800333e:	f7fd f8b9 	bl	80004b4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8003342:	490d      	ldr	r1, [pc, #52]	@ (8003378 <MX_USB_DEVICE_Init+0x48>)
 8003344:	480b      	ldr	r0, [pc, #44]	@ (8003374 <MX_USB_DEVICE_Init+0x44>)
 8003346:	f7ff fc78 	bl	8002c3a <USBD_RegisterClass>
 800334a:	b108      	cbz	r0, 8003350 <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 800334c:	f7fd f8b2 	bl	80004b4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8003350:	490a      	ldr	r1, [pc, #40]	@ (800337c <MX_USB_DEVICE_Init+0x4c>)
 8003352:	4808      	ldr	r0, [pc, #32]	@ (8003374 <MX_USB_DEVICE_Init+0x44>)
 8003354:	f7ff fc1b 	bl	8002b8e <USBD_CDC_RegisterInterface>
 8003358:	b108      	cbz	r0, 800335e <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 800335a:	f7fd f8ab 	bl	80004b4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800335e:	4805      	ldr	r0, [pc, #20]	@ (8003374 <MX_USB_DEVICE_Init+0x44>)
 8003360:	f7ff fc72 	bl	8002c48 <USBD_Start>
 8003364:	b118      	cbz	r0, 800336e <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8003366:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800336a:	f7fd b8a3 	b.w	80004b4 <Error_Handler>
}
 800336e:	bd08      	pop	{r3, pc}
 8003370:	20000174 	.word	0x20000174
 8003374:	200003e4 	.word	0x200003e4
 8003378:	200000ec 	.word	0x200000ec
 800337c:	20000130 	.word	0x20000130

08003380 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8003380:	2000      	movs	r0, #0
 8003382:	4770      	bx	lr

08003384 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8003384:	2000      	movs	r0, #0
 8003386:	4770      	bx	lr

08003388 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8003388:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800338a:	4c05      	ldr	r4, [pc, #20]	@ (80033a0 <CDC_Receive_FS+0x18>)
{
 800338c:	4601      	mov	r1, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800338e:	4620      	mov	r0, r4
 8003390:	f7ff fc0c 	bl	8002bac <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8003394:	4620      	mov	r0, r4
 8003396:	f7ff fc28 	bl	8002bea <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 800339a:	2000      	movs	r0, #0
 800339c:	bd10      	pop	{r4, pc}
 800339e:	bf00      	nop
 80033a0:	200003e4 	.word	0x200003e4

080033a4 <CDC_Init_FS>:
{
 80033a4:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80033a6:	4c06      	ldr	r4, [pc, #24]	@ (80033c0 <CDC_Init_FS+0x1c>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	4620      	mov	r0, r4
 80033ac:	4905      	ldr	r1, [pc, #20]	@ (80033c4 <CDC_Init_FS+0x20>)
 80033ae:	f7ff fbf5 	bl	8002b9c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80033b2:	4620      	mov	r0, r4
 80033b4:	4904      	ldr	r1, [pc, #16]	@ (80033c8 <CDC_Init_FS+0x24>)
 80033b6:	f7ff fbf9 	bl	8002bac <USBD_CDC_SetRxBuffer>
}
 80033ba:	2000      	movs	r0, #0
 80033bc:	bd10      	pop	{r4, pc}
 80033be:	bf00      	nop
 80033c0:	200003e4 	.word	0x200003e4
 80033c4:	200006a8 	.word	0x200006a8
 80033c8:	20000aa8 	.word	0x20000aa8

080033cc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80033cc:	b510      	push	{r4, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80033ce:	4c09      	ldr	r4, [pc, #36]	@ (80033f4 <CDC_Transmit_FS+0x28>)
{
 80033d0:	460a      	mov	r2, r1
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80033d2:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
  if (hcdc->TxState != 0){
 80033d6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80033da:	b943      	cbnz	r3, 80033ee <CDC_Transmit_FS+0x22>
    return USBD_BUSY;
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80033dc:	4601      	mov	r1, r0
 80033de:	4620      	mov	r0, r4
 80033e0:	f7ff fbdc 	bl	8002b9c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80033e4:	4620      	mov	r0, r4
  /* USER CODE END 7 */
  return result;
}
 80033e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80033ea:	f7ff bbe5 	b.w	8002bb8 <USBD_CDC_TransmitPacket>
}
 80033ee:	2001      	movs	r0, #1
 80033f0:	bd10      	pop	{r4, pc}
 80033f2:	bf00      	nop
 80033f4:	200003e4 	.word	0x200003e4

080033f8 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80033f8:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 80033fa:	4801      	ldr	r0, [pc, #4]	@ (8003400 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 80033fc:	800b      	strh	r3, [r1, #0]
}
 80033fe:	4770      	bx	lr
 8003400:	20000160 	.word	0x20000160

08003404 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8003404:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8003406:	4801      	ldr	r0, [pc, #4]	@ (800340c <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8003408:	800b      	strh	r3, [r1, #0]
}
 800340a:	4770      	bx	lr
 800340c:	2000015c 	.word	0x2000015c

08003410 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8003410:	2300      	movs	r3, #0
{
 8003412:	b570      	push	{r4, r5, r6, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8003414:	461e      	mov	r6, r3
 8003416:	1c4d      	adds	r5, r1, #1
  for (idx = 0; idx < len; idx++)
 8003418:	b2dc      	uxtb	r4, r3
 800341a:	42a2      	cmp	r2, r4
 800341c:	d800      	bhi.n	8003420 <IntToUnicode+0x10>
  }
}
 800341e:	bd70      	pop	{r4, r5, r6, pc}
      pbuf[2 * idx] = (value >> 28) + '0';
 8003420:	0f04      	lsrs	r4, r0, #28
    if (((value >> 28)) < 0xA)
 8003422:	f1b0 4f20 	cmp.w	r0, #2684354560	@ 0xa0000000
      pbuf[2 * idx] = (value >> 28) + '0';
 8003426:	bf34      	ite	cc
 8003428:	3430      	addcc	r4, #48	@ 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800342a:	3437      	addcs	r4, #55	@ 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800342c:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    value = value << 4;
 8003430:	0100      	lsls	r0, r0, #4
    pbuf[2 * idx + 1] = 0;
 8003432:	f805 6013 	strb.w	r6, [r5, r3, lsl #1]
  for (idx = 0; idx < len; idx++)
 8003436:	3301      	adds	r3, #1
 8003438:	e7ee      	b.n	8003418 <IntToUnicode+0x8>
	...

0800343c <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 800343c:	231a      	movs	r3, #26
{
 800343e:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8003440:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8003442:	4b0a      	ldr	r3, [pc, #40]	@ (800346c <USBD_FS_SerialStrDescriptor+0x30>)
 8003444:	f8d3 07e8 	ldr.w	r0, [r3, #2024]	@ 0x7e8
  deviceserial0 += deviceserial2;
 8003448:	f8d3 27f0 	ldr.w	r2, [r3, #2032]	@ 0x7f0
  if (deviceserial0 != 0)
 800344c:	1880      	adds	r0, r0, r2
 800344e:	d00a      	beq.n	8003466 <USBD_FS_SerialStrDescriptor+0x2a>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8003450:	f8d3 47ec 	ldr.w	r4, [r3, #2028]	@ 0x7ec
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8003454:	4906      	ldr	r1, [pc, #24]	@ (8003470 <USBD_FS_SerialStrDescriptor+0x34>)
 8003456:	2208      	movs	r2, #8
 8003458:	f7ff ffda 	bl	8003410 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800345c:	2204      	movs	r2, #4
 800345e:	4620      	mov	r0, r4
 8003460:	3110      	adds	r1, #16
 8003462:	f7ff ffd5 	bl	8003410 <IntToUnicode>
}
 8003466:	4803      	ldr	r0, [pc, #12]	@ (8003474 <USBD_FS_SerialStrDescriptor+0x38>)
 8003468:	bd10      	pop	{r4, pc}
 800346a:	bf00      	nop
 800346c:	1ffff000 	.word	0x1ffff000
 8003470:	20000142 	.word	0x20000142
 8003474:	20000140 	.word	0x20000140

08003478 <USBD_FS_ManufacturerStrDescriptor>:
{
 8003478:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800347a:	4c04      	ldr	r4, [pc, #16]	@ (800348c <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 800347c:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800347e:	4804      	ldr	r0, [pc, #16]	@ (8003490 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8003480:	4621      	mov	r1, r4
 8003482:	f7ff fef9 	bl	8003278 <USBD_GetString>
}
 8003486:	4620      	mov	r0, r4
 8003488:	bd10      	pop	{r4, pc}
 800348a:	bf00      	nop
 800348c:	20000ea8 	.word	0x20000ea8
 8003490:	080040f2 	.word	0x080040f2

08003494 <USBD_FS_ProductStrDescriptor>:
{
 8003494:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8003496:	4c04      	ldr	r4, [pc, #16]	@ (80034a8 <USBD_FS_ProductStrDescriptor+0x14>)
{
 8003498:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800349a:	4804      	ldr	r0, [pc, #16]	@ (80034ac <USBD_FS_ProductStrDescriptor+0x18>)
 800349c:	4621      	mov	r1, r4
 800349e:	f7ff feeb 	bl	8003278 <USBD_GetString>
}
 80034a2:	4620      	mov	r0, r4
 80034a4:	bd10      	pop	{r4, pc}
 80034a6:	bf00      	nop
 80034a8:	20000ea8 	.word	0x20000ea8
 80034ac:	08004105 	.word	0x08004105

080034b0 <USBD_FS_ConfigStrDescriptor>:
{
 80034b0:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80034b2:	4c04      	ldr	r4, [pc, #16]	@ (80034c4 <USBD_FS_ConfigStrDescriptor+0x14>)
{
 80034b4:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80034b6:	4804      	ldr	r0, [pc, #16]	@ (80034c8 <USBD_FS_ConfigStrDescriptor+0x18>)
 80034b8:	4621      	mov	r1, r4
 80034ba:	f7ff fedd 	bl	8003278 <USBD_GetString>
}
 80034be:	4620      	mov	r0, r4
 80034c0:	bd10      	pop	{r4, pc}
 80034c2:	bf00      	nop
 80034c4:	20000ea8 	.word	0x20000ea8
 80034c8:	0800411b 	.word	0x0800411b

080034cc <USBD_FS_InterfaceStrDescriptor>:
{
 80034cc:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80034ce:	4c04      	ldr	r4, [pc, #16]	@ (80034e0 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 80034d0:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80034d2:	4804      	ldr	r0, [pc, #16]	@ (80034e4 <USBD_FS_InterfaceStrDescriptor+0x18>)
 80034d4:	4621      	mov	r1, r4
 80034d6:	f7ff fecf 	bl	8003278 <USBD_GetString>
}
 80034da:	4620      	mov	r0, r4
 80034dc:	bd10      	pop	{r4, pc}
 80034de:	bf00      	nop
 80034e0:	20000ea8 	.word	0x20000ea8
 80034e4:	08004126 	.word	0x08004126

080034e8 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 80034e8:	b118      	cbz	r0, 80034f2 <USBD_Get_USB_Status+0xa>
 80034ea:	2802      	cmp	r0, #2
 80034ec:	bf0c      	ite	eq
 80034ee:	2001      	moveq	r0, #1
 80034f0:	2002      	movne	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 80034f2:	4770      	bx	lr

080034f4 <HAL_PCD_MspInit>:
{
 80034f4:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 80034f6:	4b0e      	ldr	r3, [pc, #56]	@ (8003530 <HAL_PCD_MspInit+0x3c>)
 80034f8:	6802      	ldr	r2, [r0, #0]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d115      	bne.n	800352a <HAL_PCD_MspInit+0x36>
    __HAL_RCC_USB_CLK_ENABLE();
 80034fe:	f503 33da 	add.w	r3, r3, #111616	@ 0x1b400
 8003502:	69da      	ldr	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8003504:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 8003506:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800350a:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800350c:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 800350e:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8003510:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 8003512:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003516:	9301      	str	r3, [sp, #4]
 8003518:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800351a:	f7fd f8c9 	bl	80006b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800351e:	2014      	movs	r0, #20
}
 8003520:	b003      	add	sp, #12
 8003522:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8003526:	f7fd b8f3 	b.w	8000710 <HAL_NVIC_EnableIRQ>
}
 800352a:	b003      	add	sp, #12
 800352c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003530:	40005c00 	.word	0x40005c00

08003534 <HAL_PCD_SetupStageCallback>:
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8003534:	f500 7126 	add.w	r1, r0, #664	@ 0x298
 8003538:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 800353c:	f7ff bb9d 	b.w	8002c7a <USBD_LL_SetupStage>

08003540 <HAL_PCD_DataOutStageCallback>:
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8003540:	2328      	movs	r3, #40	@ 0x28
 8003542:	fb03 0301 	mla	r3, r3, r1, r0
 8003546:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 800354a:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
 800354e:	f7ff bbc1 	b.w	8002cd4 <USBD_LL_DataOutStage>

08003552 <HAL_PCD_DataInStageCallback>:
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8003552:	2328      	movs	r3, #40	@ 0x28
 8003554:	fb03 0301 	mla	r3, r3, r1, r0
 8003558:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 800355c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800355e:	f7ff bbf1 	b.w	8002d44 <USBD_LL_DataInStage>

08003562 <HAL_PCD_SOFCallback>:
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8003562:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 8003566:	f7ff bc86 	b.w	8002e76 <USBD_LL_SOF>

0800356a <HAL_PCD_ResetCallback>:
{
 800356a:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800356c:	7983      	ldrb	r3, [r0, #6]
{
 800356e:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8003570:	2b02      	cmp	r3, #2
 8003572:	d001      	beq.n	8003578 <HAL_PCD_ResetCallback+0xe>
    Error_Handler();
 8003574:	f7fc ff9e 	bl	80004b4 <Error_Handler>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8003578:	f8d4 02d4 	ldr.w	r0, [r4, #724]	@ 0x2d4
 800357c:	2101      	movs	r1, #1
 800357e:	f7ff fc64 	bl	8002e4a <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8003582:	f8d4 02d4 	ldr.w	r0, [r4, #724]	@ 0x2d4
}
 8003586:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800358a:	f7ff bc37 	b.w	8002dfc <USBD_LL_Reset>
	...

08003590 <HAL_PCD_SuspendCallback>:
{
 8003590:	b510      	push	{r4, lr}
 8003592:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8003594:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 8003598:	f7ff fc5a 	bl	8002e50 <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 800359c:	7aa3      	ldrb	r3, [r4, #10]
 800359e:	b123      	cbz	r3, 80035aa <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80035a0:	4a02      	ldr	r2, [pc, #8]	@ (80035ac <HAL_PCD_SuspendCallback+0x1c>)
 80035a2:	6913      	ldr	r3, [r2, #16]
 80035a4:	f043 0306 	orr.w	r3, r3, #6
 80035a8:	6113      	str	r3, [r2, #16]
}
 80035aa:	bd10      	pop	{r4, pc}
 80035ac:	e000ed00 	.word	0xe000ed00

080035b0 <HAL_PCD_ResumeCallback>:
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80035b0:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 80035b4:	f7ff bc55 	b.w	8002e62 <USBD_LL_Resume>

080035b8 <USBD_LL_Init>:
{
 80035b8:	b510      	push	{r4, lr}
  hpcd_USB_FS.Instance = USB;
 80035ba:	4b1d      	ldr	r3, [pc, #116]	@ (8003630 <USBD_LL_Init+0x78>)
{
 80035bc:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 80035be:	481d      	ldr	r0, [pc, #116]	@ (8003634 <USBD_LL_Init+0x7c>)
  hpcd_USB_FS.Instance = USB;
 80035c0:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80035c2:	2308      	movs	r3, #8
 80035c4:	7103      	strb	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80035c6:	2302      	movs	r3, #2
 80035c8:	7183      	strb	r3, [r0, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80035ca:	2300      	movs	r3, #0
  hpcd_USB_FS.pData = pdev;
 80035cc:	f8c0 42d4 	str.w	r4, [r0, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 80035d0:	f8c4 02c0 	str.w	r0, [r4, #704]	@ 0x2c0
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80035d4:	8143      	strh	r3, [r0, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80035d6:	7303      	strb	r3, [r0, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80035d8:	f7fd f9b2 	bl	8000940 <HAL_PCD_Init>
 80035dc:	b108      	cbz	r0, 80035e2 <USBD_LL_Init+0x2a>
    Error_Handler( );
 80035de:	f7fc ff69 	bl	80004b4 <Error_Handler>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80035e2:	2200      	movs	r2, #0
 80035e4:	2318      	movs	r3, #24
 80035e6:	4611      	mov	r1, r2
 80035e8:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 80035ec:	f7fe f833 	bl	8001656 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80035f0:	2358      	movs	r3, #88	@ 0x58
 80035f2:	2200      	movs	r2, #0
 80035f4:	2180      	movs	r1, #128	@ 0x80
 80035f6:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 80035fa:	f7fe f82c 	bl	8001656 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80035fe:	23c0      	movs	r3, #192	@ 0xc0
 8003600:	2200      	movs	r2, #0
 8003602:	2181      	movs	r1, #129	@ 0x81
 8003604:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 8003608:	f7fe f825 	bl	8001656 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800360c:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8003610:	2200      	movs	r2, #0
 8003612:	2101      	movs	r1, #1
 8003614:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 8003618:	f7fe f81d 	bl	8001656 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800361c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003620:	2200      	movs	r2, #0
 8003622:	2182      	movs	r1, #130	@ 0x82
 8003624:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 8003628:	f7fe f815 	bl	8001656 <HAL_PCDEx_PMAConfig>
}
 800362c:	2000      	movs	r0, #0
 800362e:	bd10      	pop	{r4, pc}
 8003630:	40005c00 	.word	0x40005c00
 8003634:	200012c8 	.word	0x200012c8

08003638 <USBD_LL_Start>:
{
 8003638:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 800363a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 800363e:	f7fd f9e2 	bl	8000a06 <HAL_PCD_Start>
}
 8003642:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003646:	f7ff bf4f 	b.w	80034e8 <USBD_Get_USB_Status>

0800364a <USBD_LL_OpenEP>:
{
 800364a:	b510      	push	{r4, lr}
 800364c:	4614      	mov	r4, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800364e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
{
 8003652:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8003654:	4623      	mov	r3, r4
 8003656:	f7fd ff07 	bl	8001468 <HAL_PCD_EP_Open>
}
 800365a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800365e:	f7ff bf43 	b.w	80034e8 <USBD_Get_USB_Status>

08003662 <USBD_LL_CloseEP>:
{
 8003662:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8003664:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 8003668:	f7fd ff2e 	bl	80014c8 <HAL_PCD_EP_Close>
}
 800366c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003670:	f7ff bf3a 	b.w	80034e8 <USBD_Get_USB_Status>

08003674 <USBD_LL_StallEP>:
{
 8003674:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8003676:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 800367a:	f7fd ff84 	bl	8001586 <HAL_PCD_EP_SetStall>
}
 800367e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003682:	f7ff bf31 	b.w	80034e8 <USBD_Get_USB_Status>

08003686 <USBD_LL_ClearStallEP>:
{
 8003686:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8003688:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 800368c:	f7fd ffb1 	bl	80015f2 <HAL_PCD_EP_ClrStall>
}
 8003690:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003694:	f7ff bf28 	b.w	80034e8 <USBD_Get_USB_Status>

08003698 <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8003698:	2228      	movs	r2, #40	@ 0x28
  if((ep_addr & 0x80) == 0x80)
 800369a:	f011 0f80 	tst.w	r1, #128	@ 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800369e:	f8d0 32c0 	ldr.w	r3, [r0, #704]	@ 0x2c0
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80036a2:	bf1b      	ittet	ne
 80036a4:	f001 017f 	andne.w	r1, r1, #127	@ 0x7f
 80036a8:	fb02 3301 	mlane	r3, r2, r1, r3
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80036ac:	fb02 3301 	mlaeq	r3, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80036b0:	7c98      	ldrbne	r0, [r3, #18]
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80036b2:	bf08      	it	eq
 80036b4:	f893 0152 	ldrbeq.w	r0, [r3, #338]	@ 0x152
}
 80036b8:	4770      	bx	lr

080036ba <USBD_LL_SetUSBAddress>:
{
 80036ba:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80036bc:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 80036c0:	f7fd f9ba 	bl	8000a38 <HAL_PCD_SetAddress>
}
 80036c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 80036c8:	f7ff bf0e 	b.w	80034e8 <USBD_Get_USB_Status>

080036cc <USBD_LL_Transmit>:
{
 80036cc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80036ce:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 80036d2:	f7fd ff40 	bl	8001556 <HAL_PCD_EP_Transmit>
}
 80036d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 80036da:	f7ff bf05 	b.w	80034e8 <USBD_Get_USB_Status>

080036de <USBD_LL_PrepareReceive>:
{
 80036de:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80036e0:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 80036e4:	f7fd ff18 	bl	8001518 <HAL_PCD_EP_Receive>
}
 80036e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 80036ec:	f7ff befc 	b.w	80034e8 <USBD_Get_USB_Status>

080036f0 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80036f0:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 80036f4:	f7fd bf27 	b.w	8001546 <HAL_PCD_EP_GetRxCount>

080036f8 <USBD_static_malloc>:
}
 80036f8:	4800      	ldr	r0, [pc, #0]	@ (80036fc <USBD_static_malloc+0x4>)
 80036fa:	4770      	bx	lr
 80036fc:	200010a8 	.word	0x200010a8

08003700 <USBD_static_free>:
}
 8003700:	4770      	bx	lr

08003702 <HAL_PCDEx_SetConnectionState>:
}
 8003702:	4770      	bx	lr

08003704 <siprintf>:
 8003704:	b40e      	push	{r1, r2, r3}
 8003706:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800370a:	b500      	push	{lr}
 800370c:	b09c      	sub	sp, #112	@ 0x70
 800370e:	ab1d      	add	r3, sp, #116	@ 0x74
 8003710:	9002      	str	r0, [sp, #8]
 8003712:	9006      	str	r0, [sp, #24]
 8003714:	9107      	str	r1, [sp, #28]
 8003716:	9104      	str	r1, [sp, #16]
 8003718:	4808      	ldr	r0, [pc, #32]	@ (800373c <siprintf+0x38>)
 800371a:	4909      	ldr	r1, [pc, #36]	@ (8003740 <siprintf+0x3c>)
 800371c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003720:	9105      	str	r1, [sp, #20]
 8003722:	6800      	ldr	r0, [r0, #0]
 8003724:	a902      	add	r1, sp, #8
 8003726:	9301      	str	r3, [sp, #4]
 8003728:	f000 f992 	bl	8003a50 <_svfiprintf_r>
 800372c:	2200      	movs	r2, #0
 800372e:	9b02      	ldr	r3, [sp, #8]
 8003730:	701a      	strb	r2, [r3, #0]
 8003732:	b01c      	add	sp, #112	@ 0x70
 8003734:	f85d eb04 	ldr.w	lr, [sp], #4
 8003738:	b003      	add	sp, #12
 800373a:	4770      	bx	lr
 800373c:	20000190 	.word	0x20000190
 8003740:	ffff0208 	.word	0xffff0208

08003744 <memset>:
 8003744:	4603      	mov	r3, r0
 8003746:	4402      	add	r2, r0
 8003748:	4293      	cmp	r3, r2
 800374a:	d100      	bne.n	800374e <memset+0xa>
 800374c:	4770      	bx	lr
 800374e:	f803 1b01 	strb.w	r1, [r3], #1
 8003752:	e7f9      	b.n	8003748 <memset+0x4>

08003754 <__errno>:
 8003754:	4b01      	ldr	r3, [pc, #4]	@ (800375c <__errno+0x8>)
 8003756:	6818      	ldr	r0, [r3, #0]
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	20000190 	.word	0x20000190

08003760 <__libc_init_array>:
 8003760:	b570      	push	{r4, r5, r6, lr}
 8003762:	2600      	movs	r6, #0
 8003764:	4d0c      	ldr	r5, [pc, #48]	@ (8003798 <__libc_init_array+0x38>)
 8003766:	4c0d      	ldr	r4, [pc, #52]	@ (800379c <__libc_init_array+0x3c>)
 8003768:	1b64      	subs	r4, r4, r5
 800376a:	10a4      	asrs	r4, r4, #2
 800376c:	42a6      	cmp	r6, r4
 800376e:	d109      	bne.n	8003784 <__libc_init_array+0x24>
 8003770:	f000 fc78 	bl	8004064 <_init>
 8003774:	2600      	movs	r6, #0
 8003776:	4d0a      	ldr	r5, [pc, #40]	@ (80037a0 <__libc_init_array+0x40>)
 8003778:	4c0a      	ldr	r4, [pc, #40]	@ (80037a4 <__libc_init_array+0x44>)
 800377a:	1b64      	subs	r4, r4, r5
 800377c:	10a4      	asrs	r4, r4, #2
 800377e:	42a6      	cmp	r6, r4
 8003780:	d105      	bne.n	800378e <__libc_init_array+0x2e>
 8003782:	bd70      	pop	{r4, r5, r6, pc}
 8003784:	f855 3b04 	ldr.w	r3, [r5], #4
 8003788:	4798      	blx	r3
 800378a:	3601      	adds	r6, #1
 800378c:	e7ee      	b.n	800376c <__libc_init_array+0xc>
 800378e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003792:	4798      	blx	r3
 8003794:	3601      	adds	r6, #1
 8003796:	e7f2      	b.n	800377e <__libc_init_array+0x1e>
 8003798:	08004170 	.word	0x08004170
 800379c:	08004170 	.word	0x08004170
 80037a0:	08004170 	.word	0x08004170
 80037a4:	08004174 	.word	0x08004174

080037a8 <__retarget_lock_acquire_recursive>:
 80037a8:	4770      	bx	lr

080037aa <__retarget_lock_release_recursive>:
 80037aa:	4770      	bx	lr

080037ac <_free_r>:
 80037ac:	b538      	push	{r3, r4, r5, lr}
 80037ae:	4605      	mov	r5, r0
 80037b0:	2900      	cmp	r1, #0
 80037b2:	d040      	beq.n	8003836 <_free_r+0x8a>
 80037b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037b8:	1f0c      	subs	r4, r1, #4
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	bfb8      	it	lt
 80037be:	18e4      	addlt	r4, r4, r3
 80037c0:	f000 f8de 	bl	8003980 <__malloc_lock>
 80037c4:	4a1c      	ldr	r2, [pc, #112]	@ (8003838 <_free_r+0x8c>)
 80037c6:	6813      	ldr	r3, [r2, #0]
 80037c8:	b933      	cbnz	r3, 80037d8 <_free_r+0x2c>
 80037ca:	6063      	str	r3, [r4, #4]
 80037cc:	6014      	str	r4, [r2, #0]
 80037ce:	4628      	mov	r0, r5
 80037d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80037d4:	f000 b8da 	b.w	800398c <__malloc_unlock>
 80037d8:	42a3      	cmp	r3, r4
 80037da:	d908      	bls.n	80037ee <_free_r+0x42>
 80037dc:	6820      	ldr	r0, [r4, #0]
 80037de:	1821      	adds	r1, r4, r0
 80037e0:	428b      	cmp	r3, r1
 80037e2:	bf01      	itttt	eq
 80037e4:	6819      	ldreq	r1, [r3, #0]
 80037e6:	685b      	ldreq	r3, [r3, #4]
 80037e8:	1809      	addeq	r1, r1, r0
 80037ea:	6021      	streq	r1, [r4, #0]
 80037ec:	e7ed      	b.n	80037ca <_free_r+0x1e>
 80037ee:	461a      	mov	r2, r3
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	b10b      	cbz	r3, 80037f8 <_free_r+0x4c>
 80037f4:	42a3      	cmp	r3, r4
 80037f6:	d9fa      	bls.n	80037ee <_free_r+0x42>
 80037f8:	6811      	ldr	r1, [r2, #0]
 80037fa:	1850      	adds	r0, r2, r1
 80037fc:	42a0      	cmp	r0, r4
 80037fe:	d10b      	bne.n	8003818 <_free_r+0x6c>
 8003800:	6820      	ldr	r0, [r4, #0]
 8003802:	4401      	add	r1, r0
 8003804:	1850      	adds	r0, r2, r1
 8003806:	4283      	cmp	r3, r0
 8003808:	6011      	str	r1, [r2, #0]
 800380a:	d1e0      	bne.n	80037ce <_free_r+0x22>
 800380c:	6818      	ldr	r0, [r3, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	4408      	add	r0, r1
 8003812:	6010      	str	r0, [r2, #0]
 8003814:	6053      	str	r3, [r2, #4]
 8003816:	e7da      	b.n	80037ce <_free_r+0x22>
 8003818:	d902      	bls.n	8003820 <_free_r+0x74>
 800381a:	230c      	movs	r3, #12
 800381c:	602b      	str	r3, [r5, #0]
 800381e:	e7d6      	b.n	80037ce <_free_r+0x22>
 8003820:	6820      	ldr	r0, [r4, #0]
 8003822:	1821      	adds	r1, r4, r0
 8003824:	428b      	cmp	r3, r1
 8003826:	bf01      	itttt	eq
 8003828:	6819      	ldreq	r1, [r3, #0]
 800382a:	685b      	ldreq	r3, [r3, #4]
 800382c:	1809      	addeq	r1, r1, r0
 800382e:	6021      	streq	r1, [r4, #0]
 8003830:	6063      	str	r3, [r4, #4]
 8003832:	6054      	str	r4, [r2, #4]
 8003834:	e7cb      	b.n	80037ce <_free_r+0x22>
 8003836:	bd38      	pop	{r3, r4, r5, pc}
 8003838:	200016e4 	.word	0x200016e4

0800383c <sbrk_aligned>:
 800383c:	b570      	push	{r4, r5, r6, lr}
 800383e:	4e0f      	ldr	r6, [pc, #60]	@ (800387c <sbrk_aligned+0x40>)
 8003840:	460c      	mov	r4, r1
 8003842:	6831      	ldr	r1, [r6, #0]
 8003844:	4605      	mov	r5, r0
 8003846:	b911      	cbnz	r1, 800384e <sbrk_aligned+0x12>
 8003848:	f000 fbaa 	bl	8003fa0 <_sbrk_r>
 800384c:	6030      	str	r0, [r6, #0]
 800384e:	4621      	mov	r1, r4
 8003850:	4628      	mov	r0, r5
 8003852:	f000 fba5 	bl	8003fa0 <_sbrk_r>
 8003856:	1c43      	adds	r3, r0, #1
 8003858:	d103      	bne.n	8003862 <sbrk_aligned+0x26>
 800385a:	f04f 34ff 	mov.w	r4, #4294967295
 800385e:	4620      	mov	r0, r4
 8003860:	bd70      	pop	{r4, r5, r6, pc}
 8003862:	1cc4      	adds	r4, r0, #3
 8003864:	f024 0403 	bic.w	r4, r4, #3
 8003868:	42a0      	cmp	r0, r4
 800386a:	d0f8      	beq.n	800385e <sbrk_aligned+0x22>
 800386c:	1a21      	subs	r1, r4, r0
 800386e:	4628      	mov	r0, r5
 8003870:	f000 fb96 	bl	8003fa0 <_sbrk_r>
 8003874:	3001      	adds	r0, #1
 8003876:	d1f2      	bne.n	800385e <sbrk_aligned+0x22>
 8003878:	e7ef      	b.n	800385a <sbrk_aligned+0x1e>
 800387a:	bf00      	nop
 800387c:	200016e0 	.word	0x200016e0

08003880 <_malloc_r>:
 8003880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003884:	1ccd      	adds	r5, r1, #3
 8003886:	f025 0503 	bic.w	r5, r5, #3
 800388a:	3508      	adds	r5, #8
 800388c:	2d0c      	cmp	r5, #12
 800388e:	bf38      	it	cc
 8003890:	250c      	movcc	r5, #12
 8003892:	2d00      	cmp	r5, #0
 8003894:	4606      	mov	r6, r0
 8003896:	db01      	blt.n	800389c <_malloc_r+0x1c>
 8003898:	42a9      	cmp	r1, r5
 800389a:	d904      	bls.n	80038a6 <_malloc_r+0x26>
 800389c:	230c      	movs	r3, #12
 800389e:	6033      	str	r3, [r6, #0]
 80038a0:	2000      	movs	r0, #0
 80038a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80038a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800397c <_malloc_r+0xfc>
 80038aa:	f000 f869 	bl	8003980 <__malloc_lock>
 80038ae:	f8d8 3000 	ldr.w	r3, [r8]
 80038b2:	461c      	mov	r4, r3
 80038b4:	bb44      	cbnz	r4, 8003908 <_malloc_r+0x88>
 80038b6:	4629      	mov	r1, r5
 80038b8:	4630      	mov	r0, r6
 80038ba:	f7ff ffbf 	bl	800383c <sbrk_aligned>
 80038be:	1c43      	adds	r3, r0, #1
 80038c0:	4604      	mov	r4, r0
 80038c2:	d158      	bne.n	8003976 <_malloc_r+0xf6>
 80038c4:	f8d8 4000 	ldr.w	r4, [r8]
 80038c8:	4627      	mov	r7, r4
 80038ca:	2f00      	cmp	r7, #0
 80038cc:	d143      	bne.n	8003956 <_malloc_r+0xd6>
 80038ce:	2c00      	cmp	r4, #0
 80038d0:	d04b      	beq.n	800396a <_malloc_r+0xea>
 80038d2:	6823      	ldr	r3, [r4, #0]
 80038d4:	4639      	mov	r1, r7
 80038d6:	4630      	mov	r0, r6
 80038d8:	eb04 0903 	add.w	r9, r4, r3
 80038dc:	f000 fb60 	bl	8003fa0 <_sbrk_r>
 80038e0:	4581      	cmp	r9, r0
 80038e2:	d142      	bne.n	800396a <_malloc_r+0xea>
 80038e4:	6821      	ldr	r1, [r4, #0]
 80038e6:	4630      	mov	r0, r6
 80038e8:	1a6d      	subs	r5, r5, r1
 80038ea:	4629      	mov	r1, r5
 80038ec:	f7ff ffa6 	bl	800383c <sbrk_aligned>
 80038f0:	3001      	adds	r0, #1
 80038f2:	d03a      	beq.n	800396a <_malloc_r+0xea>
 80038f4:	6823      	ldr	r3, [r4, #0]
 80038f6:	442b      	add	r3, r5
 80038f8:	6023      	str	r3, [r4, #0]
 80038fa:	f8d8 3000 	ldr.w	r3, [r8]
 80038fe:	685a      	ldr	r2, [r3, #4]
 8003900:	bb62      	cbnz	r2, 800395c <_malloc_r+0xdc>
 8003902:	f8c8 7000 	str.w	r7, [r8]
 8003906:	e00f      	b.n	8003928 <_malloc_r+0xa8>
 8003908:	6822      	ldr	r2, [r4, #0]
 800390a:	1b52      	subs	r2, r2, r5
 800390c:	d420      	bmi.n	8003950 <_malloc_r+0xd0>
 800390e:	2a0b      	cmp	r2, #11
 8003910:	d917      	bls.n	8003942 <_malloc_r+0xc2>
 8003912:	1961      	adds	r1, r4, r5
 8003914:	42a3      	cmp	r3, r4
 8003916:	6025      	str	r5, [r4, #0]
 8003918:	bf18      	it	ne
 800391a:	6059      	strne	r1, [r3, #4]
 800391c:	6863      	ldr	r3, [r4, #4]
 800391e:	bf08      	it	eq
 8003920:	f8c8 1000 	streq.w	r1, [r8]
 8003924:	5162      	str	r2, [r4, r5]
 8003926:	604b      	str	r3, [r1, #4]
 8003928:	4630      	mov	r0, r6
 800392a:	f000 f82f 	bl	800398c <__malloc_unlock>
 800392e:	f104 000b 	add.w	r0, r4, #11
 8003932:	1d23      	adds	r3, r4, #4
 8003934:	f020 0007 	bic.w	r0, r0, #7
 8003938:	1ac2      	subs	r2, r0, r3
 800393a:	bf1c      	itt	ne
 800393c:	1a1b      	subne	r3, r3, r0
 800393e:	50a3      	strne	r3, [r4, r2]
 8003940:	e7af      	b.n	80038a2 <_malloc_r+0x22>
 8003942:	6862      	ldr	r2, [r4, #4]
 8003944:	42a3      	cmp	r3, r4
 8003946:	bf0c      	ite	eq
 8003948:	f8c8 2000 	streq.w	r2, [r8]
 800394c:	605a      	strne	r2, [r3, #4]
 800394e:	e7eb      	b.n	8003928 <_malloc_r+0xa8>
 8003950:	4623      	mov	r3, r4
 8003952:	6864      	ldr	r4, [r4, #4]
 8003954:	e7ae      	b.n	80038b4 <_malloc_r+0x34>
 8003956:	463c      	mov	r4, r7
 8003958:	687f      	ldr	r7, [r7, #4]
 800395a:	e7b6      	b.n	80038ca <_malloc_r+0x4a>
 800395c:	461a      	mov	r2, r3
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	42a3      	cmp	r3, r4
 8003962:	d1fb      	bne.n	800395c <_malloc_r+0xdc>
 8003964:	2300      	movs	r3, #0
 8003966:	6053      	str	r3, [r2, #4]
 8003968:	e7de      	b.n	8003928 <_malloc_r+0xa8>
 800396a:	230c      	movs	r3, #12
 800396c:	4630      	mov	r0, r6
 800396e:	6033      	str	r3, [r6, #0]
 8003970:	f000 f80c 	bl	800398c <__malloc_unlock>
 8003974:	e794      	b.n	80038a0 <_malloc_r+0x20>
 8003976:	6005      	str	r5, [r0, #0]
 8003978:	e7d6      	b.n	8003928 <_malloc_r+0xa8>
 800397a:	bf00      	nop
 800397c:	200016e4 	.word	0x200016e4

08003980 <__malloc_lock>:
 8003980:	4801      	ldr	r0, [pc, #4]	@ (8003988 <__malloc_lock+0x8>)
 8003982:	f7ff bf11 	b.w	80037a8 <__retarget_lock_acquire_recursive>
 8003986:	bf00      	nop
 8003988:	200016dc 	.word	0x200016dc

0800398c <__malloc_unlock>:
 800398c:	4801      	ldr	r0, [pc, #4]	@ (8003994 <__malloc_unlock+0x8>)
 800398e:	f7ff bf0c 	b.w	80037aa <__retarget_lock_release_recursive>
 8003992:	bf00      	nop
 8003994:	200016dc 	.word	0x200016dc

08003998 <__ssputs_r>:
 8003998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800399c:	461f      	mov	r7, r3
 800399e:	688e      	ldr	r6, [r1, #8]
 80039a0:	4682      	mov	sl, r0
 80039a2:	42be      	cmp	r6, r7
 80039a4:	460c      	mov	r4, r1
 80039a6:	4690      	mov	r8, r2
 80039a8:	680b      	ldr	r3, [r1, #0]
 80039aa:	d82d      	bhi.n	8003a08 <__ssputs_r+0x70>
 80039ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80039b0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80039b4:	d026      	beq.n	8003a04 <__ssputs_r+0x6c>
 80039b6:	6965      	ldr	r5, [r4, #20]
 80039b8:	6909      	ldr	r1, [r1, #16]
 80039ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80039be:	eba3 0901 	sub.w	r9, r3, r1
 80039c2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80039c6:	1c7b      	adds	r3, r7, #1
 80039c8:	444b      	add	r3, r9
 80039ca:	106d      	asrs	r5, r5, #1
 80039cc:	429d      	cmp	r5, r3
 80039ce:	bf38      	it	cc
 80039d0:	461d      	movcc	r5, r3
 80039d2:	0553      	lsls	r3, r2, #21
 80039d4:	d527      	bpl.n	8003a26 <__ssputs_r+0x8e>
 80039d6:	4629      	mov	r1, r5
 80039d8:	f7ff ff52 	bl	8003880 <_malloc_r>
 80039dc:	4606      	mov	r6, r0
 80039de:	b360      	cbz	r0, 8003a3a <__ssputs_r+0xa2>
 80039e0:	464a      	mov	r2, r9
 80039e2:	6921      	ldr	r1, [r4, #16]
 80039e4:	f000 fafa 	bl	8003fdc <memcpy>
 80039e8:	89a3      	ldrh	r3, [r4, #12]
 80039ea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80039ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039f2:	81a3      	strh	r3, [r4, #12]
 80039f4:	6126      	str	r6, [r4, #16]
 80039f6:	444e      	add	r6, r9
 80039f8:	6026      	str	r6, [r4, #0]
 80039fa:	463e      	mov	r6, r7
 80039fc:	6165      	str	r5, [r4, #20]
 80039fe:	eba5 0509 	sub.w	r5, r5, r9
 8003a02:	60a5      	str	r5, [r4, #8]
 8003a04:	42be      	cmp	r6, r7
 8003a06:	d900      	bls.n	8003a0a <__ssputs_r+0x72>
 8003a08:	463e      	mov	r6, r7
 8003a0a:	4632      	mov	r2, r6
 8003a0c:	4641      	mov	r1, r8
 8003a0e:	6820      	ldr	r0, [r4, #0]
 8003a10:	f000 faac 	bl	8003f6c <memmove>
 8003a14:	2000      	movs	r0, #0
 8003a16:	68a3      	ldr	r3, [r4, #8]
 8003a18:	1b9b      	subs	r3, r3, r6
 8003a1a:	60a3      	str	r3, [r4, #8]
 8003a1c:	6823      	ldr	r3, [r4, #0]
 8003a1e:	4433      	add	r3, r6
 8003a20:	6023      	str	r3, [r4, #0]
 8003a22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a26:	462a      	mov	r2, r5
 8003a28:	f000 fae6 	bl	8003ff8 <_realloc_r>
 8003a2c:	4606      	mov	r6, r0
 8003a2e:	2800      	cmp	r0, #0
 8003a30:	d1e0      	bne.n	80039f4 <__ssputs_r+0x5c>
 8003a32:	4650      	mov	r0, sl
 8003a34:	6921      	ldr	r1, [r4, #16]
 8003a36:	f7ff feb9 	bl	80037ac <_free_r>
 8003a3a:	230c      	movs	r3, #12
 8003a3c:	f8ca 3000 	str.w	r3, [sl]
 8003a40:	89a3      	ldrh	r3, [r4, #12]
 8003a42:	f04f 30ff 	mov.w	r0, #4294967295
 8003a46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a4a:	81a3      	strh	r3, [r4, #12]
 8003a4c:	e7e9      	b.n	8003a22 <__ssputs_r+0x8a>
	...

08003a50 <_svfiprintf_r>:
 8003a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a54:	4698      	mov	r8, r3
 8003a56:	898b      	ldrh	r3, [r1, #12]
 8003a58:	4607      	mov	r7, r0
 8003a5a:	061b      	lsls	r3, r3, #24
 8003a5c:	460d      	mov	r5, r1
 8003a5e:	4614      	mov	r4, r2
 8003a60:	b09d      	sub	sp, #116	@ 0x74
 8003a62:	d510      	bpl.n	8003a86 <_svfiprintf_r+0x36>
 8003a64:	690b      	ldr	r3, [r1, #16]
 8003a66:	b973      	cbnz	r3, 8003a86 <_svfiprintf_r+0x36>
 8003a68:	2140      	movs	r1, #64	@ 0x40
 8003a6a:	f7ff ff09 	bl	8003880 <_malloc_r>
 8003a6e:	6028      	str	r0, [r5, #0]
 8003a70:	6128      	str	r0, [r5, #16]
 8003a72:	b930      	cbnz	r0, 8003a82 <_svfiprintf_r+0x32>
 8003a74:	230c      	movs	r3, #12
 8003a76:	603b      	str	r3, [r7, #0]
 8003a78:	f04f 30ff 	mov.w	r0, #4294967295
 8003a7c:	b01d      	add	sp, #116	@ 0x74
 8003a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a82:	2340      	movs	r3, #64	@ 0x40
 8003a84:	616b      	str	r3, [r5, #20]
 8003a86:	2300      	movs	r3, #0
 8003a88:	9309      	str	r3, [sp, #36]	@ 0x24
 8003a8a:	2320      	movs	r3, #32
 8003a8c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003a90:	2330      	movs	r3, #48	@ 0x30
 8003a92:	f04f 0901 	mov.w	r9, #1
 8003a96:	f8cd 800c 	str.w	r8, [sp, #12]
 8003a9a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003c34 <_svfiprintf_r+0x1e4>
 8003a9e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003aa2:	4623      	mov	r3, r4
 8003aa4:	469a      	mov	sl, r3
 8003aa6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003aaa:	b10a      	cbz	r2, 8003ab0 <_svfiprintf_r+0x60>
 8003aac:	2a25      	cmp	r2, #37	@ 0x25
 8003aae:	d1f9      	bne.n	8003aa4 <_svfiprintf_r+0x54>
 8003ab0:	ebba 0b04 	subs.w	fp, sl, r4
 8003ab4:	d00b      	beq.n	8003ace <_svfiprintf_r+0x7e>
 8003ab6:	465b      	mov	r3, fp
 8003ab8:	4622      	mov	r2, r4
 8003aba:	4629      	mov	r1, r5
 8003abc:	4638      	mov	r0, r7
 8003abe:	f7ff ff6b 	bl	8003998 <__ssputs_r>
 8003ac2:	3001      	adds	r0, #1
 8003ac4:	f000 80a7 	beq.w	8003c16 <_svfiprintf_r+0x1c6>
 8003ac8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003aca:	445a      	add	r2, fp
 8003acc:	9209      	str	r2, [sp, #36]	@ 0x24
 8003ace:	f89a 3000 	ldrb.w	r3, [sl]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	f000 809f 	beq.w	8003c16 <_svfiprintf_r+0x1c6>
 8003ad8:	2300      	movs	r3, #0
 8003ada:	f04f 32ff 	mov.w	r2, #4294967295
 8003ade:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ae2:	f10a 0a01 	add.w	sl, sl, #1
 8003ae6:	9304      	str	r3, [sp, #16]
 8003ae8:	9307      	str	r3, [sp, #28]
 8003aea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003aee:	931a      	str	r3, [sp, #104]	@ 0x68
 8003af0:	4654      	mov	r4, sl
 8003af2:	2205      	movs	r2, #5
 8003af4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003af8:	484e      	ldr	r0, [pc, #312]	@ (8003c34 <_svfiprintf_r+0x1e4>)
 8003afa:	f000 fa61 	bl	8003fc0 <memchr>
 8003afe:	9a04      	ldr	r2, [sp, #16]
 8003b00:	b9d8      	cbnz	r0, 8003b3a <_svfiprintf_r+0xea>
 8003b02:	06d0      	lsls	r0, r2, #27
 8003b04:	bf44      	itt	mi
 8003b06:	2320      	movmi	r3, #32
 8003b08:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003b0c:	0711      	lsls	r1, r2, #28
 8003b0e:	bf44      	itt	mi
 8003b10:	232b      	movmi	r3, #43	@ 0x2b
 8003b12:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003b16:	f89a 3000 	ldrb.w	r3, [sl]
 8003b1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8003b1c:	d015      	beq.n	8003b4a <_svfiprintf_r+0xfa>
 8003b1e:	4654      	mov	r4, sl
 8003b20:	2000      	movs	r0, #0
 8003b22:	f04f 0c0a 	mov.w	ip, #10
 8003b26:	9a07      	ldr	r2, [sp, #28]
 8003b28:	4621      	mov	r1, r4
 8003b2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b2e:	3b30      	subs	r3, #48	@ 0x30
 8003b30:	2b09      	cmp	r3, #9
 8003b32:	d94b      	bls.n	8003bcc <_svfiprintf_r+0x17c>
 8003b34:	b1b0      	cbz	r0, 8003b64 <_svfiprintf_r+0x114>
 8003b36:	9207      	str	r2, [sp, #28]
 8003b38:	e014      	b.n	8003b64 <_svfiprintf_r+0x114>
 8003b3a:	eba0 0308 	sub.w	r3, r0, r8
 8003b3e:	fa09 f303 	lsl.w	r3, r9, r3
 8003b42:	4313      	orrs	r3, r2
 8003b44:	46a2      	mov	sl, r4
 8003b46:	9304      	str	r3, [sp, #16]
 8003b48:	e7d2      	b.n	8003af0 <_svfiprintf_r+0xa0>
 8003b4a:	9b03      	ldr	r3, [sp, #12]
 8003b4c:	1d19      	adds	r1, r3, #4
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	9103      	str	r1, [sp, #12]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	bfbb      	ittet	lt
 8003b56:	425b      	neglt	r3, r3
 8003b58:	f042 0202 	orrlt.w	r2, r2, #2
 8003b5c:	9307      	strge	r3, [sp, #28]
 8003b5e:	9307      	strlt	r3, [sp, #28]
 8003b60:	bfb8      	it	lt
 8003b62:	9204      	strlt	r2, [sp, #16]
 8003b64:	7823      	ldrb	r3, [r4, #0]
 8003b66:	2b2e      	cmp	r3, #46	@ 0x2e
 8003b68:	d10a      	bne.n	8003b80 <_svfiprintf_r+0x130>
 8003b6a:	7863      	ldrb	r3, [r4, #1]
 8003b6c:	2b2a      	cmp	r3, #42	@ 0x2a
 8003b6e:	d132      	bne.n	8003bd6 <_svfiprintf_r+0x186>
 8003b70:	9b03      	ldr	r3, [sp, #12]
 8003b72:	3402      	adds	r4, #2
 8003b74:	1d1a      	adds	r2, r3, #4
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	9203      	str	r2, [sp, #12]
 8003b7a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003b7e:	9305      	str	r3, [sp, #20]
 8003b80:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003c38 <_svfiprintf_r+0x1e8>
 8003b84:	2203      	movs	r2, #3
 8003b86:	4650      	mov	r0, sl
 8003b88:	7821      	ldrb	r1, [r4, #0]
 8003b8a:	f000 fa19 	bl	8003fc0 <memchr>
 8003b8e:	b138      	cbz	r0, 8003ba0 <_svfiprintf_r+0x150>
 8003b90:	2240      	movs	r2, #64	@ 0x40
 8003b92:	9b04      	ldr	r3, [sp, #16]
 8003b94:	eba0 000a 	sub.w	r0, r0, sl
 8003b98:	4082      	lsls	r2, r0
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	3401      	adds	r4, #1
 8003b9e:	9304      	str	r3, [sp, #16]
 8003ba0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ba4:	2206      	movs	r2, #6
 8003ba6:	4825      	ldr	r0, [pc, #148]	@ (8003c3c <_svfiprintf_r+0x1ec>)
 8003ba8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003bac:	f000 fa08 	bl	8003fc0 <memchr>
 8003bb0:	2800      	cmp	r0, #0
 8003bb2:	d036      	beq.n	8003c22 <_svfiprintf_r+0x1d2>
 8003bb4:	4b22      	ldr	r3, [pc, #136]	@ (8003c40 <_svfiprintf_r+0x1f0>)
 8003bb6:	bb1b      	cbnz	r3, 8003c00 <_svfiprintf_r+0x1b0>
 8003bb8:	9b03      	ldr	r3, [sp, #12]
 8003bba:	3307      	adds	r3, #7
 8003bbc:	f023 0307 	bic.w	r3, r3, #7
 8003bc0:	3308      	adds	r3, #8
 8003bc2:	9303      	str	r3, [sp, #12]
 8003bc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003bc6:	4433      	add	r3, r6
 8003bc8:	9309      	str	r3, [sp, #36]	@ 0x24
 8003bca:	e76a      	b.n	8003aa2 <_svfiprintf_r+0x52>
 8003bcc:	460c      	mov	r4, r1
 8003bce:	2001      	movs	r0, #1
 8003bd0:	fb0c 3202 	mla	r2, ip, r2, r3
 8003bd4:	e7a8      	b.n	8003b28 <_svfiprintf_r+0xd8>
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	f04f 0c0a 	mov.w	ip, #10
 8003bdc:	4619      	mov	r1, r3
 8003bde:	3401      	adds	r4, #1
 8003be0:	9305      	str	r3, [sp, #20]
 8003be2:	4620      	mov	r0, r4
 8003be4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003be8:	3a30      	subs	r2, #48	@ 0x30
 8003bea:	2a09      	cmp	r2, #9
 8003bec:	d903      	bls.n	8003bf6 <_svfiprintf_r+0x1a6>
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d0c6      	beq.n	8003b80 <_svfiprintf_r+0x130>
 8003bf2:	9105      	str	r1, [sp, #20]
 8003bf4:	e7c4      	b.n	8003b80 <_svfiprintf_r+0x130>
 8003bf6:	4604      	mov	r4, r0
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	fb0c 2101 	mla	r1, ip, r1, r2
 8003bfe:	e7f0      	b.n	8003be2 <_svfiprintf_r+0x192>
 8003c00:	ab03      	add	r3, sp, #12
 8003c02:	9300      	str	r3, [sp, #0]
 8003c04:	462a      	mov	r2, r5
 8003c06:	4638      	mov	r0, r7
 8003c08:	4b0e      	ldr	r3, [pc, #56]	@ (8003c44 <_svfiprintf_r+0x1f4>)
 8003c0a:	a904      	add	r1, sp, #16
 8003c0c:	f3af 8000 	nop.w
 8003c10:	1c42      	adds	r2, r0, #1
 8003c12:	4606      	mov	r6, r0
 8003c14:	d1d6      	bne.n	8003bc4 <_svfiprintf_r+0x174>
 8003c16:	89ab      	ldrh	r3, [r5, #12]
 8003c18:	065b      	lsls	r3, r3, #25
 8003c1a:	f53f af2d 	bmi.w	8003a78 <_svfiprintf_r+0x28>
 8003c1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003c20:	e72c      	b.n	8003a7c <_svfiprintf_r+0x2c>
 8003c22:	ab03      	add	r3, sp, #12
 8003c24:	9300      	str	r3, [sp, #0]
 8003c26:	462a      	mov	r2, r5
 8003c28:	4638      	mov	r0, r7
 8003c2a:	4b06      	ldr	r3, [pc, #24]	@ (8003c44 <_svfiprintf_r+0x1f4>)
 8003c2c:	a904      	add	r1, sp, #16
 8003c2e:	f000 f87d 	bl	8003d2c <_printf_i>
 8003c32:	e7ed      	b.n	8003c10 <_svfiprintf_r+0x1c0>
 8003c34:	08004134 	.word	0x08004134
 8003c38:	0800413a 	.word	0x0800413a
 8003c3c:	0800413e 	.word	0x0800413e
 8003c40:	00000000 	.word	0x00000000
 8003c44:	08003999 	.word	0x08003999

08003c48 <_printf_common>:
 8003c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c4c:	4616      	mov	r6, r2
 8003c4e:	4698      	mov	r8, r3
 8003c50:	688a      	ldr	r2, [r1, #8]
 8003c52:	690b      	ldr	r3, [r1, #16]
 8003c54:	4607      	mov	r7, r0
 8003c56:	4293      	cmp	r3, r2
 8003c58:	bfb8      	it	lt
 8003c5a:	4613      	movlt	r3, r2
 8003c5c:	6033      	str	r3, [r6, #0]
 8003c5e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003c62:	460c      	mov	r4, r1
 8003c64:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003c68:	b10a      	cbz	r2, 8003c6e <_printf_common+0x26>
 8003c6a:	3301      	adds	r3, #1
 8003c6c:	6033      	str	r3, [r6, #0]
 8003c6e:	6823      	ldr	r3, [r4, #0]
 8003c70:	0699      	lsls	r1, r3, #26
 8003c72:	bf42      	ittt	mi
 8003c74:	6833      	ldrmi	r3, [r6, #0]
 8003c76:	3302      	addmi	r3, #2
 8003c78:	6033      	strmi	r3, [r6, #0]
 8003c7a:	6825      	ldr	r5, [r4, #0]
 8003c7c:	f015 0506 	ands.w	r5, r5, #6
 8003c80:	d106      	bne.n	8003c90 <_printf_common+0x48>
 8003c82:	f104 0a19 	add.w	sl, r4, #25
 8003c86:	68e3      	ldr	r3, [r4, #12]
 8003c88:	6832      	ldr	r2, [r6, #0]
 8003c8a:	1a9b      	subs	r3, r3, r2
 8003c8c:	42ab      	cmp	r3, r5
 8003c8e:	dc2b      	bgt.n	8003ce8 <_printf_common+0xa0>
 8003c90:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003c94:	6822      	ldr	r2, [r4, #0]
 8003c96:	3b00      	subs	r3, #0
 8003c98:	bf18      	it	ne
 8003c9a:	2301      	movne	r3, #1
 8003c9c:	0692      	lsls	r2, r2, #26
 8003c9e:	d430      	bmi.n	8003d02 <_printf_common+0xba>
 8003ca0:	4641      	mov	r1, r8
 8003ca2:	4638      	mov	r0, r7
 8003ca4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003ca8:	47c8      	blx	r9
 8003caa:	3001      	adds	r0, #1
 8003cac:	d023      	beq.n	8003cf6 <_printf_common+0xae>
 8003cae:	6823      	ldr	r3, [r4, #0]
 8003cb0:	6922      	ldr	r2, [r4, #16]
 8003cb2:	f003 0306 	and.w	r3, r3, #6
 8003cb6:	2b04      	cmp	r3, #4
 8003cb8:	bf14      	ite	ne
 8003cba:	2500      	movne	r5, #0
 8003cbc:	6833      	ldreq	r3, [r6, #0]
 8003cbe:	f04f 0600 	mov.w	r6, #0
 8003cc2:	bf08      	it	eq
 8003cc4:	68e5      	ldreq	r5, [r4, #12]
 8003cc6:	f104 041a 	add.w	r4, r4, #26
 8003cca:	bf08      	it	eq
 8003ccc:	1aed      	subeq	r5, r5, r3
 8003cce:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003cd2:	bf08      	it	eq
 8003cd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	bfc4      	itt	gt
 8003cdc:	1a9b      	subgt	r3, r3, r2
 8003cde:	18ed      	addgt	r5, r5, r3
 8003ce0:	42b5      	cmp	r5, r6
 8003ce2:	d11a      	bne.n	8003d1a <_printf_common+0xd2>
 8003ce4:	2000      	movs	r0, #0
 8003ce6:	e008      	b.n	8003cfa <_printf_common+0xb2>
 8003ce8:	2301      	movs	r3, #1
 8003cea:	4652      	mov	r2, sl
 8003cec:	4641      	mov	r1, r8
 8003cee:	4638      	mov	r0, r7
 8003cf0:	47c8      	blx	r9
 8003cf2:	3001      	adds	r0, #1
 8003cf4:	d103      	bne.n	8003cfe <_printf_common+0xb6>
 8003cf6:	f04f 30ff 	mov.w	r0, #4294967295
 8003cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cfe:	3501      	adds	r5, #1
 8003d00:	e7c1      	b.n	8003c86 <_printf_common+0x3e>
 8003d02:	2030      	movs	r0, #48	@ 0x30
 8003d04:	18e1      	adds	r1, r4, r3
 8003d06:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003d0a:	1c5a      	adds	r2, r3, #1
 8003d0c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003d10:	4422      	add	r2, r4
 8003d12:	3302      	adds	r3, #2
 8003d14:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003d18:	e7c2      	b.n	8003ca0 <_printf_common+0x58>
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	4622      	mov	r2, r4
 8003d1e:	4641      	mov	r1, r8
 8003d20:	4638      	mov	r0, r7
 8003d22:	47c8      	blx	r9
 8003d24:	3001      	adds	r0, #1
 8003d26:	d0e6      	beq.n	8003cf6 <_printf_common+0xae>
 8003d28:	3601      	adds	r6, #1
 8003d2a:	e7d9      	b.n	8003ce0 <_printf_common+0x98>

08003d2c <_printf_i>:
 8003d2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d30:	7e0f      	ldrb	r7, [r1, #24]
 8003d32:	4691      	mov	r9, r2
 8003d34:	2f78      	cmp	r7, #120	@ 0x78
 8003d36:	4680      	mov	r8, r0
 8003d38:	460c      	mov	r4, r1
 8003d3a:	469a      	mov	sl, r3
 8003d3c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003d3e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003d42:	d807      	bhi.n	8003d54 <_printf_i+0x28>
 8003d44:	2f62      	cmp	r7, #98	@ 0x62
 8003d46:	d80a      	bhi.n	8003d5e <_printf_i+0x32>
 8003d48:	2f00      	cmp	r7, #0
 8003d4a:	f000 80d3 	beq.w	8003ef4 <_printf_i+0x1c8>
 8003d4e:	2f58      	cmp	r7, #88	@ 0x58
 8003d50:	f000 80ba 	beq.w	8003ec8 <_printf_i+0x19c>
 8003d54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003d58:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003d5c:	e03a      	b.n	8003dd4 <_printf_i+0xa8>
 8003d5e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003d62:	2b15      	cmp	r3, #21
 8003d64:	d8f6      	bhi.n	8003d54 <_printf_i+0x28>
 8003d66:	a101      	add	r1, pc, #4	@ (adr r1, 8003d6c <_printf_i+0x40>)
 8003d68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003d6c:	08003dc5 	.word	0x08003dc5
 8003d70:	08003dd9 	.word	0x08003dd9
 8003d74:	08003d55 	.word	0x08003d55
 8003d78:	08003d55 	.word	0x08003d55
 8003d7c:	08003d55 	.word	0x08003d55
 8003d80:	08003d55 	.word	0x08003d55
 8003d84:	08003dd9 	.word	0x08003dd9
 8003d88:	08003d55 	.word	0x08003d55
 8003d8c:	08003d55 	.word	0x08003d55
 8003d90:	08003d55 	.word	0x08003d55
 8003d94:	08003d55 	.word	0x08003d55
 8003d98:	08003edb 	.word	0x08003edb
 8003d9c:	08003e03 	.word	0x08003e03
 8003da0:	08003e95 	.word	0x08003e95
 8003da4:	08003d55 	.word	0x08003d55
 8003da8:	08003d55 	.word	0x08003d55
 8003dac:	08003efd 	.word	0x08003efd
 8003db0:	08003d55 	.word	0x08003d55
 8003db4:	08003e03 	.word	0x08003e03
 8003db8:	08003d55 	.word	0x08003d55
 8003dbc:	08003d55 	.word	0x08003d55
 8003dc0:	08003e9d 	.word	0x08003e9d
 8003dc4:	6833      	ldr	r3, [r6, #0]
 8003dc6:	1d1a      	adds	r2, r3, #4
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	6032      	str	r2, [r6, #0]
 8003dcc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003dd0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e09e      	b.n	8003f16 <_printf_i+0x1ea>
 8003dd8:	6833      	ldr	r3, [r6, #0]
 8003dda:	6820      	ldr	r0, [r4, #0]
 8003ddc:	1d19      	adds	r1, r3, #4
 8003dde:	6031      	str	r1, [r6, #0]
 8003de0:	0606      	lsls	r6, r0, #24
 8003de2:	d501      	bpl.n	8003de8 <_printf_i+0xbc>
 8003de4:	681d      	ldr	r5, [r3, #0]
 8003de6:	e003      	b.n	8003df0 <_printf_i+0xc4>
 8003de8:	0645      	lsls	r5, r0, #25
 8003dea:	d5fb      	bpl.n	8003de4 <_printf_i+0xb8>
 8003dec:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003df0:	2d00      	cmp	r5, #0
 8003df2:	da03      	bge.n	8003dfc <_printf_i+0xd0>
 8003df4:	232d      	movs	r3, #45	@ 0x2d
 8003df6:	426d      	negs	r5, r5
 8003df8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003dfc:	230a      	movs	r3, #10
 8003dfe:	4859      	ldr	r0, [pc, #356]	@ (8003f64 <_printf_i+0x238>)
 8003e00:	e011      	b.n	8003e26 <_printf_i+0xfa>
 8003e02:	6821      	ldr	r1, [r4, #0]
 8003e04:	6833      	ldr	r3, [r6, #0]
 8003e06:	0608      	lsls	r0, r1, #24
 8003e08:	f853 5b04 	ldr.w	r5, [r3], #4
 8003e0c:	d402      	bmi.n	8003e14 <_printf_i+0xe8>
 8003e0e:	0649      	lsls	r1, r1, #25
 8003e10:	bf48      	it	mi
 8003e12:	b2ad      	uxthmi	r5, r5
 8003e14:	2f6f      	cmp	r7, #111	@ 0x6f
 8003e16:	6033      	str	r3, [r6, #0]
 8003e18:	bf14      	ite	ne
 8003e1a:	230a      	movne	r3, #10
 8003e1c:	2308      	moveq	r3, #8
 8003e1e:	4851      	ldr	r0, [pc, #324]	@ (8003f64 <_printf_i+0x238>)
 8003e20:	2100      	movs	r1, #0
 8003e22:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003e26:	6866      	ldr	r6, [r4, #4]
 8003e28:	2e00      	cmp	r6, #0
 8003e2a:	bfa8      	it	ge
 8003e2c:	6821      	ldrge	r1, [r4, #0]
 8003e2e:	60a6      	str	r6, [r4, #8]
 8003e30:	bfa4      	itt	ge
 8003e32:	f021 0104 	bicge.w	r1, r1, #4
 8003e36:	6021      	strge	r1, [r4, #0]
 8003e38:	b90d      	cbnz	r5, 8003e3e <_printf_i+0x112>
 8003e3a:	2e00      	cmp	r6, #0
 8003e3c:	d04b      	beq.n	8003ed6 <_printf_i+0x1aa>
 8003e3e:	4616      	mov	r6, r2
 8003e40:	fbb5 f1f3 	udiv	r1, r5, r3
 8003e44:	fb03 5711 	mls	r7, r3, r1, r5
 8003e48:	5dc7      	ldrb	r7, [r0, r7]
 8003e4a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003e4e:	462f      	mov	r7, r5
 8003e50:	42bb      	cmp	r3, r7
 8003e52:	460d      	mov	r5, r1
 8003e54:	d9f4      	bls.n	8003e40 <_printf_i+0x114>
 8003e56:	2b08      	cmp	r3, #8
 8003e58:	d10b      	bne.n	8003e72 <_printf_i+0x146>
 8003e5a:	6823      	ldr	r3, [r4, #0]
 8003e5c:	07df      	lsls	r7, r3, #31
 8003e5e:	d508      	bpl.n	8003e72 <_printf_i+0x146>
 8003e60:	6923      	ldr	r3, [r4, #16]
 8003e62:	6861      	ldr	r1, [r4, #4]
 8003e64:	4299      	cmp	r1, r3
 8003e66:	bfde      	ittt	le
 8003e68:	2330      	movle	r3, #48	@ 0x30
 8003e6a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003e6e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003e72:	1b92      	subs	r2, r2, r6
 8003e74:	6122      	str	r2, [r4, #16]
 8003e76:	464b      	mov	r3, r9
 8003e78:	4621      	mov	r1, r4
 8003e7a:	4640      	mov	r0, r8
 8003e7c:	f8cd a000 	str.w	sl, [sp]
 8003e80:	aa03      	add	r2, sp, #12
 8003e82:	f7ff fee1 	bl	8003c48 <_printf_common>
 8003e86:	3001      	adds	r0, #1
 8003e88:	d14a      	bne.n	8003f20 <_printf_i+0x1f4>
 8003e8a:	f04f 30ff 	mov.w	r0, #4294967295
 8003e8e:	b004      	add	sp, #16
 8003e90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e94:	6823      	ldr	r3, [r4, #0]
 8003e96:	f043 0320 	orr.w	r3, r3, #32
 8003e9a:	6023      	str	r3, [r4, #0]
 8003e9c:	2778      	movs	r7, #120	@ 0x78
 8003e9e:	4832      	ldr	r0, [pc, #200]	@ (8003f68 <_printf_i+0x23c>)
 8003ea0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003ea4:	6823      	ldr	r3, [r4, #0]
 8003ea6:	6831      	ldr	r1, [r6, #0]
 8003ea8:	061f      	lsls	r7, r3, #24
 8003eaa:	f851 5b04 	ldr.w	r5, [r1], #4
 8003eae:	d402      	bmi.n	8003eb6 <_printf_i+0x18a>
 8003eb0:	065f      	lsls	r7, r3, #25
 8003eb2:	bf48      	it	mi
 8003eb4:	b2ad      	uxthmi	r5, r5
 8003eb6:	6031      	str	r1, [r6, #0]
 8003eb8:	07d9      	lsls	r1, r3, #31
 8003eba:	bf44      	itt	mi
 8003ebc:	f043 0320 	orrmi.w	r3, r3, #32
 8003ec0:	6023      	strmi	r3, [r4, #0]
 8003ec2:	b11d      	cbz	r5, 8003ecc <_printf_i+0x1a0>
 8003ec4:	2310      	movs	r3, #16
 8003ec6:	e7ab      	b.n	8003e20 <_printf_i+0xf4>
 8003ec8:	4826      	ldr	r0, [pc, #152]	@ (8003f64 <_printf_i+0x238>)
 8003eca:	e7e9      	b.n	8003ea0 <_printf_i+0x174>
 8003ecc:	6823      	ldr	r3, [r4, #0]
 8003ece:	f023 0320 	bic.w	r3, r3, #32
 8003ed2:	6023      	str	r3, [r4, #0]
 8003ed4:	e7f6      	b.n	8003ec4 <_printf_i+0x198>
 8003ed6:	4616      	mov	r6, r2
 8003ed8:	e7bd      	b.n	8003e56 <_printf_i+0x12a>
 8003eda:	6833      	ldr	r3, [r6, #0]
 8003edc:	6825      	ldr	r5, [r4, #0]
 8003ede:	1d18      	adds	r0, r3, #4
 8003ee0:	6961      	ldr	r1, [r4, #20]
 8003ee2:	6030      	str	r0, [r6, #0]
 8003ee4:	062e      	lsls	r6, r5, #24
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	d501      	bpl.n	8003eee <_printf_i+0x1c2>
 8003eea:	6019      	str	r1, [r3, #0]
 8003eec:	e002      	b.n	8003ef4 <_printf_i+0x1c8>
 8003eee:	0668      	lsls	r0, r5, #25
 8003ef0:	d5fb      	bpl.n	8003eea <_printf_i+0x1be>
 8003ef2:	8019      	strh	r1, [r3, #0]
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	4616      	mov	r6, r2
 8003ef8:	6123      	str	r3, [r4, #16]
 8003efa:	e7bc      	b.n	8003e76 <_printf_i+0x14a>
 8003efc:	6833      	ldr	r3, [r6, #0]
 8003efe:	2100      	movs	r1, #0
 8003f00:	1d1a      	adds	r2, r3, #4
 8003f02:	6032      	str	r2, [r6, #0]
 8003f04:	681e      	ldr	r6, [r3, #0]
 8003f06:	6862      	ldr	r2, [r4, #4]
 8003f08:	4630      	mov	r0, r6
 8003f0a:	f000 f859 	bl	8003fc0 <memchr>
 8003f0e:	b108      	cbz	r0, 8003f14 <_printf_i+0x1e8>
 8003f10:	1b80      	subs	r0, r0, r6
 8003f12:	6060      	str	r0, [r4, #4]
 8003f14:	6863      	ldr	r3, [r4, #4]
 8003f16:	6123      	str	r3, [r4, #16]
 8003f18:	2300      	movs	r3, #0
 8003f1a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003f1e:	e7aa      	b.n	8003e76 <_printf_i+0x14a>
 8003f20:	4632      	mov	r2, r6
 8003f22:	4649      	mov	r1, r9
 8003f24:	4640      	mov	r0, r8
 8003f26:	6923      	ldr	r3, [r4, #16]
 8003f28:	47d0      	blx	sl
 8003f2a:	3001      	adds	r0, #1
 8003f2c:	d0ad      	beq.n	8003e8a <_printf_i+0x15e>
 8003f2e:	6823      	ldr	r3, [r4, #0]
 8003f30:	079b      	lsls	r3, r3, #30
 8003f32:	d413      	bmi.n	8003f5c <_printf_i+0x230>
 8003f34:	68e0      	ldr	r0, [r4, #12]
 8003f36:	9b03      	ldr	r3, [sp, #12]
 8003f38:	4298      	cmp	r0, r3
 8003f3a:	bfb8      	it	lt
 8003f3c:	4618      	movlt	r0, r3
 8003f3e:	e7a6      	b.n	8003e8e <_printf_i+0x162>
 8003f40:	2301      	movs	r3, #1
 8003f42:	4632      	mov	r2, r6
 8003f44:	4649      	mov	r1, r9
 8003f46:	4640      	mov	r0, r8
 8003f48:	47d0      	blx	sl
 8003f4a:	3001      	adds	r0, #1
 8003f4c:	d09d      	beq.n	8003e8a <_printf_i+0x15e>
 8003f4e:	3501      	adds	r5, #1
 8003f50:	68e3      	ldr	r3, [r4, #12]
 8003f52:	9903      	ldr	r1, [sp, #12]
 8003f54:	1a5b      	subs	r3, r3, r1
 8003f56:	42ab      	cmp	r3, r5
 8003f58:	dcf2      	bgt.n	8003f40 <_printf_i+0x214>
 8003f5a:	e7eb      	b.n	8003f34 <_printf_i+0x208>
 8003f5c:	2500      	movs	r5, #0
 8003f5e:	f104 0619 	add.w	r6, r4, #25
 8003f62:	e7f5      	b.n	8003f50 <_printf_i+0x224>
 8003f64:	08004145 	.word	0x08004145
 8003f68:	08004156 	.word	0x08004156

08003f6c <memmove>:
 8003f6c:	4288      	cmp	r0, r1
 8003f6e:	b510      	push	{r4, lr}
 8003f70:	eb01 0402 	add.w	r4, r1, r2
 8003f74:	d902      	bls.n	8003f7c <memmove+0x10>
 8003f76:	4284      	cmp	r4, r0
 8003f78:	4623      	mov	r3, r4
 8003f7a:	d807      	bhi.n	8003f8c <memmove+0x20>
 8003f7c:	1e43      	subs	r3, r0, #1
 8003f7e:	42a1      	cmp	r1, r4
 8003f80:	d008      	beq.n	8003f94 <memmove+0x28>
 8003f82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003f86:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003f8a:	e7f8      	b.n	8003f7e <memmove+0x12>
 8003f8c:	4601      	mov	r1, r0
 8003f8e:	4402      	add	r2, r0
 8003f90:	428a      	cmp	r2, r1
 8003f92:	d100      	bne.n	8003f96 <memmove+0x2a>
 8003f94:	bd10      	pop	{r4, pc}
 8003f96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003f9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003f9e:	e7f7      	b.n	8003f90 <memmove+0x24>

08003fa0 <_sbrk_r>:
 8003fa0:	b538      	push	{r3, r4, r5, lr}
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	4d05      	ldr	r5, [pc, #20]	@ (8003fbc <_sbrk_r+0x1c>)
 8003fa6:	4604      	mov	r4, r0
 8003fa8:	4608      	mov	r0, r1
 8003faa:	602b      	str	r3, [r5, #0]
 8003fac:	f7fc facc 	bl	8000548 <_sbrk>
 8003fb0:	1c43      	adds	r3, r0, #1
 8003fb2:	d102      	bne.n	8003fba <_sbrk_r+0x1a>
 8003fb4:	682b      	ldr	r3, [r5, #0]
 8003fb6:	b103      	cbz	r3, 8003fba <_sbrk_r+0x1a>
 8003fb8:	6023      	str	r3, [r4, #0]
 8003fba:	bd38      	pop	{r3, r4, r5, pc}
 8003fbc:	200016d8 	.word	0x200016d8

08003fc0 <memchr>:
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	b510      	push	{r4, lr}
 8003fc4:	b2c9      	uxtb	r1, r1
 8003fc6:	4402      	add	r2, r0
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	4618      	mov	r0, r3
 8003fcc:	d101      	bne.n	8003fd2 <memchr+0x12>
 8003fce:	2000      	movs	r0, #0
 8003fd0:	e003      	b.n	8003fda <memchr+0x1a>
 8003fd2:	7804      	ldrb	r4, [r0, #0]
 8003fd4:	3301      	adds	r3, #1
 8003fd6:	428c      	cmp	r4, r1
 8003fd8:	d1f6      	bne.n	8003fc8 <memchr+0x8>
 8003fda:	bd10      	pop	{r4, pc}

08003fdc <memcpy>:
 8003fdc:	440a      	add	r2, r1
 8003fde:	4291      	cmp	r1, r2
 8003fe0:	f100 33ff 	add.w	r3, r0, #4294967295
 8003fe4:	d100      	bne.n	8003fe8 <memcpy+0xc>
 8003fe6:	4770      	bx	lr
 8003fe8:	b510      	push	{r4, lr}
 8003fea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003fee:	4291      	cmp	r1, r2
 8003ff0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ff4:	d1f9      	bne.n	8003fea <memcpy+0xe>
 8003ff6:	bd10      	pop	{r4, pc}

08003ff8 <_realloc_r>:
 8003ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ffc:	4680      	mov	r8, r0
 8003ffe:	4615      	mov	r5, r2
 8004000:	460c      	mov	r4, r1
 8004002:	b921      	cbnz	r1, 800400e <_realloc_r+0x16>
 8004004:	4611      	mov	r1, r2
 8004006:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800400a:	f7ff bc39 	b.w	8003880 <_malloc_r>
 800400e:	b92a      	cbnz	r2, 800401c <_realloc_r+0x24>
 8004010:	f7ff fbcc 	bl	80037ac <_free_r>
 8004014:	2400      	movs	r4, #0
 8004016:	4620      	mov	r0, r4
 8004018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800401c:	f000 f81a 	bl	8004054 <_malloc_usable_size_r>
 8004020:	4285      	cmp	r5, r0
 8004022:	4606      	mov	r6, r0
 8004024:	d802      	bhi.n	800402c <_realloc_r+0x34>
 8004026:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800402a:	d8f4      	bhi.n	8004016 <_realloc_r+0x1e>
 800402c:	4629      	mov	r1, r5
 800402e:	4640      	mov	r0, r8
 8004030:	f7ff fc26 	bl	8003880 <_malloc_r>
 8004034:	4607      	mov	r7, r0
 8004036:	2800      	cmp	r0, #0
 8004038:	d0ec      	beq.n	8004014 <_realloc_r+0x1c>
 800403a:	42b5      	cmp	r5, r6
 800403c:	462a      	mov	r2, r5
 800403e:	4621      	mov	r1, r4
 8004040:	bf28      	it	cs
 8004042:	4632      	movcs	r2, r6
 8004044:	f7ff ffca 	bl	8003fdc <memcpy>
 8004048:	4621      	mov	r1, r4
 800404a:	4640      	mov	r0, r8
 800404c:	f7ff fbae 	bl	80037ac <_free_r>
 8004050:	463c      	mov	r4, r7
 8004052:	e7e0      	b.n	8004016 <_realloc_r+0x1e>

08004054 <_malloc_usable_size_r>:
 8004054:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004058:	1f18      	subs	r0, r3, #4
 800405a:	2b00      	cmp	r3, #0
 800405c:	bfbc      	itt	lt
 800405e:	580b      	ldrlt	r3, [r1, r0]
 8004060:	18c0      	addlt	r0, r0, r3
 8004062:	4770      	bx	lr

08004064 <_init>:
 8004064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004066:	bf00      	nop
 8004068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800406a:	bc08      	pop	{r3}
 800406c:	469e      	mov	lr, r3
 800406e:	4770      	bx	lr

08004070 <_fini>:
 8004070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004072:	bf00      	nop
 8004074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004076:	bc08      	pop	{r3}
 8004078:	469e      	mov	lr, r3
 800407a:	4770      	bx	lr
